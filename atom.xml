<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deepdim-Unsky&#39;Blog</title>
  <subtitle>Unsky Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-23T03:19:41.276Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>unsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maximum Subarray</title>
    <link href="http://yoursite.com/2017/02/23/Maximum-Subarray/"/>
    <id>http://yoursite.com/2017/02/23/Maximum-Subarray/</id>
    <published>2017-02-23T03:17:15.000Z</published>
    <updated>2017-02-23T03:19:41.276Z</updated>
    
    <content type="html"><![CDATA[<p>id53. Maximum Subarray Add to List<br>Description  Submission  Solutions<br>Total Accepted: 169989<br>Total Submissions: 436088<br>Difficulty: Easy<br>Contributors: Admin<br>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.<br><a id="more"></a><br>第一种，穷举法<br>第二种，优化<br>第三种，贪婪算法</p>
<pre><code class="cpp">
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id53. Maximum Subarray Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 169989&lt;br&gt;Total Submissions: 436088&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the array [-2,1,-3,4,-1,2,1,-5,4],&lt;br&gt;the contiguous subarray [4,-1,2,1] has the largest sum = 6.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Valid Parentheses</title>
    <link href="http://yoursite.com/2017/02/22/Longest-Valid-Parentheses/"/>
    <id>http://yoursite.com/2017/02/22/Longest-Valid-Parentheses/</id>
    <published>2017-02-22T03:42:35.000Z</published>
    <updated>2017-02-22T03:44:36.616Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Longest Valid Parentheses Add to List<br>Description  Submission  Solutions<br>Total Accepted: 86398<br>Total Submissions: 374225<br>Difficulty: Hard<br>Contributors: Admin<br>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<a id="more"></a>
For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</li>
</ol>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.<br>使用动态规划进行解题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (s.length()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> dp[s.length()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        dp[i]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxLen =<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()<span class="number">-2</span>; i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>((i+dp[i+<span class="number">1</span>]+<span class="number">1</span>)&lt;s.length()&amp;&amp;s[i+dp[i+<span class="number">1</span>]+<span class="number">1</span>]==<span class="string">')'</span>)</div><div class="line">                &#123;dp[i]=dp[i+<span class="number">1</span>]+<span class="number">2</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;dp[i];</div><div class="line">                <span class="keyword">if</span>((i+dp[i+<span class="number">1</span>]+<span class="number">2</span>)&lt;s.length())</div><div class="line">                dp[i]+=dp[i+dp[i+<span class="number">1</span>]+<span class="number">2</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(maxLen&lt;dp[i])</div><div class="line">            maxLen=dp[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Longest Valid Parentheses Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 86398&lt;br&gt;Total Submissions: 374225&lt;br&gt;Difficulty: Hard&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>409.Longest Palindrome</title>
    <link href="http://yoursite.com/2017/02/22/409-Longest-Palindrome/"/>
    <id>http://yoursite.com/2017/02/22/409-Longest-Palindrome/</id>
    <published>2017-02-22T02:22:35.000Z</published>
    <updated>2017-02-22T02:24:48.124Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Longest Palindrome Add to List<br>Description  Submission  Solutions<br>Total Accepted: 28693<br>Total Submissions: 64338<br>Difficulty: Easy<br>Contributors: Admin<br>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</li>
</ol>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.<br><a id="more"></a></p>
<p>Note:<br>Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p>Input:<br>“abccccdd”</p>
<p>Output:<br>7</p>
<p>Explanation:<br>One longest palindrome that can be built is “dccaccd”, whose length is 7.</p>
<p>很简单得题目<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; ma;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        ma[s[i]]++;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=ma.begin();</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> w=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(;it!=ma.end();it++)</div><div class="line">        &#123;len+=((it-&gt;second)/<span class="number">2</span>);</div><div class="line">         <span class="keyword">if</span>(it-&gt;second%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">         w=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">  <span class="keyword">return</span>  w?(len*<span class="number">2</span>+<span class="number">1</span>):(len*<span class="number">2</span>);</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Longest Palindrome Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 28693&lt;br&gt;Total Submissions: 64338&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is case sensitive, for example “Aa” is not considered a palindrome here.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate Parentheses</title>
    <link href="http://yoursite.com/2017/01/19/Generate-Parentheses/"/>
    <id>http://yoursite.com/2017/01/19/Generate-Parentheses/</id>
    <published>2017-01-19T08:58:06.000Z</published>
    <updated>2017-02-22T03:33:31.275Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Generate Parentheses Add to List<br>Description  Submission  Solutions<br>Total Accepted: 129826<br>Total Submissions: 305733<br>Difficulty: Medium<br>Contributors: Admin<br>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<a id="more"></a>
</li>
</ol>
<p>For example, given n = 3, a solution set is:</p>
<p>[<br>  “((()))”,<br>  “(()())”,<br>  “(())()”,<br>  “()(())”,<br>  “()()()”<br>]<br>使用递归得思想，主要是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(left&lt;n)<span class="comment">//对于左括号，只要没超过个数什么时候都可以插入</span></div><div class="line">  &#123;s.push_back(<span class="string">'('</span>);</div><div class="line">  generate(res,s,left+<span class="number">1</span>,right,n);</div><div class="line">  s.pop_back();<span class="comment">//在递归回来之后应该将刚刚插入得进行删除</span></div><div class="line">  &#125;</div><div class="line"><span class="keyword">if</span>(right&lt;left)<span class="comment">//在右括号得个数小于左括号得个数时候可以进行右括号得插入</span></div><div class="line">&#123;s.push_back(<span class="string">')'</span>);</div><div class="line"> generate(res,s,left,right+<span class="number">1</span>,n);</div><div class="line">  s.pop_back();<span class="comment">//删除</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:s</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="built_in">string</span> s;</div><div class="line">        generate(res,s,<span class="number">0</span>,<span class="number">0</span>,n);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp;res,<span class="built_in">string</span> s,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(left==n&amp;&amp;right==n)</div><div class="line">     &#123;res.push_back(s);</div><div class="line">     <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(left&lt;n)</div><div class="line">        &#123;s.push_back(<span class="string">'('</span>);</div><div class="line">        generate(res,s,left+<span class="number">1</span>,right,n);</div><div class="line">        s.pop_back();</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span>(right&lt;left)</div><div class="line">    &#123;s.push_back(<span class="string">')'</span>);</div><div class="line">       generate(res,s,left,right+<span class="number">1</span>,n);</div><div class="line">        s.pop_back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Generate Parentheses Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 129826&lt;br&gt;Total Submissions: 305733&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="http://yoursite.com/2017/01/19/Merge-Two-Sorted-Lists/"/>
    <id>http://yoursite.com/2017/01/19/Merge-Two-Sorted-Lists/</id>
    <published>2017-01-19T08:21:26.000Z</published>
    <updated>2017-01-19T08:23:48.589Z</updated>
    
    <content type="html"><![CDATA[<p>id21. Merge Two Sorted Lists   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 185619<br>Total Submissions: 488183<br>Difficulty: Easy<br>Contributors: Admin<br>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(l1==<span class="literal">NULL</span>)<span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2==<span class="literal">NULL</span>)<span class="keyword">return</span> l1;</div><div class="line"></div><div class="line">        ListNode *result=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line">        ListNode *head=result;</div><div class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)</div><div class="line">          &#123; ListNode *node=l1;</div><div class="line">          result-&gt;next=node;</div><div class="line">          result=result-&gt;next;</div><div class="line">          l1=l1-&gt;next;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(l1-&gt;val&gt;=l2-&gt;val)&#123;</div><div class="line">          ListNode *node=l2;</div><div class="line"></div><div class="line">          result-&gt;next=node;</div><div class="line">          result=result-&gt;next;</div><div class="line">          l2=l2-&gt;next;</div><div class="line">      <span class="comment">//   cout&lt;&lt;l2-&gt;val&lt;&lt;" "&lt;&lt;l1-&gt;val&lt;&lt;endl;</span></div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1&amp;&amp;l2)</div><div class="line">        <span class="keyword">return</span> head-&gt;next;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1==<span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">            result-&gt;next=l2;&#125;</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="literal">NULL</span>)</div><div class="line">         result-&gt;next=l1;</div><div class="line">         <span class="keyword">return</span> head-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">delete</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id21. Merge Two Sorted Lists   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 185619&lt;br&gt;Total Submissions: 488183&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Valid Parentheses</title>
    <link href="http://yoursite.com/2017/01/19/Valid-Parentheses/"/>
    <id>http://yoursite.com/2017/01/19/Valid-Parentheses/</id>
    <published>2017-01-19T03:29:24.000Z</published>
    <updated>2017-01-19T03:34:01.591Z</updated>
    
    <content type="html"><![CDATA[<p>id20. Valid Parentheses   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 163285<br>Total Submissions: 507096<br>Difficulty: Easy<br>Contributors: Admin<br>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
<a id="more"></a>
<p>字符串匹配<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(s[i]==<span class="string">'('</span>||s[i]==<span class="string">'['</span>||s[i]==<span class="string">'&#123;'</span>)</div><div class="line">            st.push(s[i]);</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)</div><div class="line">            &#123;<span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">             <span class="keyword">if</span>(st.top()==<span class="string">'('</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">']'</span>)</div><div class="line">            &#123;<span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(st.top()==<span class="string">'['</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;&#125;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'&#125;'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;<span class="keyword">if</span>(st.top()==<span class="string">'&#123;'</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(st.empty())</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id20. Valid Parentheses   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 163285&lt;br&gt;Total Submissions: 507096&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2017/01/18/Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2017/01/18/Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-01-18T15:30:04.000Z</published>
    <updated>2017-01-18T15:40:02.426Z</updated>
    
    <content type="html"><![CDATA[<p>id19. Remove Nth Node From End of List   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 154617<br>Total Submissions: 480607<br>Difficulty: Easy<br>Contributors: Admin<br>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.<br><a id="more"></a><br>主要使用了双指针，比较重要得一点是建立头节点，因为是一个独立结点所以需要分配空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span></span></div><div class="line">    &#123; ListNode* result=<span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">   ListNode* Lhead= <span class="keyword">new</span> ListNode(<span class="keyword">sizeof</span>(ListNode));</div><div class="line"><span class="comment">//  Lhead-&gt;val=99;</span></div><div class="line">   Lhead-&gt;next=head;</div><div class="line">  <span class="comment">// cout&lt;&lt;Lhead-&gt;next-&gt;next-&gt;val;</span></div><div class="line">        ListNode *p=Lhead;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">        p=p-&gt;next;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        ListNode *q=Lhead;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;p=p-&gt;next;</div><div class="line">         q=q-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* h=q-&gt;next-&gt;next;</div><div class="line"></div><div class="line">    <span class="comment">//  cout&lt;&lt;h-&gt;val&lt;&lt;q-&gt;val;</span></div><div class="line">        q-&gt;next=h;</div><div class="line">     <span class="comment">//   cout&lt;&lt;q-&gt;val;</span></div><div class="line">        result=Lhead-&gt;next;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id19. Remove Nth Node From End of List   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 154617&lt;br&gt;Total Submissions: 480607&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;p&gt;   Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2.&lt;/p&gt;
&lt;p&gt;   After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.&lt;br&gt;Note:&lt;br&gt;Given n will always be valid.&lt;br&gt;Try to do this in one pass.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>4Sum</title>
    <link href="http://yoursite.com/2017/01/18/4Sum/"/>
    <id>http://yoursite.com/2017/01/18/4Sum/</id>
    <published>2017-01-18T11:54:09.000Z</published>
    <updated>2017-01-18T11:59:19.893Z</updated>
    
    <content type="html"><![CDATA[<p>id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 101633<br>Total Submissions: 394751<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p>
<p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]<br><a id="more"></a><br>和3sum差不多 关键是处理重复<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">         <span class="keyword">if</span>(nums.size()&lt;<span class="number">4</span>)</div><div class="line">         <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-3</span>;i++)</div><div class="line">        &#123;<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size()<span class="number">-2</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k=j+<span class="number">1</span>;</div><div class="line">         <span class="keyword">int</span> m=nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(k&lt;m)</div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]+nums[m]==target)</div><div class="line">                &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[j]);</div><div class="line">                vec.push_back(nums[k]);</div><div class="line">                vec.push_back(nums[m]);</div><div class="line">                res.push_back(vec);</div><div class="line">                m--;</div><div class="line">                k++;</div><div class="line">                 <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                  <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&lt;target-nums[i]-nums[j])</div><div class="line">                &#123;k++;</div><div class="line">                <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&gt;target-nums[i]-nums[j])</div><div class="line">                &#123;m--;</div><div class="line">                 <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(nums[j+<span class="number">1</span>]==nums[j]&amp;&amp;j+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(nums[i+<span class="number">1</span>]==nums[i]&amp;&amp;i+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 101633&lt;br&gt;Total Submissions: 394751&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;Note: The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;p&gt;For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.&lt;/p&gt;
&lt;p&gt;A solution set is:&lt;br&gt;[&lt;br&gt;  [-1,  0, 0, 1],&lt;br&gt;  [-2, -1, 1, 2],&lt;br&gt;  [-2,  0, 0, 2]&lt;br&gt;]&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="4Sum" scheme="http://yoursite.com/tags/4Sum/"/>
    
  </entry>
  
  <entry>
    <title>QT实战,cortfly局域网工具</title>
    <link href="http://yoursite.com/2017/01/18/QT%E5%AE%9E%E6%88%98-cortfly%E5%B1%80%E5%9F%9F%E7%BD%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/01/18/QT实战-cortfly局域网工具/</id>
    <published>2017-01-18T07:58:55.000Z</published>
    <updated>2017-01-18T08:57:53.153Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。<br>update v1.0</p>
<ol>
<li>软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。</li>
<li>局域网聊天</li>
<li>文件对传</li>
<li>实验室论坛一键连接</li>
<li>实验室服务器登陆</li>
</ol>
<p><code>软件下载：</code>www.cortfly.com<br><code>github源码：</code> <a href="https://github.com/unsky/cortfly" target="_blank" rel="external">https://github.com/unsky/cortfly</a><br><a id="more"></a></p>
<p>#局域网聊天，文件秒传</p>
<p><img src="https://github.com/unsky/cortfly/raw/master/img01.jpg" alt="image"></p>
<p>#服务器登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img02.jpg" alt="image"></p>
<p>#论坛支持及论坛登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img03.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。&lt;br&gt;update v1.0&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。&lt;/li&gt;
&lt;li&gt;局域网聊天&lt;/li&gt;
&lt;li&gt;文件对传&lt;/li&gt;
&lt;li&gt;实验室论坛一键连接&lt;/li&gt;
&lt;li&gt;实验室服务器登陆&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;软件下载：&lt;/code&gt;www.cortfly.com&lt;br&gt;&lt;code&gt;github源码：&lt;/code&gt; &lt;a href=&quot;https://github.com/unsky/cortfly&quot;&gt;https://github.com/unsky/cortfly&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="cortfly" scheme="http://yoursite.com/tags/cortfly/"/>
    
  </entry>
  
  <entry>
    <title>Letter Combinations of a Phone Number</title>
    <link href="http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-01-18T07:49:48.000Z</published>
    <updated>2017-01-18T07:55:50.564Z</updated>
    
    <content type="html"><![CDATA[<p>Given a digit string, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>
<p><img src="/images/leetcodeid17/1.png" alt=""></p>
<p>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br><a id="more"></a><br>问题可以归结为backtracking问题，使用递归，需要建立对应得字母表<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</div><div class="line">        vector&lt;string&gt; res;</div><div class="line">        if (digits.length()==0)</div><div class="line">    return res;</div><div class="line">     string dict[] = &#123;" ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"&#125;;</div><div class="line">    string comb(digits.length(),'/0');</div><div class="line">           backtracking(digits,res,dict,comb,0);</div><div class="line">           return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  void  backtracking(string digits,vector&lt;string&gt; &amp;res,string dict[],string &amp;comb, int index)</div><div class="line">    &#123; if(index==digits.size())</div><div class="line">      &#123;res.push_back(comb);</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      string str=dict[digits[index]-'0'];</div><div class="line">      for(int i=0;i&lt;str.length();i++)</div><div class="line">      &#123;comb[index]=str[i];</div><div class="line">         backtracking(digits,res,dict,comb,index+1);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
&lt;p&gt;A mapping of digit to letters (just like on the telephone buttons) is given below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/leetcodeid17/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Input:Digit string “23”&lt;br&gt;Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>3Sum Closest</title>
    <link href="http://yoursite.com/2017/01/18/3Sum-Closest/"/>
    <id>http://yoursite.com/2017/01/18/3Sum-Closest/</id>
    <published>2017-01-18T07:44:48.000Z</published>
    <updated>2017-01-18T07:48:59.936Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>3Sum Closest   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 109596<br>Total Submissions: 358454<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p>For example, given array S = {-1 2 1 -4}, and target = 1.</p>
<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
<a id="more"></a>
<p>和3sum差不多，使用双指针，唯一得区别是每次指针移动判断得是和目标之间得距离得绝对值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> interval=<span class="number">0</span>;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        res=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[nums.size()<span class="number">-1</span>];</div><div class="line">        interval=<span class="built_in">abs</span>(target-res);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">int</span> j=i+<span class="number">1</span>,k=nums.size()<span class="number">-1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(j!=k)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==target)</div><div class="line">              <span class="keyword">return</span> target;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&lt;target)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">             <span class="keyword">if</span>(target-nums[i]-nums[j]-nums[k]&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(target-nums[i]-nums[j]-nums[k]);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">            &#125;</div><div class="line">          j++; &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&gt;target)</div><div class="line">            &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]-target&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(nums[i]+nums[j]+nums[k]-target);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">          &#125; k--;&#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;3Sum Closest   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 109596&lt;br&gt;Total Submissions: 358454&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;For example, given array S = {-1 2 1 -4}, and target = 1.&lt;/p&gt;
&lt;p&gt;The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="3Sum Closest" scheme="http://yoursite.com/tags/3Sum-Closest/"/>
    
  </entry>
  
  <entry>
    <title>QT从入门到放弃:(6)Frame类族</title>
    <link href="http://yoursite.com/2017/01/11/QT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%886%EF%BC%89Frame%E7%B1%BB%E6%97%8F/"/>
    <id>http://yoursite.com/2017/01/11/QT从入门到放弃：（6）Frame类族/</id>
    <published>2017-01-11T06:53:43.000Z</published>
    <updated>2017-01-11T07:07:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，<br><a id="more"></a><br>带有边框得不叫主要特点是文本编辑器类QTextEdit类和各种项目视图.</p>
<p><img src="/images/frame/1.png" alt=""><br><img src="/images/frame/2.png" alt=""></p>
<h1 id="QFrame"><a href="#QFrame" class="headerlink" title="QFrame"></a>QFrame</h1><p>在设计器中拖入frame，右下角可以修改其具体属性。<br><img src="/images/frame/3.png" alt=""><br>效果如：<br><img src="/images/frame/4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep Learning Strong Parts for Pedestrian Detection</title>
    <link href="http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/"/>
    <id>http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/</id>
    <published>2016-12-09T13:04:02.000Z</published>
    <updated>2016-12-09T14:17:52.550Z</updated>
    
    <content type="html"><![CDATA[<p> Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。<br> <a id="more"></a><br> 本论文的核心思想是遮挡的处理问题。</p>
<h1 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h1><p> 传统的行人检测对遮挡行人的处理都是用单分类器进行处理，这篇论文，将不再适用单分类器，而是用多分类器处理遮挡问题。同时这种方法是基于分块的。</p>
<h1 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h1><ol>
<li>构建了一个部件池包含很多行人的分块，这些分块是自动选择的而且适用于不同的数据集。</li>
<li>基于各种CovNets,对各种分块分别训练一个网络，而不是单个分类器。</li>
<li><p>提出了一种解决偏移的方法。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="部件池的构建"><a href="#部件池的构建" class="headerlink" title="部件池的构建"></a>部件池的构建</h2><p><img src="/images/deeppart/1.png" alt=""></p>
<p>讲一个行人切分成2m<em>m个cell,在具体的试验中m=3.<br>就是18个cell,<br>然后适用一个h</em>w的滑动窗口在cell上滑动，步长是1，其中h和w满足<br><img src="/images/deeppart/2.png" alt=""><br>就是限制他们的大小，不能太小，太小了没意义。最后在实验的时候最小都取了2.</p>
<p>这样通过滑动，总共可以选择出45个这种部件。构造除了我们的部件池。用如下的公式表示<br><img src="/images/deeppart/3.png" alt=""></p>
</li>
</ol>
<p>x,y是左上的坐标，w，h是高，i是id,总共45个  这种表示方法的意思就是如果是整个图像就是（1，1，m，2m,id）</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p><img src="/images/deeppart/4.png" alt=""><br>对于负样本直接滑动出45个部件，<br>      对于正样本，需要选择，如果可见部分超过0.4就选择其是人的部件为正样本。如果这个人没又遮挡，直接滑动出45个部分。这样正负样本总共包含45部分，拿着这45种部件，训练45个探测器。。。（内心os:这居然是优点·····）</p>
<p>对于探测器直接用了pre-train的模型，然后进行fine-turning,<br>    fine-turning阶段吐槽一下作者的原话：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  we uniformly sample 16 positive and 48</div><div class="line">negative windows to construct a mini-batch. Experiments</div><div class="line">show that fine-tuning for 10000 iterations with a learning</div><div class="line">rate of 0.001 is sufficient to converge</div></pre></td></tr></table></figure>
<p>相当于重新训练一次了。。。</p>
<h1 id="处理偏移"><a href="#处理偏移" class="headerlink" title="处理偏移"></a>处理偏移</h1><p>为了接收任意尺寸的图片<br><img src="/images/deeppart/5.png" alt=""><br>他们把最后的全连接层换成了卷积层，这样就可以接收任意的尺寸了。<br>以下拿AlexNet为例子<br>因为AlexNet的感受野的步长是32<br>所以对原始的候选框进行抖动扩充：<br><img src="/images/deeppart/6.png" alt=""><br>其中<br><img src="/images/deeppart/7.png" alt="">是原始图像，这个公式的意思就是按照神经网络的步长进行比例的扩充。这样最终的卷积层产生的就是（1+n）<em>(1+n)</em>4096的score map。<br><img src="/images/deeppart/8.png" alt=""><br>作者先解释了一下偏移问题的重要性，然后拿了一个n=2的例子进行的讲解。</p>
<p>在这里，因为最终生成的是（1+n）<em>(1+n)</em>4096的score map<br><img src="/images/deeppart/9.png" alt=""><br>所以直接对其加入惩罚之后进行max(相当于max pooling)<br>    <img src="/images/deeppart/10.png" alt=""><br>  其实这个惩罚就是原位置的加权，</p>
<p>在实验中他们探究了a和b的值, 上图的例子中a=2 b=10.</p>
<h1 id="部件补充"><a href="#部件补充" class="headerlink" title="部件补充"></a>部件补充</h1><p>和R-CNN不同，它去掉了svm的分类，直接拿45个部件的1<em>1</em>4096的进行svm分类。。来判断最终的分类结果。。。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在AlexNet测试了三种部件：</p>
<p><img src="/images/deeppart/11.png" alt=""><br>加入偏移处理之后<br><img src="/images/deeppart/12.png" alt=""><br>三种模型上的三种部件对比：<br> <img src="/images/deeppart/13.png" alt=""></p>
<p> 整体在caltech-test<br> <img src="/images/deeppart/14.png" alt=""><br> 上的结果。<br><img src="/images/deeppart/15.png" alt=""><br>其他数据集<br><img src="/images/deeppart/16.png" alt=""><br>前六个分数最高的部件和随机选的六个部件。<br><img src="/images/deeppart/17.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iccv2015" scheme="http://yoursite.com/tags/iccv2015/"/>
    
      <category term="Pedestrian Detection" scheme="http://yoursite.com/tags/Pedestrian-Detection/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(5)标准对话框</title>
    <link href="http://yoursite.com/2016/12/09/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%885%EF%BC%89%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>http://yoursite.com/2016/12/09/QT5从入门到放弃：（5）标准对话框/</id>
    <published>2016-12-09T09:40:39.000Z</published>
    <updated>2016-12-12T15:10:27.776Z</updated>
    
    <content type="html"><![CDATA[<p>Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。<br><a id="more"></a><br><code>中文问题note:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这里使用了qt5+msvc2013编译器，对于中文乱码问题，可以直接在cpp文件中加入，</div><div class="line">#pragma execution_character_set(&quot;utf-8&quot;)</div><div class="line">即可直接输入汉字。</div></pre></td></tr></table></figure></p>
<p>我们挨个实验一下标准对话框：</p>
<h1 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h1><p>在设计师界面加入一个新的<br><code>push button</code><br>右键转到槽之后加入代码：<br>首先调用头文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QColorDialog&gt;</span></span></div></pre></td></tr></table></figure>
<p>加入代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    QColor color=QColorDialog::getColor(Qt::red,<span class="keyword">this</span>,<span class="string">"颜色"</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"颜色："</span>&lt;&lt;color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中队中color返回的 (ARGB alpha,red,green,blue) alpha是透明度1.0完全不透明,alpha 0.0是完全透明。 R G B用0~255的数值进行表示。<br>我们也可以分步的进行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QColorDialog <span class="title">dia</span><span class="params">(Qt::red,<span class="keyword">this</span>)</span></span>;<span class="comment">//初始颜色和父窗口</span></div><div class="line">    dia.setWindowTitle(<span class="string">"挑选喜欢的颜色"</span>);</div><div class="line">    dia.setOption(QColorDialog::ShowAlphaChannel);<span class="comment">//显示alpha</span></div><div class="line">    dia.exec();</div><div class="line"> <span class="comment">//   QColor color=QColorDialog::getColor(Qt::red,this,"爱国者导弹");</span></div><div class="line">  <span class="comment">//  qDebug()&lt;&lt;"颜色："&lt;&lt;color;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h1><p>新建一个push button 右键转到槽 引入头文件QFontDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"(*png)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于不同类型的文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div></pre></td></tr></table></figure></p>
<p>这里只可以选择一个文件，如果要选择多个文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QStringList filename=QFileDialog::getOpenFileNames(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>QStringList 可以存储多个字符串，getOpenFileNames可以选择多个文件并返回名字。</p>
<h1 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h1><p>新建一个push button 之后右键转到槽：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_3_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QFont font= QFontDialog::getFont(&amp;ok,<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(ok) <span class="keyword">this</span>-&gt;setFont(font);</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有选择字体"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于给固定的窗口选择字体可以使用，ui-&gt;pushButton_3-&gt;setFont(front);在这里对this窗口进行设置字体，会使窗口上的所有按钮字体改变。</p>
<h1 id="输入对话框"><a href="#输入对话框" class="headerlink" title="输入对话框"></a>输入对话框</h1><p>新建push Button 之后 引入头文件QInputDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_4_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QString str=QInputDialog::getText(<span class="keyword">this</span>,<span class="string">"输入字符串对话框"</span>,<span class="string">"请输入用户名"</span>,QLineEdit::Normal,<span class="string">"admin:"</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;str;</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有输入"</span>;</div><div class="line">    <span class="keyword">int</span> val= QInputDialog::getInt(<span class="keyword">this</span>,<span class="string">"整数输入"</span>,<span class="string">"请输入整数"</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">100</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val;</div><div class="line">    <span class="keyword">double</span> val_double=QInputDialog::getDouble(<span class="keyword">this</span>,<span class="string">"double"</span>,<span class="string">"输入"</span>,<span class="number">-100</span>,<span class="number">-500</span>,<span class="number">4000</span>,<span class="number">5</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val_double;</div><div class="line">    QStringList strs;</div><div class="line">    strs&lt;&lt;<span class="string">"条目一"</span>&lt;&lt;<span class="string">"战士"</span>;</div><div class="line">    QString str2=QInputDialog::getItem(<span class="keyword">this</span>,<span class="string">"目录"</span>,<span class="string">"s卷积"</span>,strs,<span class="number">0</span>,<span class="number">1</span>,&amp;ok);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里总共包括 getText函数输入字符串，getInt输入整数 getDouble输入双精度数。getItem输入条目。<br>在输入条目中可以使用一个 QStringList 类型的字符串进行选择。</p>
<h1 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h1><p>新建push Button右键转到槽，包含头文件QMessageBox<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_5_clicked()</div><div class="line">&#123; <span class="keyword">int</span> val= QMessageBox::question(<span class="keyword">this</span>,<span class="string">"请回答"</span>,<span class="string">"你是谁？"</span>,QMessageBox::Yes,QMessageBox::No);</div><div class="line">    <span class="keyword">if</span> (val==QMessageBox::No) qDebug()&lt;&lt;<span class="string">"你真笨"</span>;</div><div class="line">    <span class="keyword">int</span> val2=QMessageBox::information(<span class="keyword">this</span>,<span class="string">"about"</span>,<span class="string">"niha "</span>,QMessageBox::Ok);</div><div class="line">    <span class="keyword">if</span>(val2==QMessageBox::Ok) qDebug()&lt;&lt;<span class="string">"urhgi"</span>;</div><div class="line"><span class="keyword">int</span> val3=QMessageBox::warning(<span class="keyword">this</span>,<span class="string">"警告"</span>,<span class="string">"会有，计划规划"</span>,QMessageBox::Abort);</div><div class="line"><span class="keyword">if</span> (val3==QMessageBox::Abort) qDebug()&lt;&lt;<span class="string">"关于i"</span>;</div><div class="line"><span class="keyword">int</span> val4=QMessageBox::critical(<span class="keyword">this</span>,<span class="string">"错误"</span>,<span class="string">"这是一个很严重的错误"</span>,QMessageBox::YesAll);</div><div class="line"><span class="keyword">if</span>(val4==QMessageBox::YesAll) qDebug()&lt;&lt;<span class="string">"haha"</span>;</div><div class="line">  QMessageBox::about(<span class="keyword">this</span>,<span class="string">"关于"</span>,<span class="string">"uhgthtuirhytrini2016/12/9"</span>);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里包含，question informarion warning critical和about五个函数。<br>同时可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">符号                编号</div><div class="line">QMessageBox::Yes    16384</div><div class="line">QMessageBox::No     65536</div><div class="line">QMessageBox::Ok     1024</div><div class="line">QMessageBox::Abort  262144</div><div class="line">QMessageBox::YesAll 32768</div></pre></td></tr></table></figure></p>
<p>对应的数字使QMessageBox内置的编号.</p>
<h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><p>新建push Button 右键转到槽 引入头文件QProgressDialogsses<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_6_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QProgressDialog <span class="title">pd</span><span class="params">(<span class="string">"进度"</span>,<span class="string">"jiyhui"</span>,<span class="number">0</span>,<span class="number">90000</span>,<span class="keyword">this</span>)</span></span>;</div><div class="line">    pd.setWindowTitle(<span class="string">"nihighi"</span>);</div><div class="line">    pd.setModal(<span class="literal">true</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000</span>;i++)</div><div class="line">    &#123;pd.setValue(i);</div><div class="line">        QCoreApplication::processEvents();</div><div class="line">        <span class="keyword">if</span>(pd.wasCanceled()) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    pd.setValue(<span class="number">900000</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"结束"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里将其设为模态，使用setValue显示进度，processEvents()用于避免界面被冻结。使用wasCanceled()判断其是否被取消<br>在最后需要显示最后一个值进行setValue()完成不然只会99%的进度。</p>
<h1 id="错误消息对话框"><a href="#错误消息对话框" class="headerlink" title="错误消息对话框"></a>错误消息对话框</h1><p>新建push Button 右键转到槽，引入头文件QErrorMessage<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_7_clicked()</div><div class="line">&#123;</div><div class="line">    QErrorMessage *EM=<span class="keyword">new</span> QErrorMessage(<span class="keyword">this</span>);</div><div class="line">    EM-&gt;setWindowTitle(<span class="string">"错误"</span>);</div><div class="line">    EM-&gt;showMessage(<span class="string">"这是一个很严重的错误"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里使用new的方式建立非模态对话框。在这个对话框中有一个默认的选项，show this message again,的复选框。</p>
<h1 id="向导对话框"><a href="#向导对话框" class="headerlink" title="向导对话框"></a>向导对话框</h1><p>对于引导页面，首先需要新建引导页，在mydialog.h中引入#include<qwizard>，并声明需要使用的页面：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MYDialog *ui;</div><div class="line">    <span class="function">QWizardPage *<span class="title">createpage1</span><span class="params">()</span></span>;</div><div class="line">     <span class="function">QWizardPage *<span class="title">createpage2</span><span class="params">()</span></span>;</div><div class="line">      <span class="function">QWizardPage * <span class="title">createpage3</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></qwizard></p>
<p>在这里声明了三个页面函数。单击函数右键选择跳转到定义，在mydialog.cpp中<br>定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage1()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"介绍"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage2()</div><div class="line">&#123;QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"卡特飞学术论坛"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage3()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">        page-&gt;setTitle(<span class="string">"结束"</span>);</div><div class="line">        <span class="keyword">return</span> page;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即完成了三个页面函数的定义。</p>
<p>之后开始使用按钮进行关联。<br>新建push Button 右键转到槽 并引入 QWizard<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_8_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QWizard <span class="title">q</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    q.setWindowTitle(<span class="string">"智能向导"</span>);</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage2());</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage3());</div><div class="line">    q.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/basedialog/1.png" alt=""><br><img src="/images/basedialog/2.png" alt=""><br><img src="/images/basedialog/3.png" alt=""><br><img src="/images/basedialog/4.png" alt=""><br><img src="/images/basedialog/5.png" alt=""><br><img src="/images/basedialog/6.png" alt=""><br><img src="/images/basedialog/7.png" alt=""><br><img src="/images/basedialog/8.png" alt=""><br><img src="/images/basedialog/9.png" alt=""><br><img src="/images/basedialog/10.png" alt=""><br><img src="/images/basedialog/11.png" alt=""><br><img src="/images/basedialog/12.png" alt=""><br><img src="/images/basedialog/13.png" alt=""><br><img src="/images/basedialog/14.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="标准对话框" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(4)窗口通讯初步</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(4)%E7%AA%97%E5%8F%A3%E9%80%9A%E8%AE%AF%E5%88%9D%E6%AD%A5/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(4)窗口通讯初步/</id>
    <published>2016-12-07T03:18:52.000Z</published>
    <updated>2016-12-07T16:11:07.055Z</updated>
    
    <content type="html"><![CDATA[<p>信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。<br><a id="more"></a><br>QT可以手动设置信号与槽也可以自动设置，为了了解最基本的原理我们从最基本的手动设置开始：</p>
<h1 id="手动实现信号与槽"><a href="#手动实现信号与槽" class="headerlink" title="手动实现信号与槽"></a>手动实现信号与槽</h1><p>  <img src="/images/signalbase/1.png" alt=""><br>  如图在设计师模块中加入push button 并将其objectName 设置为showChild.<br>   下面开始使用这个push button.</p>
<p>   首先明确我们的目的师设计按下push button之后产生信号，信号激活槽内的程序使其产生一个label的窗口。</p>
<p>   首先我们需要先声明槽（slots）.<br>   <code>note：</code><br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c++编程补充：因为c++需要声明和定义，一般都将声明写进 .h文件，而定义写在.cpp文件中。</div><div class="line">在程序的书写中不需要包含各种cpp文件，程序在执行中动态的调用各种函数。</div></pre></td></tr></table></figure></p>
<p>   所以我们先在mainwindow.h声明槽<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MainWindow : <span class="keyword">public</span> QMainWindow</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</div><div class="line">    ~MainWindow();</div><div class="line">   <span class="keyword">public</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MainWindow *ui;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></div></pre></td></tr></table></figure></p>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> slots:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>声明了槽函数 showChild();<br>在声明完之后我们需要给其具体的定义,在mainwindow.cpp中进行定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为我们在mainwindow.h中定义了类的名字空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以这里函数的具体定义我们应该写成：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在定义完之后。我们需要进行具体的连接，也就是将信号和槽进行连接，我们在类的构造函数内完成，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div></pre></td></tr></table></figure></p>
<p> connect的第一个参数是发送信号的对象，第二个是信号，第三个是接受信号的对象,第四个是槽函数。<br> 这是手工的做法</p>
<h1 id="自动信号与槽"><a href="#自动信号与槽" class="headerlink" title="自动信号与槽"></a>自动信号与槽</h1><p>我们现在简单的实现一个登陆界面和主界面的切换程序。</p>
<p>从最开始开始。新建一个空的项目。</p>
<p>在工程文件里加上<code>QT + =widgets</code></p>
<h2 id="新建第一个登陆界面："><a href="#新建第一个登陆界面：" class="headerlink" title="新建第一个登陆界面："></a>新建第一个登陆界面：</h2><p>新建一个空的QT设计师<br>选择Dialog without buttons<br>类名就写 myDialog<br>  <img src="/images/signalbase/2.png" alt=""><br>  点F4进入信号与槽模式<br>  先设计退出按钮，左键点击退出按钮的下边然后拉到主窗口的边缘，意思也就是信号源是退出按钮，接受源是整个窗口。<br>    <img src="/images/signalbase/3.png" alt=""><br>    设计成功后的样子：<br>        <img src="/images/signalbase/4.png" alt=""><br>然后再设计进入主程序：<br>F3回到设计模式，右键点击进入主程序按钮，选择转到槽，然后选择click(),之后点击确定。</p>
<p>这时候转到了myDialog类的源文件即 myDialog.cpp加入代码，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>其中on_pushButton_clicked()，其声明在myDialog里也被自动声明完了，就是上面我们所说的实现模式就是自动生成函数
我们在里面加入：
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  accept()这个函数的作用就是判断哪个是主程序界面这个按钮被按下，如果被按下则返回<code>QDialog::Accepted</code>.</p>
<h2 id="设计第二个界面"><a href="#设计第二个界面" class="headerlink" title="设计第二个界面"></a>设计第二个界面</h2><p>  第二个界面有：<br>    <img src="/images/signalbase/5.png" alt=""></p>
<h3 id="重新登陆按钮的设计："><a href="#重新登陆按钮的设计：" class="headerlink" title="重新登陆按钮的设计："></a>重新登陆按钮的设计：</h3><p>和前面一样，右键转到槽</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    close();</div><div class="line">    myDialog win;</div><div class="line">   win.show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即关闭之后重新建立一个myDialog窗口。</p>
<h3 id="退出按钮"><a href="#退出按钮" class="headerlink" title="退出按钮"></a>退出按钮</h3><p>和前面的退出按钮设计相同。</p>
<h3 id="显示label按钮"><a href="#显示label按钮" class="headerlink" title="显示label按钮"></a>显示label按钮</h3><p>右键转到槽<br>加入<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div><div class="line">至此没有Dialog.cpp变为</div><div class="line"></div><div class="line"></div><div class="line">```cpp</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog1::myDialog1(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog1)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog1::~myDialog1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">w</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    myDialog win1;</div><div class="line">    myDialog1 win2;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(win1.exec()==QDialog::Accepted)</div><div class="line">    &#123;  <span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">        &#123; win1.show();</div><div class="line">            <span class="keyword">return</span> w.exec();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即如果第一界面的进入主程序被按下，执行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">   &#123; win1.show();</div><div class="line">       <span class="keyword">return</span> w.exec();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这句语句的意思是如果第二个窗口的重新登陆被按下则显示第一个界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="信号和槽" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(3)模态与非模特</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(3)%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E7%89%B9/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(3)模态与非模特/</id>
    <published>2016-12-07T02:23:34.000Z</published>
    <updated>2016-12-07T03:14:14.742Z</updated>
    
    <content type="html"><![CDATA[<p>对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。<br><a id="more"></a><br>直接看例子：</p>
<p><code>main.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们只在 MainWindow的构造函数中实验，所以只有定义即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到一个窗口一闪而过。剩下的是w窗口被保留，在函数的构造函数里面我们定义了一个窗口win并且指定了this（w） 为其父，在运行中其一闪而过的只剩下W原因是：他并没有实际的内存空间，在构造函数被调用完之后他就被销毁了，所以我们可以使用指针给他new一个空间：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">    win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样win窗口就被保留下来。<br>此外因为上段程序中指定了父窗口，所以在new完之后不需要进行delete其会随父窗口进行销毁。</p>
<p>我们也可以用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.exec();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样会发现win对话框被显示，但是其父窗口没有被显示。<br>只有我们关闭了win之后w窗口才会被显示出来。</p>
<p>这种对话框我们称之为模态对话框，而上面的写法被成为非模态对话框。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">定义</div><div class="line"></div><div class="line">模态对话框：即没有关闭该对话框之前不能再于其他窗口进行交互。如新建项目时候，我们只能再这个窗口进行操作，只有关了它才能进行其他的操作。</div><div class="line"></div><div class="line">非模态对话框：可以再运行时候可以与其他窗口自由交互。</div></pre></td></tr></table></figure></p>
<p>可以看到，如果让窗口是非模态的只需使用指针进行new即可，而让窗口是模态的只需调用其exec()属性即可。<br>当然 我们也可以使用setModal()函数进行声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">   win-&gt;setModal(<span class="literal">true</span>);</div><div class="line">   win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法可以将win变为模态的，在运行时候会发现，两个窗口都会出现，但是我们只能对win进行拖拽等操作，只有关闭了win才可以对w进行操作。</p>
<p><code>原因：</code><br><code>因为在运行完show()之后程序会将控制权交给调用者继续执行，而exec()则是在程序执行完操作之后才交出控制权从而继续执行。</code></p>
<p>还有和setModal()相似的函数，setWindowModality()它可以通过设置参数来进行模态和模态的控制有：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Qt::NonModal 非模态</div><div class="line">Qt::WindowModal 阻塞所有祖先</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="模态与非模态" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="http://yoursite.com/2016/12/06/3Sum/"/>
    <id>http://yoursite.com/2016/12/06/3Sum/</id>
    <published>2016-12-06T13:41:05.000Z</published>
    <updated>2017-01-19T08:22:50.791Z</updated>
    
    <content type="html"><![CDATA[<p>Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 165869<br>Total Submissions: 802806<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a><br>Note: The solution set must not contain duplicate triplets.</p>
<p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p>
<p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
<p>这道题目因为需要去重和遍历，所以用传统的方法遍历会出现很多的重复步骤，因为这个题目不要重复值，所以我们可以对其先进行排序，双指针在有序的数列问题中表现很好，所以使用双指针算法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((i&gt;<span class="number">0</span>)&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">          <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">          <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">          <span class="keyword">while</span>(left&lt;right)</div><div class="line"></div><div class="line">          &#123;  </div><div class="line">              <span class="keyword">if</span>((nums[left]+nums[right])==(<span class="number">-1</span>*nums[i]))</div><div class="line">                &#123; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[left]);</div><div class="line">                vec.push_back(nums[right]);</div><div class="line">                result.push_back(vec);</div><div class="line">                left++;</div><div class="line">                right--;</div><div class="line">                <span class="keyword">while</span>(nums[left]==nums[left<span class="number">-1</span>]) left++;</div><div class="line"></div><div class="line">                <span class="keyword">while</span>(nums[right]==nums[right+<span class="number">1</span>]) right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nums[left]+nums[right])&lt;(<span class="number">-1</span>*nums[i]))</div><div class="line">                    left++;</div><div class="line">                <span class="keyword">else</span>  right--;</div><div class="line"></div><div class="line"></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>该算法的核心，因为首先进行了排序，所以可以方便的使用双指针，如果小于一个目标值则进行left+1,大于则right-1.<br>关键步骤是去重。因为对于排序过后的数组，这三个数如果和在向下一步走的时候，如何和上一步相等则即可判断为重复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 165869&lt;br&gt;Total Submissions: 802806&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="http://yoursite.com/2016/12/03/Longest-Common-Prefix/"/>
    <id>http://yoursite.com/2016/12/03/Longest-Common-Prefix/</id>
    <published>2016-12-03T12:43:58.000Z</published>
    <updated>2016-12-03T12:53:49.665Z</updated>
    
    <content type="html"><![CDATA[<p>id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 137142<br>Total Submissions: 452531<br>Difficulty: Easy<br>Contributors: Admin<br>Write a function to find the longest common prefix string amongst an array of strings.<br><a id="more"></a><br>题目的意思是找到n多字符串中的最大公共前缀<br>直接写代码了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">if</span>(strs.empty())<span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].size();i++)<span class="comment">//拿任意一个做标度</span></div><div class="line">        &#123;  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;strs.size();j++)</div><div class="line">             &#123;<span class="keyword">if</span>(strs[<span class="number">0</span>][i]!=strs[j][i])</div><div class="line">              <span class="keyword">return</span> result;</div><div class="line">             &#125;</div><div class="line">             result.push_back(strs[<span class="number">0</span>][i]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<br>  <code>for(int i=0;i&lt;strs[0].size();i++)//拿任意一个做标度</code>可以随便拿其中一个字符串做标度，因为是求最大公共前缀所以必须保证所有的都有，如果我们任意选择的都没有，说明就不是公共字串，为了控制简单所以使用第一个来进行。<br>  此外，一些语法的问题<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</div><div class="line">可以表示的数组是</div><div class="line">&#123;</div><div class="line">  &#123;dgh&#125;,</div><div class="line">  &#123;dfgth&#125;,</div><div class="line">  &#123;dgreuihgre&#125;,</div><div class="line">&#125;</div><div class="line">strs[<span class="number">0</span>]=<span class="string">"dgh"</span>;</div><div class="line">strs[<span class="number">0</span>][<span class="number">0</span>]=‘d’;</div><div class="line">此外 对于 <span class="built_in">string</span> 的后插操作</div><div class="line"><span class="built_in">string</span> s;</div><div class="line">s.append(<span class="string">"a"</span>);正确</div><div class="line">但是s.append(‘a’);错误</div><div class="line">应该使用s.push_back(‘a’);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 137142&lt;br&gt;Total Submissions: 452531&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetode" scheme="http://yoursite.com/tags/leetode/"/>
    
      <category term="Longest Common Prefix" scheme="http://yoursite.com/tags/Longest-Common-Prefix/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(2)基础窗口部件</title>
    <link href="http://yoursite.com/2016/12/03/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%882)%E5%9F%BA%E7%A1%80%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/12/03/QT5从入门到放弃：（2)基础窗口部件/</id>
    <published>2016-12-03T09:55:49.000Z</published>
    <updated>2016-12-03T11:26:02.867Z</updated>
    
    <content type="html"><![CDATA[<p>QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.<br><a id="more"></a><br>他们之间详细的关系如下：<br><img src="/images/qwidgets/1.png" alt=""></p>
<h1 id="窗口和部件以及窗口类型"><a href="#窗口和部件以及窗口类型" class="headerlink" title="窗口和部件以及窗口类型"></a>窗口和部件以及窗口类型</h1><p> 窗口部件是QT中建立用户元素的主要部件，其中作为部件附属于其他窗口的可以简称为部件，而没有上级的成为窗口（根）<br> 看一段代码：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line">    w1-&gt;setWindowTitle(<span class="string">"thie is win1"</span>);</div><div class="line">    QLabel * label1=<span class="keyword">new</span> QLabel();</div><div class="line">    label1-&gt;setText(<span class="string">"label1"</span>);</div><div class="line">    label1-&gt;show();</div><div class="line">    label1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   QLabel *label2=<span class="keyword">new</span> QLabel(w1);</div><div class="line">   label2-&gt;setText(<span class="string">"LABEL2"</span>);</div><div class="line">   w1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   label2-&gt;show();</div><div class="line">   label2-&gt;resize(<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">   w1-&gt;show();</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">return</span> a.exec();</div><div class="line"> <span class="keyword">delete</span> label1;</div><div class="line"> <span class="comment">//  delete label2;</span></div><div class="line">   <span class="keyword">delete</span> w1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这段程序定义了一个QDialog :w1,两个QLabel: label1和label2.<br> 在这里需要注意的是所有的定义都使用new()开辟空间，所以在最后都需要执行delete操作。<br> 如：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line"><span class="keyword">delete</span> w1;</div></pre></td></tr></table></figure></p>
<p> 在这段程序里我们分析各个部件之间的关系。因为label1没有绑定任何父类，所以他是一个独立的窗口，而label2在新定义的时候，  <code>QLabel *label2=new QLabel(w1);</code>就被绑定上了w1所以其父是w1.<br> 所以有如下的一些特点：</p>
<ol>
<li>label1可以单独显示，而label2不可以单独显示，如果显示w1则显示w1的全部子部件，即label2也被显示出来。</li>
<li><p>在delete的时候，label1和label2都可以单独被销毁，但是如果如果w1被销毁，那么w1的所有子部件也全部被销毁。<br><img src="/images/qwidgets/2.png" alt=""></p>
<h1 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h1><p>QT有非常多的窗口类型，QWidget的构造函数有两个参数<br>一个是<code>QWidget *parent=0</code> 这个参数主要负责该窗口部件的附属关系，默认是0，表示是一个独立窗口，两一个参数是<br><code>Qt::WindowFlags</code>这个参数主要负责的是这个窗口部件的类型。<br>比如我们可以</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog);</div><div class="line">  QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen);</div></pre></td></tr></table></figure>
<p>其效果：<br><img src="/images/qwidgets/3.png" alt=""><br>也可以使用位或操作如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog|Qt::FramelessWindowHint);</div><div class="line"></div><div class="line">QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen|Qt::WindowStaysOnTopHint);</div></pre></td></tr></table></figure>
<p><img src="/images/qwidgets/4.png" alt=""><br>更加详细的样式，用到再说。</p>
<h1 id="窗口的几何布局"><a href="#窗口的几何布局" class="headerlink" title="窗口的几何布局"></a>窗口的几何布局</h1><p><img src="/images/qwidgets/5.png" alt=""><br>这里的函数主要分为两类，一类是包含框架的，另一个事不包含框架的。</p>
</li>
<li>包含框架的：x(),y(),frameGemetry(),pos(),move()函数</li>
<li><p>不包含框架的：genmetry(),width(),height(),rect()和size()函数。<br>实例程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=w.x();</div><div class="line"><span class="keyword">int</span> y=w.y();</div></pre></td></tr></table></figure></p>
<p>分别返回窗口部件的坐标值x,y,他们的默认值是0.</p>
<p>而geometry和frameGeometry()函数分别返回没有边框的和包含边框矩形的值，其返回值是QRect类型的，就是一个矩形，他的形式是（x,y,height,width）<br>在这里我们使用QDebug进行调试。<br>程序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">   qDebug()&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y&lt;&lt;<span class="string">" "</span>&lt;&lt;gemetry&lt;&lt;<span class="string">" "</span>&lt;&lt;frame;</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在引入了QDebug头文件之后，可以直接使用qDebug()函数<br><code>qDebug()&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;gemetry&lt;&lt;&quot; &quot;&lt;&lt;frame;</code>这句语句可以输出。<br>其结果如下：<br> <img src="/images/qwidgets/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://yoursite.com/2016/12/02/Roman-to-Integer/"/>
    <id>http://yoursite.com/2016/12/02/Roman-to-Integer/</id>
    <published>2016-12-02T14:49:15.000Z</published>
    <updated>2016-12-02T15:06:57.925Z</updated>
    
    <content type="html"><![CDATA[<p>ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 117446<br>Total Submissions: 273074<br>Difficulty: Easy<br>Contributors: Admin<br>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.<br><a id="more"></a><br>这道题同<br><a href="http://deepdim.com/2016/12/01/Integer-to-Roman/" target="_blank" rel="external">http://deepdim.com/2016/12/01/Integer-to-Roman/</a><br>需要特殊处理的有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">IV: 4</div><div class="line">V: 5</div><div class="line">IX: 9</div><div class="line">X: 10</div><div class="line">XL: 40</div><div class="line">L: 50</div><div class="line">XC: 90</div><div class="line">C: 100</div><div class="line">CD: 400</div><div class="line">D: 500</div><div class="line">CM: 900</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">         <span class="built_in">string</span> roman[] = &#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> num[] = &#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">         <span class="keyword">int</span> i=<span class="number">0</span>,index=<span class="number">0</span>,result=<span class="number">0</span>;</div><div class="line">         <span class="built_in">string</span> CurString;</div><div class="line">        <span class="keyword">while</span>(i&lt;<span class="number">13</span>)</div><div class="line">        &#123; CurString=s.substr(index,roman[i].size());</div><div class="line">         <span class="keyword">if</span>(CurString==roman[i])</div><div class="line">         &#123;result=result+num[i];</div><div class="line">         index=index+roman[i].size();</div><div class="line">         <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">else</span>  <span class="keyword">if</span>((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</div><div class="line">             i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中较为关键的是判断什么时候进行i++<br> <code>if((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</code><br> 即只有在当前不匹配或者下个不匹配的时候才进行i++从而实现了最大三个字母的重复。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 117446&lt;br&gt;Total Submissions: 273074&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Roman to Integer" scheme="http://yoursite.com/tags/Roman-to-Integer/"/>
    
  </entry>
  
</feed>
