<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deepdim-Unsky&#39;Blog</title>
  <subtitle>Unsky Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-04T09:45:01.288Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>unsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性回归与逻辑回归</title>
    <link href="http://yoursite.com/2017/04/04/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E4%B8%8E%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2017/04/04/线性回归与逻辑回归/</id>
    <published>2017-04-04T07:37:24.000Z</published>
    <updated>2017-04-04T09:45:01.288Z</updated>
    
    <content type="html"><![CDATA[<p>在这里总结一下线性回归逻辑回归和更一般的回归模型。<br><a id="more"></a></p>
<h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>用一个线性函数对提供的已知数据进行拟合，最终得到一个线性函数，使这个函数满足我们的要求（如具有最小平方差,随后我们将定义一个代价函数，使这个目标量化），之后我们可以利用这个函数，对给定的输入进行预测（例如，给定房屋面积，我们预测这个房屋的价格）。如下图所示：</p>
<p><img src="/images/regression/1.png" alt=""></p>
<p>假设我们最终要的得到的假设函数具有如下形式：</p>
<p><img src="/images/regression/2.png" alt=""><br>其中，x是我们的输入，theta是我们要求得的参数。</p>
<p>代价函数如下：<br><img src="/images/regression/3.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">note: 为什么选择平方误差作为损失函数，可以看到平方误差函数是一个以0为分布的正太函数，以其为误差是科学的。</div></pre></td></tr></table></figure>
<p>正态分布（Normal distribution）又名高斯分布（Gaussian distribution），是一个在数学、物理及工程等领域都非常重要的概率分布，在统计学的许多方面有着重大的影响力。<br>若随机变量X服从一个数学期望为μ、标准方差为σ2的高斯分布，记为：<br>X∼N(μ,σ2),<br>则其概率密度函数为：</p>
<pre><code>正态分布的期望值μ决定了其位置，其标准差σ决定了分布的幅度。因其曲线呈钟形，因此人们又经常称之为钟形曲线。我们通常所说的标准正态分布是μ = 0,σ = 1的正态分布
</code></pre><p>我们的目标是使得此代价函数具有最小值。</p>
<p>为此，我们还需要求得代价函数关于参量theta的导数，即梯度，具有如下形式：<br><img src="/images/regression/4.png" alt=""></p>
<p>有了这些信息之后，我们就可以用梯度下降算法来求得theta参数。过程如下：<br><img src="/images/regression/5.png" alt=""></p>
<h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>相比于线性回归，逻辑回归只会输出一些离散的特定值（例如判定一封邮件是否为垃圾邮件，输出只有0和1），而且对假设函数进行了处理，使得输出只在0和1之间。</p>
<p>假设函数如下：</p>
<p><img src="/images/regression/6.png" alt=""></p>
<p>代价函数如下：</p>
<p><img src="/images/regression/7.png" alt=""></p>
<p>note:</p>
<p> 在这里可以看到逻辑回归使用伯努利分布来处理误差</p>
<p> 伯努利分布(Bernoulli distribution)又名两点分布或0-1分布，介绍伯努利分布前首先需要引入伯努利试验（Bernoulli trial）。<br> 伯努利试验是只有两种可能结果的单次随机试验，即对于一个随机变量X而言：</p>
<p><img src="/images/regression/8.png" alt=""></p>
<p>伯努利试验都可以表达为“是或否”的问题。例如，抛一次硬币是正面向上吗？刚出生的小孩是个女孩吗？等等</p>
<p>如果试验E是一个伯努利试验，将E独立重复地进行n次，则称这一串重复的独立试验为n重伯努利试验。</p>
<p>进行一次伯努利试验，成功(X=1)概率为p(0&lt;=p&lt;=1)，失败(X=0)概率为1-p，则称随机变量X服从伯努利分布。伯努利分布是离散型概率分布，其概率质量函数为：</p>
<p><img src="/images/regression/9.png" alt=""></p>
<p>梯度函数如下，观察可知，形式与线性回归时一样：<br><img src="/images/regression/10.png" alt=""></p>
<h1 id="一般线性回归（softmax）"><a href="#一般线性回归（softmax）" class="headerlink" title="一般线性回归（softmax）"></a>一般线性回归（softmax）</h1><p>线性回归 是以 高斯分布 为误差分析模型； 逻辑回归 采用的是 伯努利分布 分析误差。</p>
<p>而高斯分布、伯努利分布、贝塔分布、迪特里特分布，都属于指数分布。</p>
<p><img src="/images/regression/11.png" alt=""><br>而一般线性回归，在x条件下，y的概率分布 p(y|x) 就是指 指数分布.</p>
<p>经历最大似然估计的推导，就能导出一般线性回归的 误差分析模型（最小化误差模型）。</p>
<p>softmax回归就是 一般线性回归的一个例子。</p>
<p>有监督学习回归，针对多类问题（逻辑回归，解决的是二类划分问题），如数字字符的分类问题，0-9,10个数字，y值有10个可能性。</p>
<p>而这种可能的分布，是一种指数分布。而且所有可能的和 为1，则对于一个输入的结果，其结果可表示为：<br><img src="/images/regression/12.png" alt=""></p>
<p>参数是一个k维的向量。</p>
<p>而代价函数：</p>
<p><img src="/images/regression/13.png" alt=""><br>而对于softmax的求解，没有闭式解法（高阶多项方程组求解），仍用梯度下降法，或L-BFGS求解。</p>
<p>当k=2时，softmax退化为逻辑回归，这也能反映softmax回归是逻辑回归的推广。</p>
<p>证明如下：</p>
<p><img src="/images/regression/14.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里总结一下线性回归逻辑回归和更一般的回归模型。&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>cnn-rnn for multi-label image classification</title>
    <link href="http://yoursite.com/2017/03/27/cnn-rnn-for-multi-label-image-classification/"/>
    <id>http://yoursite.com/2017/03/27/cnn-rnn-for-multi-label-image-classification/</id>
    <published>2017-03-27T14:52:01.000Z</published>
    <updated>2017-03-27T15:13:52.553Z</updated>
    
    <content type="html"><![CDATA[<p>CNN-RNN: A Unified Framework for Multi-label ImageClassification</p>
<p>这是一篇我发在我们实验室公众号的组会论文解读。<br><a href="http://mp.weixin.qq.com/s?__biz=MzU2MTAyMDI5Nw==&amp;mid=2247483695&amp;idx=1&amp;sn=7cb2a31072c1d315cbbb24d205b0d581&amp;chksm=fc7e6dc9cb09e4df554c723b687924e3e83a2d015ca18c577343f8f69a90c760f03f4211c658&amp;mpshare=1&amp;scene=23&amp;srcid=0327nQuAyoWcgrTbccFgeqsA#rd" target="_blank" rel="external">http://mp.weixin.qq.com/s?__biz=MzU2MTAyMDI5Nw==&amp;mid=2247483695&amp;idx=1&amp;sn=7cb2a31072c1d315cbbb24d205b0d581&amp;chksm=fc7e6dc9cb09e4df554c723b687924e3e83a2d015ca18c577343f8f69a90c760f03f4211c658&amp;mpshare=1&amp;scene=23&amp;srcid=0327nQuAyoWcgrTbccFgeqsA#rd</a></p>
<h1 id="名词区分："><a href="#名词区分：" class="headerlink" title="名词区分："></a>名词区分：</h1><p>Multi-label Image Classification：给出一张图片，只需指出图片中所有物体即可。</p>
<p>object detection：给出一张图片，要求指出所有物体和其位置。</p>
<p>该篇论文使用了一个同一个CNN-RNN框架来进行图像多标签分类。发表于cvpr 2016.<br>下载地址：<br><a href="http://ieeexplore.ieee.org/document/7780620/" target="_blank" rel="external">http://ieeexplore.ieee.org/document/7780620/</a><br><a id="more"></a></p>
<p>#论文的出发点：</p>
<p>一个现实世界的图片不止包含一个物体，应该包含很多物体，传统的多标签图片分类都是为每个类训练独立的分类器，但是这种传统的方式有很多缺点，我们来具体的看下图：<br><img src="/images/cnn-rnn/1.png" alt=""><br>这是三张来自ImageNet 2012分类数据集的图片，但是每张图片只给了一个标签，比如第一张给了飞机这个标签，但是，我们发现，在这张图片中，不止包含了飞机，它还有比如：天空，草地，飞机跑道，甚至是远处若隐若现的楼房。</p>
<p>传统的分类方式，如果想识别这些所有信息，会训练n个分类器进行对上述的每个类别分类，但是这么做的缺点：</p>
<p>1.对小物体的检测性能很低。</p>
<p>2.没有考虑物体之间的出现关系。</p>
<p>对于缺点一，是可想而知的，因为对于小物体拥有很少的像素，能识别的特诊很有局限性，所以很多分类器对它的识别性能很低。</p>
<p>对于缺点二，纵观我们现实世界，物体的出现都是具有逻辑的，比如炸机和啤酒更配，而你看到鲸鱼和狮子同时出现的概率几乎为零。可想而知，飞机在深海中飞行的概率应该只在梦中出现。。。所以，现实世界的物体的出现都是具有逻辑性的。</p>
<p>   基于对以上两点的分析，我们能不能寻找一种方法，运用到这种逻辑关系？答案是肯定的，所以提出了CNN-RNN并行框架来进行图片多目标分类。</p>
<p>   一看到题目，我们即可从文章的标题中得到作者得思路。在图像识别中，CNN表现出很强得特征提取能力，而LSTM(RNN)对于挖掘信息之间得逻辑关系表现出很好得性能。所以它们之间得连立看起来对上述问题是很好得解决方案。</p>
<p>首先对于基本知识，比如CNN 和LSTM（RNN）得相关知识我们已经有很多得讨论，在这里简单得说一下LSTM:<br>   <img src="/images/cnn-rnn/2.png" alt=""><br>   LSTM是一种循环递归网络，它具有长时记忆功能，其神经单元得总成包括一个输入门，一个遗忘门，一个输出门，如上图.</p>
<p>其具体得公式如下：<br>   <img src="/images/cnn-rnn/3.png" alt="">对于时间t，是每次递归得时间点，在这里我们不再将其按时间展开。</p>
<p>   好了有了以上知识点，直接看作者提出得框架：</p>
<p>然后我们来看作者是怎么做得。</p>
<p>   <img src="/images/cnn-rnn/4.png" alt=""></p>
<p>   作者得思路就是，靠卷积网络来提取图片得特征，而靠LSTM网络对CNN进行一个目标导向，输入一张图片给CNN，它所看到的视觉是没有目标的，但是如果我们使用LSTM对其进行导向，或许CNN会对LSTM的导向所影响，对于这个问题，作者在后续的试验中会有所探索。</p>
<p>从以上框架看出，CNN部分中规中矩，就是一个特征提取器，实际上确实没有什么改变，作者直接使用了VGG16的卷积层，而且没有进行任何的微调。注意该vgg16的训练来自ImageNet2012的分类数据集。</p>
<p>重点是LSTM部分：</p>
<p>假如一个物体的标签k是：<br>   <img src="/images/cnn-rnn/5.png" alt=""></p>
<p>   <img src="/images/cnn-rnn/6.png" alt=""></p>
<p>   然后在预测具体的最后一层用个softmax normalization 处理下最后得分就可以了.<br>综上，我们需要自己训练的东西包括一个LSTM和一个连立的全连接层而已。以上的整体思路就是，<br>用CNN提出特征，然后得出第一个标签，然后将这个标签输入LSTM，得到下一个标签，再和这个cnn特征联合，输出有没有，然后再输入lstm的下一个预测，一直下去。<br>对于小物体，我们可以使用LSTM进行猜，如果这个物体在图片中存在，CNN会将焦点聚焦于该物体，如果没有，就没有。。这样对于很小的物体，比如远处若隐若现的楼房，或会会表现很好，后面有实验。</p>
<p>好了，以上就是这个网络的设计，我们来考虑一下细节：</p>
<h2 id="首先我们面临的一个严重的问题就是，我们先把哪个标签输入？"><a href="#首先我们面临的一个严重的问题就是，我们先把哪个标签输入？" class="headerlink" title="首先我们面临的一个严重的问题就是，我们先把哪个标签输入？"></a>首先我们面临的一个严重的问题就是，我们先把哪个标签输入？</h2><p>比如飞机的那张图片，我们应该先输入飞机，还是天空还是跑道？<br>对于这个问题，作者的思路是基于统计学，统计出整个数据集每个物体出现的频率按照该频率进行先后的输入。作者在试验中发现，这种策略会有很好的性能，但是如果我们随机的输入标签顺序，作者发现，这个网路很难收敛。<br>所以，对于先输入哪个的问题，给出的解决方案就是按频率来。</p>
<p>接下来，我们又遇到一个问题，</p>
<h2 id="对于搜索路径的问题："><a href="#对于搜索路径的问题：" class="headerlink" title="对于搜索路径的问题："></a>对于搜索路径的问题：</h2><p>   <img src="/images/cnn-rnn/7.png" alt=""><br>   假如我们已经预测了前n个标签，再预测第n+1个的时候，我们应该在剩下的特征集中选择，这种策略是很明显的贪婪算法，贪婪的代价就是性能低，白话一下就是，假如我们第一个预测就错了，我们剩下的所有时间状态的预测是不是就都错了，所以这是贪婪算法的最大缺点。</p>
<p> 所以将贪婪搜索换成束搜索：<br>    <img src="/images/cnn-rnn/8.png" alt=""></p>
<p>白话一下，就是每一次搜索都会在所有的集合里进行搜索，如上图，这样做，我们还需要考虑一个问题，</p>
<h2 id="我们应该什么时候停止搜索？"><a href="#我们应该什么时候停止搜索？" class="headerlink" title="我们应该什么时候停止搜索？"></a>我们应该什么时候停止搜索？</h2><p>作者给出的解决方案是，如果下一个搜索的概率低于当前所有的路径时，我们就停止，如上图的红色，在搜索到第三层时，其概率已经低于当前所有可能搜索路径，我们停止。</p>
<h1 id="实验部分："><a href="#实验部分：" class="headerlink" title="实验部分："></a>实验部分：</h1><p>然后我们看它的实验，除了各种性能的实验外，最吸引人的实验是作者做了一个可视化实验，可视化lstm对cnn的影响：<br>    <img src="/images/cnn-rnn/9.png" alt=""></p>
<p>如图，我们将上面的图片输入cnn,cnn给的结果是大象（imageNet给的标签也是大象），然后我们将大象输入lstm进行预测，它预测的下一个目标是斑马，（在lstm眼里斑马和大象更配。。）这时递归的斑马对cnn的焦点产生了影响，从第三个图可以看出，cnn开始注重斑马的特征，而开始忽略其它。（我自己感觉这是这篇论文最棒的贡献）<br>剩下的是性能：</p>
<p><img src="/images/cnn-rnn/10.png" alt=""><br>    有兴趣的同学可以自己看一下。</p>
<h2 id="几点思考："><a href="#几点思考：" class="headerlink" title="几点思考："></a>几点思考：</h2><p>1.在cnn卷积的高层，每个核看到的东西更注重各个部位的细节，我们可以使用策略将其引导到我们更加希望让cnn看到的焦点上。<br>2.对于小物体，在有限的像素点上，我们可以先猜，然后再然cnn判断是不是，这点是很符合人类的思考模式的。</p>
<p>比如，我们看远方一个不知道是啥的一个黑色物体，我们大脑的反应是，先猜，思考逻辑：</p>
<p>lstm:是黑色汽车？</p>
<p>cnn：应该不是，它在动。</p>
<p>lstm:那是乌鸦？</p>
<p>cnn:应该不是，它没有尖尖的嘴。</p>
<p>lstm:那是黑色塑料带？</p>
<p>cnn:你别说，还真像。。。</p>
<p>lstm: ………..</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CNN-RNN: A Unified Framework for Multi-label ImageClassification&lt;/p&gt;
&lt;p&gt;这是一篇我发在我们实验室公众号的组会论文解读。&lt;br&gt;&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzU2MTAyMDI5Nw==&amp;amp;mid=2247483695&amp;amp;idx=1&amp;amp;sn=7cb2a31072c1d315cbbb24d205b0d581&amp;amp;chksm=fc7e6dc9cb09e4df554c723b687924e3e83a2d015ca18c577343f8f69a90c760f03f4211c658&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0327nQuAyoWcgrTbccFgeqsA#rd&quot;&gt;http://mp.weixin.qq.com/s?__biz=MzU2MTAyMDI5Nw==&amp;amp;mid=2247483695&amp;amp;idx=1&amp;amp;sn=7cb2a31072c1d315cbbb24d205b0d581&amp;amp;chksm=fc7e6dc9cb09e4df554c723b687924e3e83a2d015ca18c577343f8f69a90c760f03f4211c658&amp;amp;mpshare=1&amp;amp;scene=23&amp;amp;srcid=0327nQuAyoWcgrTbccFgeqsA#rd&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;名词区分：&quot;&gt;&lt;a href=&quot;#名词区分：&quot; class=&quot;headerlink&quot; title=&quot;名词区分：&quot;&gt;&lt;/a&gt;名词区分：&lt;/h1&gt;&lt;p&gt;Multi-label Image Classification：给出一张图片，只需指出图片中所有物体即可。&lt;/p&gt;
&lt;p&gt;object detection：给出一张图片，要求指出所有物体和其位置。&lt;/p&gt;
&lt;p&gt;该篇论文使用了一个同一个CNN-RNN框架来进行图像多标签分类。发表于cvpr 2016.&lt;br&gt;下载地址：&lt;br&gt;&lt;a href=&quot;http://ieeexplore.ieee.org/document/7780620/&quot;&gt;http://ieeexplore.ieee.org/document/7780620/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="papers" scheme="http://yoursite.com/categories/papers/"/>
    
    
      <category term="cnn-rnn" scheme="http://yoursite.com/tags/cnn-rnn/"/>
    
  </entry>
  
  <entry>
    <title>Maximum Subarray</title>
    <link href="http://yoursite.com/2017/02/23/Maximum-Subarray/"/>
    <id>http://yoursite.com/2017/02/23/Maximum-Subarray/</id>
    <published>2017-02-23T03:17:15.000Z</published>
    <updated>2017-02-23T03:19:41.276Z</updated>
    
    <content type="html"><![CDATA[<p>id53. Maximum Subarray Add to List<br>Description  Submission  Solutions<br>Total Accepted: 169989<br>Total Submissions: 436088<br>Difficulty: Easy<br>Contributors: Admin<br>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.<br><a id="more"></a><br>第一种，穷举法<br>第二种，优化<br>第三种，贪婪算法</p>
<pre><code class="cpp">
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id53. Maximum Subarray Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 169989&lt;br&gt;Total Submissions: 436088&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the array [-2,1,-3,4,-1,2,1,-5,4],&lt;br&gt;the contiguous subarray [4,-1,2,1] has the largest sum = 6.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Valid Parentheses</title>
    <link href="http://yoursite.com/2017/02/22/Longest-Valid-Parentheses/"/>
    <id>http://yoursite.com/2017/02/22/Longest-Valid-Parentheses/</id>
    <published>2017-02-22T03:42:35.000Z</published>
    <updated>2017-02-22T03:44:36.616Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Longest Valid Parentheses Add to List<br>Description  Submission  Solutions<br>Total Accepted: 86398<br>Total Submissions: 374225<br>Difficulty: Hard<br>Contributors: Admin<br>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.<a id="more"></a>
For “(()”, the longest valid parentheses substring is “()”, which has length = 2.</li>
</ol>
<p>Another example is “)()())”, where the longest valid parentheses substring is “()()”, which has length = 4.<br>使用动态规划进行解题<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (s.length()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> dp[s.length()];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        dp[i]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> maxLen =<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()<span class="number">-2</span>; i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)&#123;</div><div class="line"></div><div class="line">                <span class="keyword">if</span>((i+dp[i+<span class="number">1</span>]+<span class="number">1</span>)&lt;s.length()&amp;&amp;s[i+dp[i+<span class="number">1</span>]+<span class="number">1</span>]==<span class="string">')'</span>)</div><div class="line">                &#123;dp[i]=dp[i+<span class="number">1</span>]+<span class="number">2</span>;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;dp[i];</div><div class="line">                <span class="keyword">if</span>((i+dp[i+<span class="number">1</span>]+<span class="number">2</span>)&lt;s.length())</div><div class="line">                dp[i]+=dp[i+dp[i+<span class="number">1</span>]+<span class="number">2</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(maxLen&lt;dp[i])</div><div class="line">            maxLen=dp[i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> maxLen;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Longest Valid Parentheses Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 86398&lt;br&gt;Total Submissions: 374225&lt;br&gt;Difficulty: Hard&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>409.Longest Palindrome</title>
    <link href="http://yoursite.com/2017/02/22/409-Longest-Palindrome/"/>
    <id>http://yoursite.com/2017/02/22/409-Longest-Palindrome/</id>
    <published>2017-02-22T02:22:35.000Z</published>
    <updated>2017-02-22T02:24:48.124Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Longest Palindrome Add to List<br>Description  Submission  Solutions<br>Total Accepted: 28693<br>Total Submissions: 64338<br>Difficulty: Easy<br>Contributors: Admin<br>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</li>
</ol>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.<br><a id="more"></a></p>
<p>Note:<br>Assume the length of given string will not exceed 1,010.</p>
<p>Example:</p>
<p>Input:<br>“abccccdd”</p>
<p>Output:<br>7</p>
<p>Explanation:<br>One longest palindrome that can be built is “dccaccd”, whose length is 7.</p>
<p>很简单得题目<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; ma;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        ma[s[i]]++;</div><div class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator it=ma.begin();</div><div class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</div><div class="line">        <span class="keyword">bool</span> w=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">for</span>(;it!=ma.end();it++)</div><div class="line">        &#123;len+=((it-&gt;second)/<span class="number">2</span>);</div><div class="line">         <span class="keyword">if</span>(it-&gt;second%<span class="number">2</span>==<span class="number">1</span>)</div><div class="line">         w=<span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">  <span class="keyword">return</span>  w?(len*<span class="number">2</span>+<span class="number">1</span>):(len*<span class="number">2</span>);</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Longest Palindrome Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 28693&lt;br&gt;Total Submissions: 64338&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is case sensitive, for example “Aa” is not considered a palindrome here.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Generate Parentheses</title>
    <link href="http://yoursite.com/2017/01/19/Generate-Parentheses/"/>
    <id>http://yoursite.com/2017/01/19/Generate-Parentheses/</id>
    <published>2017-01-19T08:58:06.000Z</published>
    <updated>2017-02-22T03:33:31.275Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>Generate Parentheses Add to List<br>Description  Submission  Solutions<br>Total Accepted: 129826<br>Total Submissions: 305733<br>Difficulty: Medium<br>Contributors: Admin<br>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.<a id="more"></a>
</li>
</ol>
<p>For example, given n = 3, a solution set is:</p>
<p>[<br>  “((()))”,<br>  “(()())”,<br>  “(())()”,<br>  “()(())”,<br>  “()()()”<br>]<br>使用递归得思想，主要是<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(left&lt;n)<span class="comment">//对于左括号，只要没超过个数什么时候都可以插入</span></div><div class="line">  &#123;s.push_back(<span class="string">'('</span>);</div><div class="line">  generate(res,s,left+<span class="number">1</span>,right,n);</div><div class="line">  s.pop_back();<span class="comment">//在递归回来之后应该将刚刚插入得进行删除</span></div><div class="line">  &#125;</div><div class="line"><span class="keyword">if</span>(right&lt;left)<span class="comment">//在右括号得个数小于左括号得个数时候可以进行右括号得插入</span></div><div class="line">&#123;s.push_back(<span class="string">')'</span>);</div><div class="line"> generate(res,s,left,right+<span class="number">1</span>,n);</div><div class="line">  s.pop_back();<span class="comment">//删除</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:s</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; generateParenthesis(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</div><div class="line">        <span class="built_in">string</span> s;</div><div class="line">        generate(res,s,<span class="number">0</span>,<span class="number">0</span>,n);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp;res,<span class="built_in">string</span> s,<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> n)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(left==n&amp;&amp;right==n)</div><div class="line">     &#123;res.push_back(s);</div><div class="line">     <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(left&lt;n)</div><div class="line">        &#123;s.push_back(<span class="string">'('</span>);</div><div class="line">        generate(res,s,left+<span class="number">1</span>,right,n);</div><div class="line">        s.pop_back();</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span>(right&lt;left)</div><div class="line">    &#123;s.push_back(<span class="string">')'</span>);</div><div class="line">       generate(res,s,left,right+<span class="number">1</span>,n);</div><div class="line">        s.pop_back();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;Generate Parentheses Add to List&lt;br&gt;Description  Submission  Solutions&lt;br&gt;Total Accepted: 129826&lt;br&gt;Total Submissions: 305733&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Merge Two Sorted Lists</title>
    <link href="http://yoursite.com/2017/01/19/Merge-Two-Sorted-Lists/"/>
    <id>http://yoursite.com/2017/01/19/Merge-Two-Sorted-Lists/</id>
    <published>2017-01-19T08:21:26.000Z</published>
    <updated>2017-01-19T08:23:48.589Z</updated>
    
    <content type="html"><![CDATA[<p>id21. Merge Two Sorted Lists   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 185619<br>Total Submissions: 488183<br>Difficulty: Easy<br>Contributors: Admin<br>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(l1==<span class="literal">NULL</span>)<span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2==<span class="literal">NULL</span>)<span class="keyword">return</span> l1;</div><div class="line"></div><div class="line">        ListNode *result=<span class="keyword">new</span> ListNode(<span class="number">-1</span>);</div><div class="line">        ListNode *head=result;</div><div class="line">        <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1-&gt;val&lt;l2-&gt;val)</div><div class="line">          &#123; ListNode *node=l1;</div><div class="line">          result-&gt;next=node;</div><div class="line">          result=result-&gt;next;</div><div class="line">          l1=l1-&gt;next;</div><div class="line"></div><div class="line">           &#125;</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(l1-&gt;val&gt;=l2-&gt;val)&#123;</div><div class="line">          ListNode *node=l2;</div><div class="line"></div><div class="line">          result-&gt;next=node;</div><div class="line">          result=result-&gt;next;</div><div class="line">          l2=l2-&gt;next;</div><div class="line">      <span class="comment">//   cout&lt;&lt;l2-&gt;val&lt;&lt;" "&lt;&lt;l1-&gt;val&lt;&lt;endl;</span></div><div class="line">           &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1&amp;&amp;l2)</div><div class="line">        <span class="keyword">return</span> head-&gt;next;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(l1==<span class="literal">NULL</span>)</div><div class="line">            &#123;</div><div class="line">            result-&gt;next=l2;&#125;</div><div class="line">          <span class="keyword">else</span> <span class="keyword">if</span>(l2==<span class="literal">NULL</span>)</div><div class="line">         result-&gt;next=l1;</div><div class="line">         <span class="keyword">return</span> head-&gt;next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">delete</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id21. Merge Two Sorted Lists   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 185619&lt;br&gt;Total Submissions: 488183&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Valid Parentheses</title>
    <link href="http://yoursite.com/2017/01/19/Valid-Parentheses/"/>
    <id>http://yoursite.com/2017/01/19/Valid-Parentheses/</id>
    <published>2017-01-19T03:29:24.000Z</published>
    <updated>2017-01-19T03:34:01.591Z</updated>
    
    <content type="html"><![CDATA[<p>id20. Valid Parentheses   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 163285<br>Total Submissions: 507096<br>Difficulty: Easy<br>Contributors: Admin<br>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.</p>
<a id="more"></a>
<p>字符串匹配<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; st;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(s[i]==<span class="string">'('</span>||s[i]==<span class="string">'['</span>||s[i]==<span class="string">'&#123;'</span>)</div><div class="line">            st.push(s[i]);</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">')'</span>)</div><div class="line">            &#123;<span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">             <span class="keyword">if</span>(st.top()==<span class="string">'('</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">']'</span>)</div><div class="line">            &#123;<span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">if</span>(st.top()==<span class="string">'['</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;&#125;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'&#125;'</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(st.empty())</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span>&#123;<span class="keyword">if</span>(st.top()==<span class="string">'&#123;'</span>)</div><div class="line">            st.pop();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(st.empty())</div><div class="line"><span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id20. Valid Parentheses   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 163285&lt;br&gt;Total Submissions: 507096&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;The brackets must close in the correct order, “()” and “()[]{}” are all valid but “(]” and “([)]” are not.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2017/01/18/Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2017/01/18/Remove-Nth-Node-From-End-of-List/</id>
    <published>2017-01-18T15:30:04.000Z</published>
    <updated>2017-01-18T15:40:02.426Z</updated>
    
    <content type="html"><![CDATA[<p>id19. Remove Nth Node From End of List   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 154617<br>Total Submissions: 480607<br>Difficulty: Easy<br>Contributors: Admin<br>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.<br><a id="more"></a><br>主要使用了双指针，比较重要得一点是建立头节点，因为是一个独立结点所以需要分配空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span></span></div><div class="line">    &#123; ListNode* result=<span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>)</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">   ListNode* Lhead= <span class="keyword">new</span> ListNode(<span class="keyword">sizeof</span>(ListNode));</div><div class="line"><span class="comment">//  Lhead-&gt;val=99;</span></div><div class="line">   Lhead-&gt;next=head;</div><div class="line">  <span class="comment">// cout&lt;&lt;Lhead-&gt;next-&gt;next-&gt;val;</span></div><div class="line">        ListNode *p=Lhead;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">        p=p-&gt;next;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        ListNode *q=Lhead;</div><div class="line">        <span class="keyword">while</span>(p)</div><div class="line">        &#123;p=p-&gt;next;</div><div class="line">         q=q-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* h=q-&gt;next-&gt;next;</div><div class="line"></div><div class="line">    <span class="comment">//  cout&lt;&lt;h-&gt;val&lt;&lt;q-&gt;val;</span></div><div class="line">        q-&gt;next=h;</div><div class="line">     <span class="comment">//   cout&lt;&lt;q-&gt;val;</span></div><div class="line">        result=Lhead-&gt;next;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id19. Remove Nth Node From End of List   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 154617&lt;br&gt;Total Submissions: 480607&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;/p&gt;
&lt;p&gt;   Given linked list: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, and n = 2.&lt;/p&gt;
&lt;p&gt;   After removing the second node from the end, the linked list becomes 1-&amp;gt;2-&amp;gt;3-&amp;gt;5.&lt;br&gt;Note:&lt;br&gt;Given n will always be valid.&lt;br&gt;Try to do this in one pass.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>4Sum</title>
    <link href="http://yoursite.com/2017/01/18/4Sum/"/>
    <id>http://yoursite.com/2017/01/18/4Sum/</id>
    <published>2017-01-18T11:54:09.000Z</published>
    <updated>2017-01-18T11:59:19.893Z</updated>
    
    <content type="html"><![CDATA[<p>id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 101633<br>Total Submissions: 394751<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p>
<p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]<br><a id="more"></a><br>和3sum差不多 关键是处理重复<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">         <span class="keyword">if</span>(nums.size()&lt;<span class="number">4</span>)</div><div class="line">         <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-3</span>;i++)</div><div class="line">        &#123;<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size()<span class="number">-2</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k=j+<span class="number">1</span>;</div><div class="line">         <span class="keyword">int</span> m=nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(k&lt;m)</div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]+nums[m]==target)</div><div class="line">                &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[j]);</div><div class="line">                vec.push_back(nums[k]);</div><div class="line">                vec.push_back(nums[m]);</div><div class="line">                res.push_back(vec);</div><div class="line">                m--;</div><div class="line">                k++;</div><div class="line">                 <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                  <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&lt;target-nums[i]-nums[j])</div><div class="line">                &#123;k++;</div><div class="line">                <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&gt;target-nums[i]-nums[j])</div><div class="line">                &#123;m--;</div><div class="line">                 <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(nums[j+<span class="number">1</span>]==nums[j]&amp;&amp;j+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(nums[i+<span class="number">1</span>]==nums[i]&amp;&amp;i+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 101633&lt;br&gt;Total Submissions: 394751&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;Note: The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;p&gt;For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.&lt;/p&gt;
&lt;p&gt;A solution set is:&lt;br&gt;[&lt;br&gt;  [-1,  0, 0, 1],&lt;br&gt;  [-2, -1, 1, 2],&lt;br&gt;  [-2,  0, 0, 2]&lt;br&gt;]&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="4Sum" scheme="http://yoursite.com/tags/4Sum/"/>
    
  </entry>
  
  <entry>
    <title>QT实战,cortfly局域网工具</title>
    <link href="http://yoursite.com/2017/01/18/QT%E5%AE%9E%E6%88%98-cortfly%E5%B1%80%E5%9F%9F%E7%BD%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/01/18/QT实战-cortfly局域网工具/</id>
    <published>2017-01-18T07:58:55.000Z</published>
    <updated>2017-01-18T08:57:53.153Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。<br>update v1.0</p>
<ol>
<li>软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。</li>
<li>局域网聊天</li>
<li>文件对传</li>
<li>实验室论坛一键连接</li>
<li>实验室服务器登陆</li>
</ol>
<p><code>软件下载：</code>www.cortfly.com<br><code>github源码：</code> <a href="https://github.com/unsky/cortfly" target="_blank" rel="external">https://github.com/unsky/cortfly</a><br><a id="more"></a></p>
<p>#局域网聊天，文件秒传</p>
<p><img src="https://github.com/unsky/cortfly/raw/master/img01.jpg" alt="image"></p>
<p>#服务器登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img02.jpg" alt="image"></p>
<p>#论坛支持及论坛登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img03.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。&lt;br&gt;update v1.0&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。&lt;/li&gt;
&lt;li&gt;局域网聊天&lt;/li&gt;
&lt;li&gt;文件对传&lt;/li&gt;
&lt;li&gt;实验室论坛一键连接&lt;/li&gt;
&lt;li&gt;实验室服务器登陆&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;软件下载：&lt;/code&gt;www.cortfly.com&lt;br&gt;&lt;code&gt;github源码：&lt;/code&gt; &lt;a href=&quot;https://github.com/unsky/cortfly&quot;&gt;https://github.com/unsky/cortfly&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="cortfly" scheme="http://yoursite.com/tags/cortfly/"/>
    
  </entry>
  
  <entry>
    <title>Letter Combinations of a Phone Number</title>
    <link href="http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-01-18T07:49:48.000Z</published>
    <updated>2017-01-18T07:55:50.564Z</updated>
    
    <content type="html"><![CDATA[<p>Given a digit string, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>
<p><img src="/images/leetcodeid17/1.png" alt=""></p>
<p>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br><a id="more"></a><br>问题可以归结为backtracking问题，使用递归，需要建立对应得字母表<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</div><div class="line">        vector&lt;string&gt; res;</div><div class="line">        if (digits.length()==0)</div><div class="line">    return res;</div><div class="line">     string dict[] = &#123;" ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"&#125;;</div><div class="line">    string comb(digits.length(),'/0');</div><div class="line">           backtracking(digits,res,dict,comb,0);</div><div class="line">           return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  void  backtracking(string digits,vector&lt;string&gt; &amp;res,string dict[],string &amp;comb, int index)</div><div class="line">    &#123; if(index==digits.size())</div><div class="line">      &#123;res.push_back(comb);</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      string str=dict[digits[index]-'0'];</div><div class="line">      for(int i=0;i&lt;str.length();i++)</div><div class="line">      &#123;comb[index]=str[i];</div><div class="line">         backtracking(digits,res,dict,comb,index+1);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
&lt;p&gt;A mapping of digit to letters (just like on the telephone buttons) is given below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/leetcodeid17/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Input:Digit string “23”&lt;br&gt;Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>3Sum Closest</title>
    <link href="http://yoursite.com/2017/01/18/3Sum-Closest/"/>
    <id>http://yoursite.com/2017/01/18/3Sum-Closest/</id>
    <published>2017-01-18T07:44:48.000Z</published>
    <updated>2017-01-18T07:48:59.936Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>3Sum Closest   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 109596<br>Total Submissions: 358454<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p>For example, given array S = {-1 2 1 -4}, and target = 1.</p>
<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
<a id="more"></a>
<p>和3sum差不多，使用双指针，唯一得区别是每次指针移动判断得是和目标之间得距离得绝对值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> interval=<span class="number">0</span>;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        res=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[nums.size()<span class="number">-1</span>];</div><div class="line">        interval=<span class="built_in">abs</span>(target-res);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">int</span> j=i+<span class="number">1</span>,k=nums.size()<span class="number">-1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(j!=k)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==target)</div><div class="line">              <span class="keyword">return</span> target;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&lt;target)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">             <span class="keyword">if</span>(target-nums[i]-nums[j]-nums[k]&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(target-nums[i]-nums[j]-nums[k]);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">            &#125;</div><div class="line">          j++; &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&gt;target)</div><div class="line">            &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]-target&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(nums[i]+nums[j]+nums[k]-target);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">          &#125; k--;&#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;3Sum Closest   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 109596&lt;br&gt;Total Submissions: 358454&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;For example, given array S = {-1 2 1 -4}, and target = 1.&lt;/p&gt;
&lt;p&gt;The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="3Sum Closest" scheme="http://yoursite.com/tags/3Sum-Closest/"/>
    
  </entry>
  
  <entry>
    <title>QT从入门到放弃:(6)Frame类族</title>
    <link href="http://yoursite.com/2017/01/11/QT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%886%EF%BC%89Frame%E7%B1%BB%E6%97%8F/"/>
    <id>http://yoursite.com/2017/01/11/QT从入门到放弃：（6）Frame类族/</id>
    <published>2017-01-11T06:53:43.000Z</published>
    <updated>2017-01-11T07:07:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，<br><a id="more"></a><br>带有边框得不叫主要特点是文本编辑器类QTextEdit类和各种项目视图.</p>
<p><img src="/images/frame/1.png" alt=""><br><img src="/images/frame/2.png" alt=""></p>
<h1 id="QFrame"><a href="#QFrame" class="headerlink" title="QFrame"></a>QFrame</h1><p>在设计器中拖入frame，右下角可以修改其具体属性。<br><img src="/images/frame/3.png" alt=""><br>效果如：<br><img src="/images/frame/4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep Learning Strong Parts for Pedestrian Detection</title>
    <link href="http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/"/>
    <id>http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/</id>
    <published>2016-12-09T13:04:02.000Z</published>
    <updated>2016-12-09T14:17:52.550Z</updated>
    
    <content type="html"><![CDATA[<p> Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。<br> <a id="more"></a><br> 本论文的核心思想是遮挡的处理问题。</p>
<h1 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h1><p> 传统的行人检测对遮挡行人的处理都是用单分类器进行处理，这篇论文，将不再适用单分类器，而是用多分类器处理遮挡问题。同时这种方法是基于分块的。</p>
<h1 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h1><ol>
<li>构建了一个部件池包含很多行人的分块，这些分块是自动选择的而且适用于不同的数据集。</li>
<li>基于各种CovNets,对各种分块分别训练一个网络，而不是单个分类器。</li>
<li><p>提出了一种解决偏移的方法。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="部件池的构建"><a href="#部件池的构建" class="headerlink" title="部件池的构建"></a>部件池的构建</h2><p><img src="/images/deeppart/1.png" alt=""></p>
<p>讲一个行人切分成2m<em>m个cell,在具体的试验中m=3.<br>就是18个cell,<br>然后适用一个h</em>w的滑动窗口在cell上滑动，步长是1，其中h和w满足<br><img src="/images/deeppart/2.png" alt=""><br>就是限制他们的大小，不能太小，太小了没意义。最后在实验的时候最小都取了2.</p>
<p>这样通过滑动，总共可以选择出45个这种部件。构造除了我们的部件池。用如下的公式表示<br><img src="/images/deeppart/3.png" alt=""></p>
</li>
</ol>
<p>x,y是左上的坐标，w，h是高，i是id,总共45个  这种表示方法的意思就是如果是整个图像就是（1，1，m，2m,id）</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p><img src="/images/deeppart/4.png" alt=""><br>对于负样本直接滑动出45个部件，<br>      对于正样本，需要选择，如果可见部分超过0.4就选择其是人的部件为正样本。如果这个人没又遮挡，直接滑动出45个部分。这样正负样本总共包含45部分，拿着这45种部件，训练45个探测器。。。（内心os:这居然是优点·····）</p>
<p>对于探测器直接用了pre-train的模型，然后进行fine-turning,<br>    fine-turning阶段吐槽一下作者的原话：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  we uniformly sample 16 positive and 48</div><div class="line">negative windows to construct a mini-batch. Experiments</div><div class="line">show that fine-tuning for 10000 iterations with a learning</div><div class="line">rate of 0.001 is sufficient to converge</div></pre></td></tr></table></figure>
<p>相当于重新训练一次了。。。</p>
<h1 id="处理偏移"><a href="#处理偏移" class="headerlink" title="处理偏移"></a>处理偏移</h1><p>为了接收任意尺寸的图片<br><img src="/images/deeppart/5.png" alt=""><br>他们把最后的全连接层换成了卷积层，这样就可以接收任意的尺寸了。<br>以下拿AlexNet为例子<br>因为AlexNet的感受野的步长是32<br>所以对原始的候选框进行抖动扩充：<br><img src="/images/deeppart/6.png" alt=""><br>其中<br><img src="/images/deeppart/7.png" alt="">是原始图像，这个公式的意思就是按照神经网络的步长进行比例的扩充。这样最终的卷积层产生的就是（1+n）<em>(1+n)</em>4096的score map。<br><img src="/images/deeppart/8.png" alt=""><br>作者先解释了一下偏移问题的重要性，然后拿了一个n=2的例子进行的讲解。</p>
<p>在这里，因为最终生成的是（1+n）<em>(1+n)</em>4096的score map<br><img src="/images/deeppart/9.png" alt=""><br>所以直接对其加入惩罚之后进行max(相当于max pooling)<br>    <img src="/images/deeppart/10.png" alt=""><br>  其实这个惩罚就是原位置的加权，</p>
<p>在实验中他们探究了a和b的值, 上图的例子中a=2 b=10.</p>
<h1 id="部件补充"><a href="#部件补充" class="headerlink" title="部件补充"></a>部件补充</h1><p>和R-CNN不同，它去掉了svm的分类，直接拿45个部件的1<em>1</em>4096的进行svm分类。。来判断最终的分类结果。。。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在AlexNet测试了三种部件：</p>
<p><img src="/images/deeppart/11.png" alt=""><br>加入偏移处理之后<br><img src="/images/deeppart/12.png" alt=""><br>三种模型上的三种部件对比：<br> <img src="/images/deeppart/13.png" alt=""></p>
<p> 整体在caltech-test<br> <img src="/images/deeppart/14.png" alt=""><br> 上的结果。<br><img src="/images/deeppart/15.png" alt=""><br>其他数据集<br><img src="/images/deeppart/16.png" alt=""><br>前六个分数最高的部件和随机选的六个部件。<br><img src="/images/deeppart/17.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iccv2015" scheme="http://yoursite.com/tags/iccv2015/"/>
    
      <category term="Pedestrian Detection" scheme="http://yoursite.com/tags/Pedestrian-Detection/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(5)标准对话框</title>
    <link href="http://yoursite.com/2016/12/09/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%885%EF%BC%89%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>http://yoursite.com/2016/12/09/QT5从入门到放弃：（5）标准对话框/</id>
    <published>2016-12-09T09:40:39.000Z</published>
    <updated>2016-12-12T15:10:27.776Z</updated>
    
    <content type="html"><![CDATA[<p>Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。<br><a id="more"></a><br><code>中文问题note:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这里使用了qt5+msvc2013编译器，对于中文乱码问题，可以直接在cpp文件中加入，</div><div class="line">#pragma execution_character_set(&quot;utf-8&quot;)</div><div class="line">即可直接输入汉字。</div></pre></td></tr></table></figure></p>
<p>我们挨个实验一下标准对话框：</p>
<h1 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h1><p>在设计师界面加入一个新的<br><code>push button</code><br>右键转到槽之后加入代码：<br>首先调用头文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QColorDialog&gt;</span></span></div></pre></td></tr></table></figure>
<p>加入代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    QColor color=QColorDialog::getColor(Qt::red,<span class="keyword">this</span>,<span class="string">"颜色"</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"颜色："</span>&lt;&lt;color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中队中color返回的 (ARGB alpha,red,green,blue) alpha是透明度1.0完全不透明,alpha 0.0是完全透明。 R G B用0~255的数值进行表示。<br>我们也可以分步的进行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QColorDialog <span class="title">dia</span><span class="params">(Qt::red,<span class="keyword">this</span>)</span></span>;<span class="comment">//初始颜色和父窗口</span></div><div class="line">    dia.setWindowTitle(<span class="string">"挑选喜欢的颜色"</span>);</div><div class="line">    dia.setOption(QColorDialog::ShowAlphaChannel);<span class="comment">//显示alpha</span></div><div class="line">    dia.exec();</div><div class="line"> <span class="comment">//   QColor color=QColorDialog::getColor(Qt::red,this,"爱国者导弹");</span></div><div class="line">  <span class="comment">//  qDebug()&lt;&lt;"颜色："&lt;&lt;color;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h1><p>新建一个push button 右键转到槽 引入头文件QFontDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"(*png)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于不同类型的文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div></pre></td></tr></table></figure></p>
<p>这里只可以选择一个文件，如果要选择多个文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QStringList filename=QFileDialog::getOpenFileNames(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>QStringList 可以存储多个字符串，getOpenFileNames可以选择多个文件并返回名字。</p>
<h1 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h1><p>新建一个push button 之后右键转到槽：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_3_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QFont font= QFontDialog::getFont(&amp;ok,<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(ok) <span class="keyword">this</span>-&gt;setFont(font);</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有选择字体"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于给固定的窗口选择字体可以使用，ui-&gt;pushButton_3-&gt;setFont(front);在这里对this窗口进行设置字体，会使窗口上的所有按钮字体改变。</p>
<h1 id="输入对话框"><a href="#输入对话框" class="headerlink" title="输入对话框"></a>输入对话框</h1><p>新建push Button 之后 引入头文件QInputDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_4_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QString str=QInputDialog::getText(<span class="keyword">this</span>,<span class="string">"输入字符串对话框"</span>,<span class="string">"请输入用户名"</span>,QLineEdit::Normal,<span class="string">"admin:"</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;str;</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有输入"</span>;</div><div class="line">    <span class="keyword">int</span> val= QInputDialog::getInt(<span class="keyword">this</span>,<span class="string">"整数输入"</span>,<span class="string">"请输入整数"</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">100</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val;</div><div class="line">    <span class="keyword">double</span> val_double=QInputDialog::getDouble(<span class="keyword">this</span>,<span class="string">"double"</span>,<span class="string">"输入"</span>,<span class="number">-100</span>,<span class="number">-500</span>,<span class="number">4000</span>,<span class="number">5</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val_double;</div><div class="line">    QStringList strs;</div><div class="line">    strs&lt;&lt;<span class="string">"条目一"</span>&lt;&lt;<span class="string">"战士"</span>;</div><div class="line">    QString str2=QInputDialog::getItem(<span class="keyword">this</span>,<span class="string">"目录"</span>,<span class="string">"s卷积"</span>,strs,<span class="number">0</span>,<span class="number">1</span>,&amp;ok);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里总共包括 getText函数输入字符串，getInt输入整数 getDouble输入双精度数。getItem输入条目。<br>在输入条目中可以使用一个 QStringList 类型的字符串进行选择。</p>
<h1 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h1><p>新建push Button右键转到槽，包含头文件QMessageBox<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_5_clicked()</div><div class="line">&#123; <span class="keyword">int</span> val= QMessageBox::question(<span class="keyword">this</span>,<span class="string">"请回答"</span>,<span class="string">"你是谁？"</span>,QMessageBox::Yes,QMessageBox::No);</div><div class="line">    <span class="keyword">if</span> (val==QMessageBox::No) qDebug()&lt;&lt;<span class="string">"你真笨"</span>;</div><div class="line">    <span class="keyword">int</span> val2=QMessageBox::information(<span class="keyword">this</span>,<span class="string">"about"</span>,<span class="string">"niha "</span>,QMessageBox::Ok);</div><div class="line">    <span class="keyword">if</span>(val2==QMessageBox::Ok) qDebug()&lt;&lt;<span class="string">"urhgi"</span>;</div><div class="line"><span class="keyword">int</span> val3=QMessageBox::warning(<span class="keyword">this</span>,<span class="string">"警告"</span>,<span class="string">"会有，计划规划"</span>,QMessageBox::Abort);</div><div class="line"><span class="keyword">if</span> (val3==QMessageBox::Abort) qDebug()&lt;&lt;<span class="string">"关于i"</span>;</div><div class="line"><span class="keyword">int</span> val4=QMessageBox::critical(<span class="keyword">this</span>,<span class="string">"错误"</span>,<span class="string">"这是一个很严重的错误"</span>,QMessageBox::YesAll);</div><div class="line"><span class="keyword">if</span>(val4==QMessageBox::YesAll) qDebug()&lt;&lt;<span class="string">"haha"</span>;</div><div class="line">  QMessageBox::about(<span class="keyword">this</span>,<span class="string">"关于"</span>,<span class="string">"uhgthtuirhytrini2016/12/9"</span>);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里包含，question informarion warning critical和about五个函数。<br>同时可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">符号                编号</div><div class="line">QMessageBox::Yes    16384</div><div class="line">QMessageBox::No     65536</div><div class="line">QMessageBox::Ok     1024</div><div class="line">QMessageBox::Abort  262144</div><div class="line">QMessageBox::YesAll 32768</div></pre></td></tr></table></figure></p>
<p>对应的数字使QMessageBox内置的编号.</p>
<h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><p>新建push Button 右键转到槽 引入头文件QProgressDialogsses<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_6_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QProgressDialog <span class="title">pd</span><span class="params">(<span class="string">"进度"</span>,<span class="string">"jiyhui"</span>,<span class="number">0</span>,<span class="number">90000</span>,<span class="keyword">this</span>)</span></span>;</div><div class="line">    pd.setWindowTitle(<span class="string">"nihighi"</span>);</div><div class="line">    pd.setModal(<span class="literal">true</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000</span>;i++)</div><div class="line">    &#123;pd.setValue(i);</div><div class="line">        QCoreApplication::processEvents();</div><div class="line">        <span class="keyword">if</span>(pd.wasCanceled()) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    pd.setValue(<span class="number">900000</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"结束"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里将其设为模态，使用setValue显示进度，processEvents()用于避免界面被冻结。使用wasCanceled()判断其是否被取消<br>在最后需要显示最后一个值进行setValue()完成不然只会99%的进度。</p>
<h1 id="错误消息对话框"><a href="#错误消息对话框" class="headerlink" title="错误消息对话框"></a>错误消息对话框</h1><p>新建push Button 右键转到槽，引入头文件QErrorMessage<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_7_clicked()</div><div class="line">&#123;</div><div class="line">    QErrorMessage *EM=<span class="keyword">new</span> QErrorMessage(<span class="keyword">this</span>);</div><div class="line">    EM-&gt;setWindowTitle(<span class="string">"错误"</span>);</div><div class="line">    EM-&gt;showMessage(<span class="string">"这是一个很严重的错误"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里使用new的方式建立非模态对话框。在这个对话框中有一个默认的选项，show this message again,的复选框。</p>
<h1 id="向导对话框"><a href="#向导对话框" class="headerlink" title="向导对话框"></a>向导对话框</h1><p>对于引导页面，首先需要新建引导页，在mydialog.h中引入#include<qwizard>，并声明需要使用的页面：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MYDialog *ui;</div><div class="line">    <span class="function">QWizardPage *<span class="title">createpage1</span><span class="params">()</span></span>;</div><div class="line">     <span class="function">QWizardPage *<span class="title">createpage2</span><span class="params">()</span></span>;</div><div class="line">      <span class="function">QWizardPage * <span class="title">createpage3</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></qwizard></p>
<p>在这里声明了三个页面函数。单击函数右键选择跳转到定义，在mydialog.cpp中<br>定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage1()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"介绍"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage2()</div><div class="line">&#123;QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"卡特飞学术论坛"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage3()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">        page-&gt;setTitle(<span class="string">"结束"</span>);</div><div class="line">        <span class="keyword">return</span> page;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即完成了三个页面函数的定义。</p>
<p>之后开始使用按钮进行关联。<br>新建push Button 右键转到槽 并引入 QWizard<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_8_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QWizard <span class="title">q</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    q.setWindowTitle(<span class="string">"智能向导"</span>);</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage2());</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage3());</div><div class="line">    q.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/basedialog/1.png" alt=""><br><img src="/images/basedialog/2.png" alt=""><br><img src="/images/basedialog/3.png" alt=""><br><img src="/images/basedialog/4.png" alt=""><br><img src="/images/basedialog/5.png" alt=""><br><img src="/images/basedialog/6.png" alt=""><br><img src="/images/basedialog/7.png" alt=""><br><img src="/images/basedialog/8.png" alt=""><br><img src="/images/basedialog/9.png" alt=""><br><img src="/images/basedialog/10.png" alt=""><br><img src="/images/basedialog/11.png" alt=""><br><img src="/images/basedialog/12.png" alt=""><br><img src="/images/basedialog/13.png" alt=""><br><img src="/images/basedialog/14.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="标准对话框" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(4)窗口通讯初步</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(4)%E7%AA%97%E5%8F%A3%E9%80%9A%E8%AE%AF%E5%88%9D%E6%AD%A5/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(4)窗口通讯初步/</id>
    <published>2016-12-07T03:18:52.000Z</published>
    <updated>2016-12-07T16:11:07.055Z</updated>
    
    <content type="html"><![CDATA[<p>信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。<br><a id="more"></a><br>QT可以手动设置信号与槽也可以自动设置，为了了解最基本的原理我们从最基本的手动设置开始：</p>
<h1 id="手动实现信号与槽"><a href="#手动实现信号与槽" class="headerlink" title="手动实现信号与槽"></a>手动实现信号与槽</h1><p>  <img src="/images/signalbase/1.png" alt=""><br>  如图在设计师模块中加入push button 并将其objectName 设置为showChild.<br>   下面开始使用这个push button.</p>
<p>   首先明确我们的目的师设计按下push button之后产生信号，信号激活槽内的程序使其产生一个label的窗口。</p>
<p>   首先我们需要先声明槽（slots）.<br>   <code>note：</code><br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c++编程补充：因为c++需要声明和定义，一般都将声明写进 .h文件，而定义写在.cpp文件中。</div><div class="line">在程序的书写中不需要包含各种cpp文件，程序在执行中动态的调用各种函数。</div></pre></td></tr></table></figure></p>
<p>   所以我们先在mainwindow.h声明槽<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MainWindow : <span class="keyword">public</span> QMainWindow</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</div><div class="line">    ~MainWindow();</div><div class="line">   <span class="keyword">public</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MainWindow *ui;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></div></pre></td></tr></table></figure></p>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> slots:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>声明了槽函数 showChild();<br>在声明完之后我们需要给其具体的定义,在mainwindow.cpp中进行定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为我们在mainwindow.h中定义了类的名字空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以这里函数的具体定义我们应该写成：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在定义完之后。我们需要进行具体的连接，也就是将信号和槽进行连接，我们在类的构造函数内完成，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div></pre></td></tr></table></figure></p>
<p> connect的第一个参数是发送信号的对象，第二个是信号，第三个是接受信号的对象,第四个是槽函数。<br> 这是手工的做法</p>
<h1 id="自动信号与槽"><a href="#自动信号与槽" class="headerlink" title="自动信号与槽"></a>自动信号与槽</h1><p>我们现在简单的实现一个登陆界面和主界面的切换程序。</p>
<p>从最开始开始。新建一个空的项目。</p>
<p>在工程文件里加上<code>QT + =widgets</code></p>
<h2 id="新建第一个登陆界面："><a href="#新建第一个登陆界面：" class="headerlink" title="新建第一个登陆界面："></a>新建第一个登陆界面：</h2><p>新建一个空的QT设计师<br>选择Dialog without buttons<br>类名就写 myDialog<br>  <img src="/images/signalbase/2.png" alt=""><br>  点F4进入信号与槽模式<br>  先设计退出按钮，左键点击退出按钮的下边然后拉到主窗口的边缘，意思也就是信号源是退出按钮，接受源是整个窗口。<br>    <img src="/images/signalbase/3.png" alt=""><br>    设计成功后的样子：<br>        <img src="/images/signalbase/4.png" alt=""><br>然后再设计进入主程序：<br>F3回到设计模式，右键点击进入主程序按钮，选择转到槽，然后选择click(),之后点击确定。</p>
<p>这时候转到了myDialog类的源文件即 myDialog.cpp加入代码，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>其中on_pushButton_clicked()，其声明在myDialog里也被自动声明完了，就是上面我们所说的实现模式就是自动生成函数
我们在里面加入：
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  accept()这个函数的作用就是判断哪个是主程序界面这个按钮被按下，如果被按下则返回<code>QDialog::Accepted</code>.</p>
<h2 id="设计第二个界面"><a href="#设计第二个界面" class="headerlink" title="设计第二个界面"></a>设计第二个界面</h2><p>  第二个界面有：<br>    <img src="/images/signalbase/5.png" alt=""></p>
<h3 id="重新登陆按钮的设计："><a href="#重新登陆按钮的设计：" class="headerlink" title="重新登陆按钮的设计："></a>重新登陆按钮的设计：</h3><p>和前面一样，右键转到槽</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    close();</div><div class="line">    myDialog win;</div><div class="line">   win.show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即关闭之后重新建立一个myDialog窗口。</p>
<h3 id="退出按钮"><a href="#退出按钮" class="headerlink" title="退出按钮"></a>退出按钮</h3><p>和前面的退出按钮设计相同。</p>
<h3 id="显示label按钮"><a href="#显示label按钮" class="headerlink" title="显示label按钮"></a>显示label按钮</h3><p>右键转到槽<br>加入<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div><div class="line">至此没有Dialog.cpp变为</div><div class="line"></div><div class="line"></div><div class="line">```cpp</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog1::myDialog1(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog1)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog1::~myDialog1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">w</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    myDialog win1;</div><div class="line">    myDialog1 win2;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(win1.exec()==QDialog::Accepted)</div><div class="line">    &#123;  <span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">        &#123; win1.show();</div><div class="line">            <span class="keyword">return</span> w.exec();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即如果第一界面的进入主程序被按下，执行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">   &#123; win1.show();</div><div class="line">       <span class="keyword">return</span> w.exec();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这句语句的意思是如果第二个窗口的重新登陆被按下则显示第一个界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="信号和槽" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(3)模态与非模特</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(3)%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E7%89%B9/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(3)模态与非模特/</id>
    <published>2016-12-07T02:23:34.000Z</published>
    <updated>2016-12-07T03:14:14.742Z</updated>
    
    <content type="html"><![CDATA[<p>对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。<br><a id="more"></a><br>直接看例子：</p>
<p><code>main.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们只在 MainWindow的构造函数中实验，所以只有定义即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到一个窗口一闪而过。剩下的是w窗口被保留，在函数的构造函数里面我们定义了一个窗口win并且指定了this（w） 为其父，在运行中其一闪而过的只剩下W原因是：他并没有实际的内存空间，在构造函数被调用完之后他就被销毁了，所以我们可以使用指针给他new一个空间：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">    win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样win窗口就被保留下来。<br>此外因为上段程序中指定了父窗口，所以在new完之后不需要进行delete其会随父窗口进行销毁。</p>
<p>我们也可以用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.exec();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样会发现win对话框被显示，但是其父窗口没有被显示。<br>只有我们关闭了win之后w窗口才会被显示出来。</p>
<p>这种对话框我们称之为模态对话框，而上面的写法被成为非模态对话框。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">定义</div><div class="line"></div><div class="line">模态对话框：即没有关闭该对话框之前不能再于其他窗口进行交互。如新建项目时候，我们只能再这个窗口进行操作，只有关了它才能进行其他的操作。</div><div class="line"></div><div class="line">非模态对话框：可以再运行时候可以与其他窗口自由交互。</div></pre></td></tr></table></figure></p>
<p>可以看到，如果让窗口是非模态的只需使用指针进行new即可，而让窗口是模态的只需调用其exec()属性即可。<br>当然 我们也可以使用setModal()函数进行声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">   win-&gt;setModal(<span class="literal">true</span>);</div><div class="line">   win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法可以将win变为模态的，在运行时候会发现，两个窗口都会出现，但是我们只能对win进行拖拽等操作，只有关闭了win才可以对w进行操作。</p>
<p><code>原因：</code><br><code>因为在运行完show()之后程序会将控制权交给调用者继续执行，而exec()则是在程序执行完操作之后才交出控制权从而继续执行。</code></p>
<p>还有和setModal()相似的函数，setWindowModality()它可以通过设置参数来进行模态和模态的控制有：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Qt::NonModal 非模态</div><div class="line">Qt::WindowModal 阻塞所有祖先</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="模态与非模态" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="http://yoursite.com/2016/12/06/3Sum/"/>
    <id>http://yoursite.com/2016/12/06/3Sum/</id>
    <published>2016-12-06T13:41:05.000Z</published>
    <updated>2017-01-19T08:22:50.791Z</updated>
    
    <content type="html"><![CDATA[<p>Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 165869<br>Total Submissions: 802806<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a><br>Note: The solution set must not contain duplicate triplets.</p>
<p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p>
<p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
<p>这道题目因为需要去重和遍历，所以用传统的方法遍历会出现很多的重复步骤，因为这个题目不要重复值，所以我们可以对其先进行排序，双指针在有序的数列问题中表现很好，所以使用双指针算法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((i&gt;<span class="number">0</span>)&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">          <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">          <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">          <span class="keyword">while</span>(left&lt;right)</div><div class="line"></div><div class="line">          &#123;  </div><div class="line">              <span class="keyword">if</span>((nums[left]+nums[right])==(<span class="number">-1</span>*nums[i]))</div><div class="line">                &#123; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[left]);</div><div class="line">                vec.push_back(nums[right]);</div><div class="line">                result.push_back(vec);</div><div class="line">                left++;</div><div class="line">                right--;</div><div class="line">                <span class="keyword">while</span>(nums[left]==nums[left<span class="number">-1</span>]) left++;</div><div class="line"></div><div class="line">                <span class="keyword">while</span>(nums[right]==nums[right+<span class="number">1</span>]) right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nums[left]+nums[right])&lt;(<span class="number">-1</span>*nums[i]))</div><div class="line">                    left++;</div><div class="line">                <span class="keyword">else</span>  right--;</div><div class="line"></div><div class="line"></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>该算法的核心，因为首先进行了排序，所以可以方便的使用双指针，如果小于一个目标值则进行left+1,大于则right-1.<br>关键步骤是去重。因为对于排序过后的数组，这三个数如果和在向下一步走的时候，如何和上一步相等则即可判断为重复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 165869&lt;br&gt;Total Submissions: 802806&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="http://yoursite.com/2016/12/03/Longest-Common-Prefix/"/>
    <id>http://yoursite.com/2016/12/03/Longest-Common-Prefix/</id>
    <published>2016-12-03T12:43:58.000Z</published>
    <updated>2016-12-03T12:53:49.665Z</updated>
    
    <content type="html"><![CDATA[<p>id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 137142<br>Total Submissions: 452531<br>Difficulty: Easy<br>Contributors: Admin<br>Write a function to find the longest common prefix string amongst an array of strings.<br><a id="more"></a><br>题目的意思是找到n多字符串中的最大公共前缀<br>直接写代码了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">if</span>(strs.empty())<span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].size();i++)<span class="comment">//拿任意一个做标度</span></div><div class="line">        &#123;  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;strs.size();j++)</div><div class="line">             &#123;<span class="keyword">if</span>(strs[<span class="number">0</span>][i]!=strs[j][i])</div><div class="line">              <span class="keyword">return</span> result;</div><div class="line">             &#125;</div><div class="line">             result.push_back(strs[<span class="number">0</span>][i]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<br>  <code>for(int i=0;i&lt;strs[0].size();i++)//拿任意一个做标度</code>可以随便拿其中一个字符串做标度，因为是求最大公共前缀所以必须保证所有的都有，如果我们任意选择的都没有，说明就不是公共字串，为了控制简单所以使用第一个来进行。<br>  此外，一些语法的问题<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</div><div class="line">可以表示的数组是</div><div class="line">&#123;</div><div class="line">  &#123;dgh&#125;,</div><div class="line">  &#123;dfgth&#125;,</div><div class="line">  &#123;dgreuihgre&#125;,</div><div class="line">&#125;</div><div class="line">strs[<span class="number">0</span>]=<span class="string">"dgh"</span>;</div><div class="line">strs[<span class="number">0</span>][<span class="number">0</span>]=‘d’;</div><div class="line">此外 对于 <span class="built_in">string</span> 的后插操作</div><div class="line"><span class="built_in">string</span> s;</div><div class="line">s.append(<span class="string">"a"</span>);正确</div><div class="line">但是s.append(‘a’);错误</div><div class="line">应该使用s.push_back(‘a’);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 137142&lt;br&gt;Total Submissions: 452531&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetode" scheme="http://yoursite.com/tags/leetode/"/>
    
      <category term="Longest Common Prefix" scheme="http://yoursite.com/tags/Longest-Common-Prefix/"/>
    
  </entry>
  
</feed>
