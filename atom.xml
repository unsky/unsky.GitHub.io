<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deepdim-Unsky&#39;Blog</title>
  <subtitle>Unsky Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-07T03:14:14.742Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>unsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QT5从入门到放弃:(3)模态与非模特</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(3)%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E7%89%B9/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(3)模态与非模特/</id>
    <published>2016-12-07T02:23:34.000Z</published>
    <updated>2016-12-07T03:14:14.742Z</updated>
    
    <content type="html"><![CDATA[<p>对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。<br><a id="more"></a><br>直接看例子：</p>
<p><code>main.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们只在 MainWindow的构造函数中实验，所以只有定义即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到一个窗口一闪而过。剩下的是w窗口被保留，在函数的构造函数里面我们定义了一个窗口win并且指定了this（w） 为其父，在运行中其一闪而过的只剩下W原因是：他并没有实际的内存空间，在构造函数被调用完之后他就被销毁了，所以我们可以使用指针给他new一个空间：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">    win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样win窗口就被保留下来。<br>此外因为上段程序中指定了父窗口，所以在new完之后不需要进行delete其会随父窗口进行销毁。</p>
<p>我们也可以用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.exec();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样会发现win对话框被显示，但是其父窗口没有被显示。<br>只有我们关闭了win之后w窗口才会被显示出来。</p>
<p>这种对话框我们称之为模态对话框，而上面的写法被成为非模态对话框。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">定义</div><div class="line"></div><div class="line">模态对话框：即没有关闭该对话框之前不能再于其他窗口进行交互。如新建项目时候，我们只能再这个窗口进行操作，只有关了它才能进行其他的操作。</div><div class="line"></div><div class="line">非模态对话框：可以再运行时候可以与其他窗口自由交互。</div></pre></td></tr></table></figure></p>
<p>可以看到，如果让窗口是非模态的只需使用指针进行new即可，而让窗口是模态的只需调用其exec()属性即可。<br>当然 我们也可以使用setModal()函数进行声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">   win-&gt;setModal(<span class="literal">true</span>);</div><div class="line">   win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法可以将win变为模态的，在运行时候会发现，两个窗口都会出现，但是我们只能对win进行拖拽等操作，只有关闭了win才可以对w进行操作。</p>
<p><code>原因：</code><br><code>因为在运行完show()之后程序会将控制权交给调用者继续执行，而exec()则是在程序执行完操作之后才交出控制权从而继续执行。</code></p>
<p>还有和setModal()相似的函数，setWindowModality()它可以通过设置参数来进行模态和模态的控制有：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Qt::NonModal 非模态</div><div class="line">Qt::WindowModal 阻塞所有祖先</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="模态与非模态" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="http://yoursite.com/2016/12/06/3Sum/"/>
    <id>http://yoursite.com/2016/12/06/3Sum/</id>
    <published>2016-12-06T13:41:05.000Z</published>
    <updated>2016-12-07T03:17:28.835Z</updated>
    
    <content type="html"><![CDATA[<p>Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 165869<br>Total Submissions: 802806<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a><br>Note: The solution set must not contain duplicate triplets.</p>
<p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p>
<p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
<p>这道题目因为需要去重和遍历，所以用传统的方法遍历会出现很多的重复步骤，因为这个题目不要重复值，所以我们可以对其先进行排序，双指针在有序的数列问题中表现很好，所以使用双指针算法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((i&gt;<span class="number">0</span>)&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">          <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">          <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">          <span class="keyword">while</span>(left&lt;right)</div><div class="line"></div><div class="line">          &#123;  </div><div class="line">              <span class="keyword">if</span>((nums[left]+nums[right])==(<span class="number">-1</span>*nums[i]))</div><div class="line">                &#123; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[left]);</div><div class="line">                vec.push_back(nums[right]);</div><div class="line">                result.push_back(vec);</div><div class="line">                left++;</div><div class="line">                right--;</div><div class="line">                <span class="keyword">while</span>(nums[left]==nums[left<span class="number">-1</span>]) left++;</div><div class="line"></div><div class="line">                <span class="keyword">while</span>(nums[right]==nums[right+<span class="number">1</span>]) right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nums[left]+nums[right])&lt;(<span class="number">-1</span>*nums[i]))</div><div class="line">                    left++;</div><div class="line">                <span class="keyword">else</span>  right--;</div><div class="line"></div><div class="line"></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>该算法的核心，因为首先进行了排序，所以可以方便的使用双指针，如果小于一个目标值则进行left+1,大于则right-1.<br>关键步骤是去重。因为对于排序过后的数组，这三个数如果和在向下一步走的时候，如何和上一步相等则即可判断为重复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 165869&lt;br&gt;Total Submissions: 802806&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="http://yoursite.com/2016/12/03/Longest-Common-Prefix/"/>
    <id>http://yoursite.com/2016/12/03/Longest-Common-Prefix/</id>
    <published>2016-12-03T12:43:58.000Z</published>
    <updated>2016-12-03T12:53:49.665Z</updated>
    
    <content type="html"><![CDATA[<p>id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 137142<br>Total Submissions: 452531<br>Difficulty: Easy<br>Contributors: Admin<br>Write a function to find the longest common prefix string amongst an array of strings.<br><a id="more"></a><br>题目的意思是找到n多字符串中的最大公共前缀<br>直接写代码了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">if</span>(strs.empty())<span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].size();i++)<span class="comment">//拿任意一个做标度</span></div><div class="line">        &#123;  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;strs.size();j++)</div><div class="line">             &#123;<span class="keyword">if</span>(strs[<span class="number">0</span>][i]!=strs[j][i])</div><div class="line">              <span class="keyword">return</span> result;</div><div class="line">             &#125;</div><div class="line">             result.push_back(strs[<span class="number">0</span>][i]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<br>  <code>for(int i=0;i&lt;strs[0].size();i++)//拿任意一个做标度</code>可以随便拿其中一个字符串做标度，因为是求最大公共前缀所以必须保证所有的都有，如果我们任意选择的都没有，说明就不是公共字串，为了控制简单所以使用第一个来进行。<br>  此外，一些语法的问题<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</div><div class="line">可以表示的数组是</div><div class="line">&#123;</div><div class="line">  &#123;dgh&#125;,</div><div class="line">  &#123;dfgth&#125;,</div><div class="line">  &#123;dgreuihgre&#125;,</div><div class="line">&#125;</div><div class="line">strs[<span class="number">0</span>]=<span class="string">"dgh"</span>;</div><div class="line">strs[<span class="number">0</span>][<span class="number">0</span>]=‘d’;</div><div class="line">此外 对于 <span class="built_in">string</span> 的后插操作</div><div class="line"><span class="built_in">string</span> s;</div><div class="line">s.append(<span class="string">"a"</span>);正确</div><div class="line">但是s.append(‘a’);错误</div><div class="line">应该使用s.push_back(‘a’);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 137142&lt;br&gt;Total Submissions: 452531&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetode" scheme="http://yoursite.com/tags/leetode/"/>
    
      <category term="Longest Common Prefix" scheme="http://yoursite.com/tags/Longest-Common-Prefix/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(2)基础窗口部件</title>
    <link href="http://yoursite.com/2016/12/03/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%882)%E5%9F%BA%E7%A1%80%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/12/03/QT5从入门到放弃：（2)基础窗口部件/</id>
    <published>2016-12-03T09:55:49.000Z</published>
    <updated>2016-12-03T11:26:02.867Z</updated>
    
    <content type="html"><![CDATA[<p>QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.<br><a id="more"></a><br>他们之间详细的关系如下：<br><img src="/images/qwidgets/1.png" alt=""></p>
<h1 id="窗口和部件以及窗口类型"><a href="#窗口和部件以及窗口类型" class="headerlink" title="窗口和部件以及窗口类型"></a>窗口和部件以及窗口类型</h1><p> 窗口部件是QT中建立用户元素的主要部件，其中作为部件附属于其他窗口的可以简称为部件，而没有上级的成为窗口（根）<br> 看一段代码：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line">    w1-&gt;setWindowTitle(<span class="string">"thie is win1"</span>);</div><div class="line">    QLabel * label1=<span class="keyword">new</span> QLabel();</div><div class="line">    label1-&gt;setText(<span class="string">"label1"</span>);</div><div class="line">    label1-&gt;show();</div><div class="line">    label1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   QLabel *label2=<span class="keyword">new</span> QLabel(w1);</div><div class="line">   label2-&gt;setText(<span class="string">"LABEL2"</span>);</div><div class="line">   w1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   label2-&gt;show();</div><div class="line">   label2-&gt;resize(<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">   w1-&gt;show();</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">return</span> a.exec();</div><div class="line"> <span class="keyword">delete</span> label1;</div><div class="line"> <span class="comment">//  delete label2;</span></div><div class="line">   <span class="keyword">delete</span> w1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这段程序定义了一个QDialog :w1,两个QLabel: label1和label2.<br> 在这里需要注意的是所有的定义都使用new()开辟空间，所以在最后都需要执行delete操作。<br> 如：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line"><span class="keyword">delete</span> w1;</div></pre></td></tr></table></figure></p>
<p> 在这段程序里我们分析各个部件之间的关系。因为label1没有绑定任何父类，所以他是一个独立的窗口，而label2在新定义的时候，  <code>QLabel *label2=new QLabel(w1);</code>就被绑定上了w1所以其父是w1.<br> 所以有如下的一些特点：</p>
<ol>
<li>label1可以单独显示，而label2不可以单独显示，如果显示w1则显示w1的全部子部件，即label2也被显示出来。</li>
<li><p>在delete的时候，label1和label2都可以单独被销毁，但是如果如果w1被销毁，那么w1的所有子部件也全部被销毁。<br><img src="/images/qwidgets/2.png" alt=""></p>
<h1 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h1><p>QT有非常多的窗口类型，QWidget的构造函数有两个参数<br>一个是<code>QWidget *parent=0</code> 这个参数主要负责该窗口部件的附属关系，默认是0，表示是一个独立窗口，两一个参数是<br><code>Qt::WindowFlags</code>这个参数主要负责的是这个窗口部件的类型。<br>比如我们可以</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog);</div><div class="line">  QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen);</div></pre></td></tr></table></figure>
<p>其效果：<br><img src="/images/qwidgets/3.png" alt=""><br>也可以使用位或操作如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog|Qt::FramelessWindowHint);</div><div class="line"></div><div class="line">QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen|Qt::WindowStaysOnTopHint);</div></pre></td></tr></table></figure>
<p><img src="/images/qwidgets/4.png" alt=""><br>更加详细的样式，用到再说。</p>
<h1 id="窗口的几何布局"><a href="#窗口的几何布局" class="headerlink" title="窗口的几何布局"></a>窗口的几何布局</h1><p><img src="/images/qwidgets/5.png" alt=""><br>这里的函数主要分为两类，一类是包含框架的，另一个事不包含框架的。</p>
</li>
<li>包含框架的：x(),y(),frameGemetry(),pos(),move()函数</li>
<li><p>不包含框架的：genmetry(),width(),height(),rect()和size()函数。<br>实例程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=w.x();</div><div class="line"><span class="keyword">int</span> y=w.y();</div></pre></td></tr></table></figure></p>
<p>分别返回窗口部件的坐标值x,y,他们的默认值是0.</p>
<p>而geometry和frameGeometry()函数分别返回没有边框的和包含边框矩形的值，其返回值是QRect类型的，就是一个矩形，他的形式是（x,y,height,width）<br>在这里我们使用QDebug进行调试。<br>程序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">   qDebug()&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y&lt;&lt;<span class="string">" "</span>&lt;&lt;gemetry&lt;&lt;<span class="string">" "</span>&lt;&lt;frame;</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在引入了QDebug头文件之后，可以直接使用qDebug()函数<br><code>qDebug()&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;gemetry&lt;&lt;&quot; &quot;&lt;&lt;frame;</code>这句语句可以输出。<br>其结果如下：<br> <img src="/images/qwidgets/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://yoursite.com/2016/12/02/Roman-to-Integer/"/>
    <id>http://yoursite.com/2016/12/02/Roman-to-Integer/</id>
    <published>2016-12-02T14:49:15.000Z</published>
    <updated>2016-12-02T15:06:57.925Z</updated>
    
    <content type="html"><![CDATA[<p>ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 117446<br>Total Submissions: 273074<br>Difficulty: Easy<br>Contributors: Admin<br>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.<br><a id="more"></a><br>这道题同<br><a href="http://deepdim.com/2016/12/01/Integer-to-Roman/" target="_blank" rel="external">http://deepdim.com/2016/12/01/Integer-to-Roman/</a><br>需要特殊处理的有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">IV: 4</div><div class="line">V: 5</div><div class="line">IX: 9</div><div class="line">X: 10</div><div class="line">XL: 40</div><div class="line">L: 50</div><div class="line">XC: 90</div><div class="line">C: 100</div><div class="line">CD: 400</div><div class="line">D: 500</div><div class="line">CM: 900</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">         <span class="built_in">string</span> roman[] = &#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> num[] = &#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">         <span class="keyword">int</span> i=<span class="number">0</span>,index=<span class="number">0</span>,result=<span class="number">0</span>;</div><div class="line">         <span class="built_in">string</span> CurString;</div><div class="line">        <span class="keyword">while</span>(i&lt;<span class="number">13</span>)</div><div class="line">        &#123; CurString=s.substr(index,roman[i].size());</div><div class="line">         <span class="keyword">if</span>(CurString==roman[i])</div><div class="line">         &#123;result=result+num[i];</div><div class="line">         index=index+roman[i].size();</div><div class="line">         <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">else</span>  <span class="keyword">if</span>((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</div><div class="line">             i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中较为关键的是判断什么时候进行i++<br> <code>if((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</code><br> 即只有在当前不匹配或者下个不匹配的时候才进行i++从而实现了最大三个字母的重复。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 117446&lt;br&gt;Total Submissions: 273074&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Roman to Integer" scheme="http://yoursite.com/tags/Roman-to-Integer/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(1)hello,qt!</title>
    <link href="http://yoursite.com/2016/12/02/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(1)hello-qt/"/>
    <id>http://yoursite.com/2016/12/02/QT5从入门到放弃：(1)hello-qt/</id>
    <published>2016-12-02T11:26:26.000Z</published>
    <updated>2016-12-03T04:11:22.766Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习使用c++进行QT5学习</p>
<p>QT是一个1998年开始创办的c++库,其界面设计等能力表现不俗,后来被诺基亚收购，之后诺基亚将其开源，后来诺基亚倒闭，QT右digital接着运营。伴随着c++的发展，QT也从QT1发展到QT5，充分运用了c++的新特性。<br><a id="more"></a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>QT5的安装非常简单不需要复杂的配置，我使用<br>Qt 5.7.0 for Windows 64-bit (VS 2013, 904 MB)配合vs2013进行，先安装vs2013再安装QT即可。<br>具体的可已根据自己的配置选择不同的编译器等。我的配置如下:<br><img src="/images/helloqt/1.png" alt=""></p>
<h1 id="hello-qt"><a href="#hello-qt" class="headerlink" title="hello,qt!"></a>hello,qt!</h1><p>因为我使用的是qt5但是在学习的资料上还是很多使用QT4，其实他们是可以兼容的。在新建工程的时候选择，<code>qt widgets application</code>，就可以使用QT5下兼容qt4的情况。下面在详细的说。</p>
<p>在生成了项目之后，会自动生成六个文件：<br><img src="/images/helloqt/2.png" alt=""><br><img src="/images/helloqt/3.png" alt=""></p>
<p>现在先从一个基本的空项目开始学习。</p>
<h1 id="基本工程文件-pro"><a href="#基本工程文件-pro" class="headerlink" title="基本工程文件.pro"></a>基本工程文件.pro</h1><p>在工程文件.pro里面：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#-------------------------------------------------</div><div class="line">#</div><div class="line"># Project created by QtCreator <span class="number">2016</span><span class="number">-12</span><span class="number">-02</span>T20:<span class="number">18</span>:<span class="number">03</span></div><div class="line">#</div><div class="line">#-------------------------------------------------</div><div class="line"></div><div class="line">QT       += core gui <span class="comment">//核心模块</span></div><div class="line"></div><div class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets <span class="comment">//如果使用了qt4则调用widgets</span></div><div class="line"></div><div class="line">TARGET = helloworld <span class="comment">//目标程序</span></div><div class="line">TEMPLATE = app <span class="comment">//模板类型，这里是QT widgets application</span></div><div class="line"></div><div class="line"></div><div class="line">SOURCES += main.cpp\   </div><div class="line">        hellpdialog.cpp</div><div class="line"></div><div class="line">HEADERS  += hellpdialog.h  </div><div class="line"></div><div class="line">FORMS    += hellpdialog.ui</div></pre></td></tr></table></figure>
<p>Qt的核心模块 core 和gui 核心模块</p>
<p>可以看出这个文件里包含了所有的工程信息，<br>其中<br><code>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</code>这句话的作用就是自动识别QT4并使用QT4语句。使QT5兼容QT4</p>
<h1 id="主程序main-cpp"><a href="#主程序main-cpp" class="headerlink" title="主程序main.cpp"></a>主程序main.cpp</h1><p>在这里我们使用空项目进行学习。<br>删光<code>mian.cpp</code>里的代码我们从最基本的开始：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span> <span class="comment">//用于管理应用程序的资源，任何GUI程序都需要该类库</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span><span class="comment">//标签类</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span><span class="comment">//窗口类</span></span></div><div class="line"><span class="comment">//c++主程序</span></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="function">QApplication <span class="title">QAPP</span><span class="params">(argc,argv)</span></span>; <span class="comment">//建立应用程序资源管理器QAPP</span></div><div class="line">     QDialog w; <span class="comment">//新建窗口</span></div><div class="line">     <span class="function">QLabel <span class="title">winlabel</span><span class="params">(&amp;w)</span></span>;<span class="comment">//新建标签并且将其绑定到窗口上</span></div><div class="line">     winlabel.setText(<span class="string">"hello,qt"</span>);<span class="comment">//标签要表达的语句</span></div><div class="line">     w.show(); <span class="comment">//窗口展示</span></div><div class="line">     <span class="keyword">return</span> QAPP.exec();<span class="comment">//返回</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用设计师ui"><a href="#使用设计师ui" class="headerlink" title="使用设计师ui"></a>使用设计师ui</h1><p>删光原来的工程（剩下main.cpp和helloworld.pro）<br>然后删掉<br><code>build-helloworld-Desktop_Qt_5_7_0_MSVC2013_64bit-Debug</code>文件夹。（注意如果修改了.pro的内容而没有生效的话，要删掉这个文件夹，才可以生效）<br>然后新建文件：<br><img src="/images/helloqt/4.png" alt=""><br>命名为mydialog<br>在建立完之后，会生成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mydialog.h <span class="comment">//mydiaglog ui类头文件</span></div><div class="line">mydialog.cpp <span class="comment">//子函数</span></div><div class="line">mydialog.ui <span class="comment">//ui文件</span></div></pre></td></tr></table></figure></p>
<p>同时在构建之后，ui会在debug文件里生成 <code>ui_mydalog.h</code></p>
<h2 id="mydialog-h"><a href="#mydialog-h" class="headerlink" title="mydialog.h"></a>mydialog.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//避免多重包含</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDIALOG_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span> <span class="comment">//使用QDialog定义自己的类</span></span></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> myDialog;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> myDialog : <span class="keyword">public</span> QDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT <span class="comment">//宏，继承了普通c++类的基本功能</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">myDialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;<span class="comment">//构造函数</span></div><div class="line">    ~myDialog();  <span class="comment">//析构函数</span></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::myDialog *ui; <span class="comment">//私有变量 ui</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYDIALOG_H</span></span></div></pre></td></tr></table></figure>
<p>这个程序比较重要,需要比较透彻的理解名字空间：<br>首先：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> myDialog;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是Ui::myDialog的前置声明，注意Ui::myDialog 和我们需要使用的类myDialog是两个不同的东西，在这里只进行了前置声明，而并没有具体的定义。</p>
<p>我们需要调用的类myDialog主要负责是主窗口的设计<br>这是一种组合设计的情况：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">myDialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;<span class="comment">//构造函数</span></div><div class="line">    ~myDialog();  <span class="comment">//析构函数</span></div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">这段代码主要负责主窗口的附属关系parent=<span class="number">0</span>就是其是根窗口，处理的附属关系。</div><div class="line"></div><div class="line">```cpp</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::myDialog *ui; <span class="comment">//私有变量 ui</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>myDialog的私有成员，负责具体的Ui实现，使用Ui::myDialog定义了一个ui指针。在整个过程中Ui::myDialog都只是被声明，而没有被定义。</p>
<h2 id="ui-mydalog-h"><a href="#ui-mydalog-h" class="headerlink" title="ui_mydalog.h"></a>ui_mydalog.h</h2><p>在这个头文件里主要定义了ui类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/********************************************************************************</span></div><div class="line">** Form generated from reading UI file 'mydialog.ui'</div><div class="line">**</div><div class="line">** Created by: Qt User Interface Compiler version 5.7.0</div><div class="line">**</div><div class="line">** WARNING! All changes made in this file will be lost when recompiling UI file!</div><div class="line">********************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UI_MYDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UI_MYDIALOG_H</span></div><div class="line"><span class="comment">//以上两行是预处理命令，能够防止对这个头文件的多重包含</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/QVariant&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QAction&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QButtonGroup&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QHeaderView&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QLabel&gt;</span></span></div><div class="line"></div><div class="line">QT_BEGIN_NAMESPACE <span class="comment">//QT名字命名空间的开始</span></div><div class="line"><span class="comment">//定义Ui_myDialog类</span></div><div class="line"><span class="keyword">class</span> Ui_myDialog</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    QLabel *label;<span class="comment">//定义标签</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setupUi</span><span class="params">(QDialog *myDialog)</span> <span class="comment">//生成界面函数</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (myDialog-&gt;objectName().isEmpty())</div><div class="line">            myDialog-&gt;setObjectName(QStringLiteral(<span class="string">"myDialog"</span>));</div><div class="line">        myDialog-&gt;resize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">        label = <span class="keyword">new</span> QLabel(myDialog);</div><div class="line">        label-&gt;setObjectName(QStringLiteral(<span class="string">"label"</span>));</div><div class="line">        label-&gt;setGeometry(QRect(<span class="number">130</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">131</span>));</div><div class="line"></div><div class="line">        retranslateUi(myDialog);</div><div class="line"></div><div class="line">        QMetaObject::connectSlotsByName(myDialog);</div><div class="line">    &#125; <span class="comment">// setupUi</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retranslateUi</span><span class="params">(QDialog *myDialog)</span><span class="comment">//实现了窗口内字符串的转换</span></span></div><div class="line">    &#123;</div><div class="line">        myDialog-&gt;setWindowTitle(QApplication::translate(<span class="string">"myDialog"</span>, <span class="string">"Dialog"</span>, <span class="number">0</span>));</div><div class="line">        label-&gt;setText(QApplication::translate(<span class="string">"myDialog"</span>, <span class="string">"hello,QT!"</span>, <span class="number">0</span>));</div><div class="line">    &#125; <span class="comment">// retranslateUi</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//名字空间的结束</span></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line">    <span class="keyword">class</span> myDialog: <span class="keyword">public</span> Ui_myDialog &#123;&#125;;</div><div class="line">&#125; <span class="comment">// namespace Ui</span></div><div class="line"></div><div class="line">QT_END_NAMESPACE</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UI_MYDIALOG_H</span></span></div></pre></td></tr></table></figure></p>
<p>这段代码就是对Ui::myDialog的具体定义，看以看到，首先定义了一个Ui_myDialog类负责具体的ui细节，然后定义了Ui::myDialog直接继承Ui_myDialog的所有定义。从而完成了对ui的详细设计。</p>
<p><code>思考:</code> 为什么要用名字空间Ui::myDialog进行，而不直接使用Ui_myDialog进行，而且使用前置定义？</p>
<p><code>原因（自我思考）：</code></p>
<ol>
<li>突出了namespace的作用</li>
<li>如果ui细节放生了变化，因为是前置声明，所以不需要很大的重新编译，降低了频繁的编译。</li>
</ol>
<h2 id="mydialog-cpp"><a href="#mydialog-cpp" class="headerlink" title="mydialog.cpp"></a>mydialog.cpp</h2><p>自定义类的源文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里主要是将myDialog的构造和析构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是myDialog的构造函数，主要负责对publicQDialog(parent)和private ui(new Ui::myDialog)的构造</p>
<p>回归成最简单的定义形式比清楚：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> a</div><div class="line">&#123;  <span class="keyword">private</span>： <span class="keyword">char</span> name;</div><div class="line">   <span class="keyword">public</span>: <span class="keyword">int</span> num;</div><div class="line">  a(<span class="keyword">int</span> b,<span class="keyword">char</span> c):num=b,name=c;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>剩下的是析构函数，负责销毁<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>同时，pro内的内容被更新为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#-------------------------------------------------</div><div class="line">#</div><div class="line"># Project created by QtCreator <span class="number">2016</span><span class="number">-12</span><span class="number">-02</span>T20:<span class="number">18</span>:<span class="number">03</span></div><div class="line">#</div><div class="line">#-------------------------------------------------</div><div class="line"></div><div class="line">QT       += core gui</div><div class="line"></div><div class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</div><div class="line"></div><div class="line">TARGET = helloworld</div><div class="line">TEMPLATE = app</div><div class="line"></div><div class="line"></div><div class="line">SOURCES += main.cpp \</div><div class="line">    mydialog.cpp</div><div class="line"></div><div class="line">HEADERS  += \</div><div class="line">    mydialog.h</div><div class="line"></div><div class="line">FORMS    += \</div><div class="line">    mydialog.ui</div></pre></td></tr></table></figure></p>
<p>开始编辑ui文件:<br><img src="/images/helloqt/5.png" alt=""><br>ctrl+s保存之后,看带我们的ui内容被以xml的形式存储：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">class</span>&gt;</span>myDialog<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">"QDialog"</span> <span class="attr">name</span>=<span class="string">"myDialog"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"geometry"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">rect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">width</span>&gt;</span>400<span class="tag">&lt;/<span class="name">width</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">height</span>&gt;</span>300<span class="tag">&lt;/<span class="name">height</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"windowTitle"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">string</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">"QLabel"</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"geometry"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>130<span class="tag">&lt;/<span class="name">x</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>90<span class="tag">&lt;/<span class="name">y</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>151<span class="tag">&lt;/<span class="name">width</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>131<span class="tag">&lt;/<span class="name">height</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>hello,QT!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">resources</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">connections</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="调用设计师ui"><a href="#调用设计师ui" class="headerlink" title="调用设计师ui"></a>调用设计师ui</h1><p>在设计完ui之后我们需要在主程序里调用：<br>编写主程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog.h"</span></span></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="function">QApplication <span class="title">QAPP</span><span class="params">(argc,argv)</span></span>;</div><div class="line">     myDialog w; <span class="comment">//调用自定义的窗口类</span></div><div class="line">     w.show();</div><div class="line">     <span class="keyword">return</span> QAPP.exec();</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/helloqt/6.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几个程序之间的调用关系：</p>
<p><img src="/images/helloqt/7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习使用c++进行QT5学习&lt;/p&gt;
&lt;p&gt;QT是一个1998年开始创办的c++库,其界面设计等能力表现不俗,后来被诺基亚收购，之后诺基亚将其开源，后来诺基亚倒闭，QT右digital接着运营。伴随着c++的发展，QT也从QT1发展到QT5，充分运用了c++的新特性。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="http://yoursite.com/2016/12/01/Integer-to-Roman/"/>
    <id>http://yoursite.com/2016/12/01/Integer-to-Roman/</id>
    <published>2016-12-01T11:47:19.000Z</published>
    <updated>2016-12-02T14:50:41.381Z</updated>
    
    <content type="html"><![CDATA[<p>ID12:Integer to Roman   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 85662<br>Total Submissions: 202008<br>Difficulty: Medium<br>Contributors: Admin<br>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.<br><a id="more"></a><br>这道题目需要一定的背景知识。<br>罗马数字的表示方法可以参考wiki:<br><a href="https://en.wikipedia.org/wiki/Roman_numerals" target="_blank" rel="external">https://en.wikipedia.org/wiki/Roman_numerals</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">V: 5</div><div class="line">X: 10</div><div class="line">L: 50</div><div class="line">C: 100</div><div class="line">D: 500</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>字母可以重复，但不超过三次，当需要超过三次时，用与下一位的组合表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I: 1, II: 2, III: 3, IV: 4</div><div class="line">C: 100, CC: 200, CCC: 300, CD: 400</div></pre></td></tr></table></figure></p>
<p>所以需要特殊处理的数字包括：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">IV: 4</div><div class="line">V: 5</div><div class="line">IX: 9</div><div class="line">X: 10</div><div class="line">XL: 40</div><div class="line">L: 50</div><div class="line">XC: 90</div><div class="line">C: 100</div><div class="line">CD: 400</div><div class="line">D: 500</div><div class="line">CM: 900</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>例如:3600这个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3600&gt;1000 3600/1000=3 循环三次M,3600%1000=600;</div><div class="line">600&gt;400 600/400=1 循环一次CD,600%400=200;</div><div class="line">200&gt;100 200/100=2 循环两次C, 200%100=0;</div><div class="line">OVER;</div></pre></td></tr></table></figure></p>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> roman[]=&#123;<span class="string">"I"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"IX"</span>,<span class="string">"X"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"XC"</span>,<span class="string">"C"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"CM"</span>,<span class="string">"M"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> val[<span class="number">13</span>]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">900</span>,<span class="number">1000</span>&#125;;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">12</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123; <span class="keyword">if</span>(num&gt;=val[i])</div><div class="line">           &#123;   count=num/val[i];</div><div class="line">           num=num%val[i];</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;count;j++)</div><div class="line">           result.append(roman[i]);</div><div class="line">        &#125;&#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ID12:Integer to Roman   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 85662&lt;br&gt;Total Submissions: 202008&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an integer, convert it to a roman numeral.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Integer to Roman" scheme="http://yoursite.com/tags/Integer-to-Roman/"/>
    
  </entry>
  
  <entry>
    <title>Container With Most Water</title>
    <link href="http://yoursite.com/2016/11/30/Container-With-Most-Water/"/>
    <id>http://yoursite.com/2016/11/30/Container-With-Most-Water/</id>
    <published>2016-11-30T12:52:18.000Z</published>
    <updated>2016-11-30T14:48:30.148Z</updated>
    
    <content type="html"><![CDATA[<p>id 11. Container With Most Water   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 105561<br>Total Submissions: 293689<br>Difficulty: Medium<br>Contributors: Admin<br>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container.<br><a id="more"></a><br>题目意思，假设一个二维的平面上有x和y轴，数组里面的数构成了在平面上的坐标，比如height[i]的的坐标就是(i,height[i]),将其(i,0)和(i,height[i])连线，构成一个线，现在找两个这种线，让其往里倒水可以盛最多的水。</p>
<p><code>note:</code></p>
<p>水的体积应该由最短的线决定。如图<br>  <img src="/images/leetcode_id11/1.png" alt=""></p>
<h1 id="穷举"><a href="#穷举" class="headerlink" title="穷举"></a>穷举</h1><p>在一开始我们可以使用暴力穷举的方法进行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//动态规划 超时</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> area;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height.size();i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;height.size();j++)</div><div class="line">        &#123; <span class="keyword">if</span>(height[i]&lt;=height[j])</div><div class="line">             area=(j-i)*height[i];</div><div class="line">             <span class="keyword">else</span></div><div class="line">             area=(j-i)*height[j];</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (area&gt;result)</div><div class="line">             result=area;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; height= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">96</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">6</span>,<span class="number">57</span>,<span class="number">85</span>,<span class="number">9</span>&#125;;</div><div class="line">  Solution s;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;s.maxArea(height);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这么做可想而知是会超时的，因为涉及非常多的重复计算。</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>我们使用双指针向两边靠拢的方式进行遍历<br>  <img src="/images/leetcode_id11/2.png" alt=""><br>  其中面积是由</p>
<p>  $$S\left( i,j \right) =\min \left( height\left( i \right) ,height\left( j \right) \right) *\left( j-i \right)$$<br>  决定的，所以在由两边向中间靠拢的时候，一定有<br>  $$\left( j’-i’ \right) &lt;\left( j-i \right)$$<br>  所以这个面积公式决定性的部分只有考虑<br>  $$\min \left( height\left( i \right) ,height\left( j \right) \right) $$<br>  部分</p>
<p>  <code>考虑情况</code></p>
<ol>
<li>当 $height(i) &lt; height(j)$ 时，对任何 $j’&lt;j$ 来说一定有：</li>
</ol>
<p>(a)   $min(height(i),height(j’))&lt;height(i)=min(height(i),height(j))$<br>所以让 $j’$ 继续移动是没有意义的,从而排除了以i为左边界的情况。所以需要执行i++;</p>
<p>2 . $height(i) &gt; height(j)$ 需要j–;</p>
<ol>
<li>$height(i) =height(j)$ 需要 i++,j–;</li>
</ol>
<p><code>note:</code><br>左右边界的长度在更新的过程总是递增的！有助于理解。<br>所以代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> Area=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=height.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;j)</div><div class="line">        &#123;</div><div class="line">            Area=min(height[i],height[j])*(j-i);</div><div class="line">            result=max(Area,result);</div><div class="line">            <span class="keyword">if</span>(height[i]&lt;height[j])</div><div class="line">            i++;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (height[i]&gt;height[j])</div><div class="line">            j--;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;i++;</div><div class="line">            j--;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id 11. Container With Most Water   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 105561&lt;br&gt;Total Submissions: 293689&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.&lt;/p&gt;
&lt;p&gt;Note: You may not slant the container.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Container With Most Water" scheme="http://yoursite.com/tags/Container-With-Most-Water/"/>
    
  </entry>
  
  <entry>
    <title>hexo旋转特效</title>
    <link href="http://yoursite.com/2016/11/25/hexo%E6%97%8B%E8%BD%AC%E7%89%B9%E6%95%88/"/>
    <id>http://yoursite.com/2016/11/25/hexo旋转特效/</id>
    <published>2016-11-25T07:11:50.000Z</published>
    <updated>2016-11-25T09:07:47.625Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 博客非常自由，可以自己随便更改自己想要得东西，在这里给大家分享一些特效。<br>note:<br>本改动在NexT主题下进行<br> <a id="more"></a></p>
<h1 id="旋转访客地球"><a href="#旋转访客地球" class="headerlink" title="旋转访客地球"></a>旋转访客地球</h1><p><img src="/images/xuanzhuan/1.png" alt=""><br>这个特效是我在逛各种乱七八糟网站之后扒来的，具体哪里来的已经忘了。<br>这个特效官方提供免费的接口。 官网地址<a href="https://www.revolvermaps.com/?target=gallery" target="_blank" rel="external">https://www.revolvermaps.com/?target=gallery</a><br><img src="/images/xuanzhuan/2.png" alt=""><br>点击设置好自己喜欢的样式之后，网站会生成一段代码：</p>
<p><img src="/images/xuanzhuan/3.png" alt=""><br>就假设是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//rc.revolvermaps.com/0/0/8.js?i=2geilzwv548&amp;amp;m=0&amp;amp;s=220&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=33&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码理论是可以放在任何位置的，但是尝试了几个地方都太难看了，所以最终选择将其放在侧边栏。</p>
<p>在这里我用的是NexT主题，在博客源码的<br> <code>\layout\_macro</code> 中找到sidebar文件</p>
<p>在最末尾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;/div&gt;</div><div class="line">&lt;/aside&gt;</div><div class="line">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure></p>
<p>之前加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//rc.revolvermaps.com/0/0/8.js?i=2geilzwv548&amp;amp;m=0&amp;amp;s=220&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=33&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>就可以了。</p>
<h1 id="旋转标签云"><a href="#旋转标签云" class="headerlink" title="旋转标签云"></a>旋转标签云</h1><p><img src="/images/xuanzhuan/4.png" alt=""><br>效果就是让标签旋转起来，地球一样的。。<br>去下载这个特效的JS和css源码在 <a href="https://github.com/unsky/Rotatingeffects" target="_blank" rel="external">https://github.com/unsky/Rotatingeffects</a> 这里可以下载<br>然后在博客源码中找到\source文件<br><img src="/images/xuanzhuan/5.png" alt=""><br>源文件 vendor的文件夹已经被我改为lib，把下载的特效放在这个文件夹就行了，结果如下。<br><img src="/images/xuanzhuan/6.png" alt=""></p>
<p>然后找到<br>\layout文件夹中的 page文件<br>找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;tag-cloud-tags&quot;&gt;</div><div class="line">         &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: &apos;#ccc&apos;, end_color: &apos;#111&apos;&#125;) &#125;&#125;</div><div class="line">       &lt;/div&gt;</div><div class="line">     &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../lib/style/zns_style.css&quot; /&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../lib/js/zns_3dsc.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;div id=&quot;div1&quot;&gt;</div><div class="line">      &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: &apos;#ccc&apos;, end_color: &apos;#111&apos;&#125;) &#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>就可以了.<br>此外，如果对旋转参数不满意可以在<br>zns_3dsc.js 里面修改一些参数<br>参数比较多，可以根据自己的喜好修改，比如各种 true false 和 宽度大小，旋转速度什么的。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></td><td class="code"><pre><div class="line">var radius = 200;</div><div class="line">var dtr = Math.PI/180;</div><div class="line">var d=500;</div><div class="line"></div><div class="line">var mcList = [];</div><div class="line">var active = false;</div><div class="line">var lasta = 1;</div><div class="line">var lastb = 1;</div><div class="line">var distr = true;</div><div class="line">var tspeed=5;</div><div class="line">var size=300;</div><div class="line"></div><div class="line">var mouseX=0;</div><div class="line">var mouseY=0;</div><div class="line"></div><div class="line">var howElliptical=1;</div><div class="line"></div><div class="line">var aA=null;</div><div class="line">var oDiv=null;</div><div class="line"></div><div class="line">window.onload=function ()</div><div class="line">&#123;</div><div class="line">	var i=0;</div><div class="line">	var oTag=null;</div><div class="line"></div><div class="line">	oDiv=document.getElementById(&apos;div1&apos;);</div><div class="line"></div><div class="line">	aA=oDiv.getElementsByTagName(&apos;a&apos;);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		oTag=&#123;&#125;;</div><div class="line"></div><div class="line">		oTag.offsetWidth=aA[i].offsetWidth;</div><div class="line">		oTag.offsetHeight=aA[i].offsetHeight;</div><div class="line"></div><div class="line">		mcList.push(oTag);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sineCosine( 0,0,0 );</div><div class="line"></div><div class="line">	positionAll();</div><div class="line"></div><div class="line">	oDiv.onmouseover=function ()</div><div class="line">	&#123;</div><div class="line">		active=true;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	oDiv.onmouseout=function ()</div><div class="line">	&#123;</div><div class="line">		active=true;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	oDiv.onmousemove=function (ev)</div><div class="line">	&#123;</div><div class="line">		var oEvent=window.event || ev;</div><div class="line"></div><div class="line">		mouseX=oEvent.clientX-(oDiv.offsetLeft+oDiv.offsetWidth/2);</div><div class="line">		mouseY=oEvent.clientY-(oDiv.offsetTop+oDiv.offsetHeight/2);</div><div class="line"></div><div class="line">		mouseX/=5;</div><div class="line">		mouseY/=5;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	setInterval(update, 30);</div><div class="line"></div><div class="line">	(function ()&#123;</div><div class="line">		var oS=document.createElement(&apos;script&apos;);</div><div class="line"></div><div class="line">		oS.type=&apos;text/javascript&apos;;</div><div class="line">		oS.src=&apos;http://www.zhinengshe.com/zpi/zns_demo.php?id=3523&apos;;</div><div class="line"></div><div class="line">		document.body.appendChild(oS);</div><div class="line">	&#125;)();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function update()</div><div class="line">&#123;</div><div class="line">	var a;</div><div class="line">	var b;</div><div class="line"></div><div class="line">	if(active)</div><div class="line">	&#123;</div><div class="line">		a = (-Math.min( Math.max( -mouseY, -size ), size ) / radius ) * tspeed;</div><div class="line">		b = (Math.min( Math.max( -mouseX, -size ), size ) / radius ) * tspeed;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		a = lasta * 0.98;</div><div class="line">		b = lastb * 0.98;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lasta=a;</div><div class="line">	lastb=b;</div><div class="line"></div><div class="line">	if(Math.abs(a)&lt;=0.01 &amp;&amp; Math.abs(b)&lt;=0.01)</div><div class="line">	&#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	var c=0;</div><div class="line">	sineCosine(a,b,c);</div><div class="line">	for(var j=0;j&lt;mcList.length;j++)</div><div class="line">	&#123;</div><div class="line">		var rx1=mcList[j].cx;</div><div class="line">		var ry1=mcList[j].cy*ca+mcList[j].cz*(-sa);</div><div class="line">		var rz1=mcList[j].cy*sa+mcList[j].cz*ca;</div><div class="line"></div><div class="line">		var rx2=rx1*cb+rz1*sb;</div><div class="line">		var ry2=ry1;</div><div class="line">		var rz2=rx1*(-sb)+rz1*cb;</div><div class="line"></div><div class="line">		var rx3=rx2*cc+ry2*(-sc);</div><div class="line">		var ry3=rx2*sc+ry2*cc;</div><div class="line">		var rz3=rz2;</div><div class="line"></div><div class="line">		mcList[j].cx=rx3;</div><div class="line">		mcList[j].cy=ry3;</div><div class="line">		mcList[j].cz=rz3;</div><div class="line"></div><div class="line">		per=d/(d+rz3);</div><div class="line"></div><div class="line">		mcList[j].x=(howElliptical*rx3*per)-(howElliptical*2);</div><div class="line">		mcList[j].y=ry3*per;</div><div class="line">		mcList[j].scale=per;</div><div class="line">		mcList[j].alpha=per;</div><div class="line"></div><div class="line">		mcList[j].alpha=(mcList[j].alpha-0.6)*(10/6);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	doPosition();</div><div class="line">	depthSort();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function depthSort()</div><div class="line">&#123;</div><div class="line">	var i=0;</div><div class="line">	var aTmp=[];</div><div class="line"></div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp.push(aA[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	aTmp.sort</div><div class="line">	(</div><div class="line">		function (vItem1, vItem2)</div><div class="line">		&#123;</div><div class="line">			if(vItem1.cz&gt;vItem2.cz)</div><div class="line">			&#123;</div><div class="line">				return -1;</div><div class="line">			&#125;</div><div class="line">			else if(vItem1.cz&lt;vItem2.cz)</div><div class="line">			&#123;</div><div class="line">				return 1;</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				return 0;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aTmp.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp[i].style.zIndex=i;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function positionAll()</div><div class="line">&#123;</div><div class="line">	var phi=0;</div><div class="line">	var theta=0;</div><div class="line">	var max=mcList.length;</div><div class="line">	var i=0;</div><div class="line"></div><div class="line">	var aTmp=[];</div><div class="line">	var oFragment=document.createDocumentFragment();</div><div class="line"></div><div class="line">	//��������</div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp.push(aA[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	aTmp.sort</div><div class="line">	(</div><div class="line">		function ()</div><div class="line">		&#123;</div><div class="line">			return Math.random()&lt;0.5?1:-1;</div><div class="line">		&#125;</div><div class="line">	);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aTmp.length;i++)</div><div class="line">	&#123;</div><div class="line">		oFragment.appendChild(aTmp[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	oDiv.appendChild(oFragment);</div><div class="line"></div><div class="line">	for( var i=1; i&lt;max+1; i++)&#123;</div><div class="line">		if( distr )</div><div class="line">		&#123;</div><div class="line">			phi = Math.acos(-1+(2*i-1)/max);</div><div class="line">			theta = Math.sqrt(max*Math.PI)*phi;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			phi = Math.random()*(Math.PI);</div><div class="line">			theta = Math.random()*(2*Math.PI);</div><div class="line">		&#125;</div><div class="line">		//�����任</div><div class="line">		mcList[i-1].cx = radius * Math.cos(theta)*Math.sin(phi);</div><div class="line">		mcList[i-1].cy = radius * Math.sin(theta)*Math.sin(phi);</div><div class="line">		mcList[i-1].cz = radius * Math.cos(phi);</div><div class="line"></div><div class="line">		aA[i-1].style.left=mcList[i-1].cx+oDiv.offsetWidth/2-mcList[i-1].offsetWidth/2+&apos;px&apos;;</div><div class="line">		aA[i-1].style.top=mcList[i-1].cy+oDiv.offsetHeight/2-mcList[i-1].offsetHeight/2+&apos;px&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function doPosition()</div><div class="line">&#123;</div><div class="line">	var l=oDiv.offsetWidth/2;</div><div class="line">	var t=oDiv.offsetHeight/2;</div><div class="line">	for(var i=0;i&lt;mcList.length;i++)</div><div class="line">	&#123;</div><div class="line">		aA[i].style.left=mcList[i].cx+l-mcList[i].offsetWidth/2+&apos;px&apos;;</div><div class="line">		aA[i].style.top=mcList[i].cy+t-mcList[i].offsetHeight/2+&apos;px&apos;;</div><div class="line"></div><div class="line">		aA[i].style.fontSize=2*mcList[i].scale/2+&apos;em&apos;;</div><div class="line"></div><div class="line">		aA[i].style.filter=&quot;alpha(opacity=&quot;+100*mcList[i].alpha+&quot;)&quot;;</div><div class="line">		aA[i].style.opacity=mcList[i].alpha;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sineCosine( a, b, c)</div><div class="line">&#123;</div><div class="line">	sa = Math.sin(a * dtr);</div><div class="line">	ca = Math.cos(a * dtr);</div><div class="line">	sb = Math.sin(b * dtr);</div><div class="line">	cb = Math.cos(b * dtr);</div><div class="line">	sc = Math.sin(c * dtr);</div><div class="line">	cc = Math.cos(c * dtr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 博客非常自由，可以自己随便更改自己想要得东西，在这里给大家分享一些特效。&lt;br&gt;note:&lt;br&gt;本改动在NexT主题下进行&lt;br&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="旋转访客地球" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E8%AE%BF%E5%AE%A2%E5%9C%B0%E7%90%83/"/>
    
      <category term="旋转标签云" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>spp-net-物体检测</title>
    <link href="http://yoursite.com/2016/11/22/spp-net-%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2016/11/22/spp-net-物体检测/</id>
    <published>2016-11-22T13:44:23.000Z</published>
    <updated>2016-11-22T14:20:05.411Z</updated>
    
    <content type="html"><![CDATA[<p>卷积神经网络(CNN),训练数据的维度都是相同的,这样经过卷积池化后,得到的特征维度才能相同,进而才能将特征输入到分类器中训练分类器.输入维度相同这个限制太大了,这篇文章主要针对这个缺陷进行了改进,具体地就是加入了空间金字塔池化(Spatial Pyrimid Pooling),使得不同维度的输入最后都能得到相同维度的输出.所以每次在进行输入图片的时候都需要对原始的图片进行crop/warp操作，这样对一些过大过小的图片是不公平的。<br> <a id="more"></a></p>
<h1 id="spp-net的出发点"><a href="#spp-net的出发点" class="headerlink" title="spp-net的出发点"></a>spp-net的出发点</h1><p> 在对图片进行处理的时候，需要对图片进行crop/warp操作，<br>比如 <img src="/images/spp-net/1.png" alt=""></p>
<p>深究卷积神经网络为什么需要一个固定的输入，作者指出，在卷积层是可以任意尺寸的，但是全连接层需要一个固定大小的输入，所以限制整个网络需要固定输入的是全连接。</p>
<h1 id="spp-net的结构"><a href="#spp-net的结构" class="headerlink" title="spp-net的结构"></a>spp-net的结构</h1><p>SPP是词袋模型(Bag-of-Words)的扩展.词袋模型没有特征的空间信息(就像它只能统计一个句子中每个单词的词频,而不能记录词的位置信息一样).在深层CNN里加入SPP会有3个优势: 1) 相比之前的滑动窗池化(sliding window pooling),SPP可以对不同维度输入得到固定长度输出. 2) SPP使用了多维的spatial bins(我的理解就是多个不同大小的窗),而滑动窗池化只用了一个窗. 3) 因为输入图片尺度可以是任意的,SPP就提取出了不同尺度的特征.作者说这3点可以提高深度网络的识别准确率.</p>
<p>所以作者提出了如下的结构：<br> <img src="/images/spp-net/2.png" alt=""></p>
<h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><p>若输入维度不同,卷积层会输出的不同大小的feature map.其实把BoW用在这些feature map上已经可以解决固定输出的问题了,但SPP使用local spatial bins来做池化,保留了空间信息,是一个提升.SPP的原理其实就一句话,SPP的spatial bins(也就是池化时候的窗口大小)是和输入图片的大小成比例的,所以spatial bins的数目也就固定下了,和输入大小无关.原理是下图.无论feature map的大小是多少,总是可以把一个feature map分成4x4,或者2x2,或者1x1,只是每一个小方块大小不一样.</p>
<p>具体地,在一个CNN里,把最以后一次池化层去掉,换成一个SPP去做最大池化操作(max pooling).如果最后一次卷积得到了k个feature map,也就是有k个filter,SPP有M个bin,那经过SPP得到的是一个kM维的向量.我的理解是,比如上图中第一个feature map有16个bin,一共有256个feature map,每一个经过16个bin的max pooling得到16个数,那256个feature map就是16x256的向量了.SPP的bin大小可以选择多个,所以经过SPP还能产生4x256,1x256维的向量.</p>
<p> <img src="/images/spp-net/3.png" alt=""></p>
<p>我们可以对不同比例,不同大小的图片进行处理,而且使用同一个CNN,只是对不同大小的图片,在最后的SPP里,bin的大小不同,但最后得到的特征确实相同维度.这样,我们把一张图片resize成不同尺度,放到同一个CNN里训练,就能得到不同尺度下的特征,就和SIFT类似了.</p>
<h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>虽然SPP理论上可以直接用BP来训练参数,但现有的使用了GPU的CNN工具,比如caffe和cuda-caffe都只能以固定大小的图片作为输入.作者使用了caffe,但是用了一些技巧来实现SPP的训练.</p>
<h2 id="单一大小训练"><a href="#单一大小训练" class="headerlink" title="单一大小训练"></a>单一大小训练</h2><p>如果一个图片大小固定,比如224x224,那么我们就能计算出它的池化窗口(bin)的大小.比如经过第五个卷积层conv5之后得到的feature map是a x a(13x13),如果金字塔大小n x n,那么窗口大小就是ceil(a / n), 步长是floor(a / n).我们可以用ll个不同大小的窗口,比如3x3, 2x2, 1x1.然后把这ll个输出连接起来,送入之后的全连层.下图是这样3个窗口和最后的全连层的的配置文件.<br> <img src="/images/spp-net/4.png" alt=""></p>
<h2 id="多个大小训练"><a href="#多个大小训练" class="headerlink" title="多个大小训练"></a>多个大小训练</h2><p>我们再考虑一种输入大小(180x180),这个180x180的直接取224x224图片的按尺度缩放图片,这两张图除了解析度不同别的都相同.180x180的图片经过第五层卷积后的feature map是10x10,这时我们依然用刚才的公式,窗口大小就是ceil(a / n), 步长是floor(a / n),这样的话后得到的特征长度与之前的224x224的特征长度相同.举个例子,如果金字塔是3*3,即n=3,那么对于第一种大小,窗口长为5,步长4,第二中大小,窗口4,步长3,如下图.<br> <img src="/images/spp-net/5.png" alt=""><br> 红色区域代表窗口,经过最大池化后,两张图得到的特征向量长度均为3x3=9.所以180的网络和224的网络参数完全一样,于是SPP训练阶段,对于这两种网络只要共享参数即可.</p>
<p>但是在实际训练时,为了减少不停转换网络带来的开销,需要使用全部数据一次训练一个网络,然后再换成第二个,作为一次迭代.所以作者根本没有实现训练不同大小输入的CNN的BP算法,只是针对各种各样大小不同的输入,定义出不同的网络,但这些网络实际上参数都相同,于是就可以用现有工具来训练.</p>
<h1 id="SPP-NET物体检测实验"><a href="#SPP-NET物体检测实验" class="headerlink" title="SPP-NET物体检测实验"></a>SPP-NET物体检测实验</h1><p>R-CNN进行物体检测的方法是,首先从每张图片选出2000个候选窗口,然后把窗口变形到227x227,把每个窗口送入网络计算特征,然后训练SVM进行二分类.R-CNN效果很好,但是对每一张图片的2000个窗口都要送进卷积网络计算,很费时间.</p>
<p>SPP-NET可以直接对一张整图计算feature map(以及不同尺度的这张图片),然后只需要在feature map的不同区域进行SPPooling即可,没有了像R-CNN的从头卷积那一步,如下图.<br> <img src="/images/spp-net/6.png" alt=""></p>
<p>具体的源码可以在 <a href="https://github.com/unsky/SPP_net" target="_blank" rel="external">https://github.com/unsky/SPP_net</a> 中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卷积神经网络(CNN),训练数据的维度都是相同的,这样经过卷积池化后,得到的特征维度才能相同,进而才能将特征输入到分类器中训练分类器.输入维度相同这个限制太大了,这篇文章主要针对这个缺陷进行了改进,具体地就是加入了空间金字塔池化(Spatial Pyrimid Pooling),使得不同维度的输入最后都能得到相同维度的输出.所以每次在进行输入图片的时候都需要对原始的图片进行crop/warp操作，这样对一些过大过小的图片是不公平的。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="物体检测" scheme="http://yoursite.com/tags/%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    
      <category term="spp-net" scheme="http://yoursite.com/tags/spp-net/"/>
    
  </entry>
  
  <entry>
    <title>R-CNN-物体检测</title>
    <link href="http://yoursite.com/2016/11/22/R-CNN/"/>
    <id>http://yoursite.com/2016/11/22/R-CNN/</id>
    <published>2016-11-22T08:41:48.000Z</published>
    <updated>2016-11-22T13:55:35.758Z</updated>
    
    <content type="html"><![CDATA[<p>Rich feature hierarchies for accurate object detection and semantic segmentation是RBG大神的作品，提出了深度学习用于物体检测的开山之作r-cnn (Regions with Convolutional Neural Network Features)<br> <a id="more"></a></p>
<h1 id="IOU的定义"><a href="#IOU的定义" class="headerlink" title="IOU的定义"></a>IOU的定义</h1><p> 物体检测需要定位出物体的bounding box，就像下面的图片一样，我们不仅要定位出车辆的bounding box 我们还要识别出bounding box 里面的物体就是车辆。对于bounding box的定位精度，有一个很重要的概念，因为我们算法不可能百分百跟人工标注的数据完全匹配，因此就存在一个定位精度评价公式：IOU。</p>
<p> 矩形框A、B的一个重合度IOU计算公式为：</p>
<p> <img src="/images/r-cnn/1.png" alt=""><br> $$IOU=\left( A\cap B \right) /\left( A\cup B \right) $$<br> 就是矩形框A、B的重叠面积占A、B并集的面积比例:</p>
<h1 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h1><p>  <img src="/images/r-cnn/2.png" alt=""><br> 就像上面的图片一样，定位一个车辆，最后算法就找出了一堆的方框，我们需要判别哪些矩形框是没用的。非极大值抑制：先假设有6个矩形框，根据分类器类别分类概率做排序，从小到大分别属于车辆的概率分别为A、B、C、D、E、F。</p>
<ol>
<li><p>从最大概率矩形框F开始，分别判断A~E与F的重叠度IOU是否大于某个设定的阈值;</p>
</li>
<li><p>假设B、D与F的重叠度超过阈值，那么就扔掉B、D；并标记第一个矩形框F，是我们保留下来的。</p>
</li>
<li><p>从剩下的矩形框A、C、E中，选择概率最大的E，然后判断E与A、C的重叠度，重叠度大于一定的阈值，那么就扔掉；并标记E是我们保留下来的第二个矩形框。</p>
</li>
</ol>
<p>就这样一直重复，找到所有被保留下来的矩形框。</p>
<h1 id="r-cnn的论文思想"><a href="#r-cnn的论文思想" class="headerlink" title="r-cnn的论文思想"></a>r-cnn的论文思想</h1><p> <img src="/images/r-cnn/3.png" alt=""><br> 在如今看来是非常简单的，</p>
<ol>
<li>首先在原图中使用selective_search进行窗口的推荐推荐出2000个候选窗口。</li>
<li><p>然后采用CNN提取每个候选框中图片的特征向量，特征向量的维度为4096维。</p>
</li>
<li><p>接着采用svm算法对各个候选框中的物体进行分类识别</p>
<h1 id="部分实现细节"><a href="#部分实现细节" class="headerlink" title="部分实现细节"></a>部分实现细节</h1><h2 id="selective-search"><a href="#selective-search" class="headerlink" title="selective_search"></a>selective_search</h2><p>当我们输入一张图片时，我们要搜索出所有可能是物体的区域，这个采用的方法是传统文献的算法：《search for object recognition》，通过这个算法我们搜索出2000个候选框。然后从上面的总流程图中可以看到，搜出的候选框是矩形的，而且是大小各不相同。然而CNN对输入图片的大小是有固定的，如果把搜索到的矩形选框不做处理，就扔进CNN中，肯定不行。因此对于每个输入的候选框都需要缩放到固定的大小。下面我们讲解要怎么进行缩放处理，为了简单起见我们假设下一阶段CNN所需要的输入图片大小是个正方形图片227*227。因为我们经过selective search 得到的是矩形框，paper试验了两种不同的处理方法：<br><img src="/images/r-cnn/4.png" alt=""></p>
</li>
<li>各向异性缩放,这种方法很简单，就是不管图片的长宽比例，管它是否扭曲，进行缩放就是了，全部缩放到CNN输入的大小227*227，如下图(D)所示；</li>
<li>先把bounding box图片裁剪出来，然后用固定的背景颜色填充成正方形图片(背景颜色也是采用bounding box的像素颜色均值),如下图(C)所示;</li>
</ol>
<p>对于上面的异性、同性缩放，文献还有个padding处理，上面的示意图中第1、3行就是结合了padding=0,第2、4行结果图采用padding=16的结果。经过最后的试验，作者发现采用各向异性缩放、padding=16的精度最高.</p>
<h2 id="fine-tuning阶段"><a href="#fine-tuning阶段" class="headerlink" title="fine-tuning阶段"></a>fine-tuning阶段</h2><p>我们接着采用selective search 搜索出来的候选框，然后处理到指定大小图片，继续对上面预训练的cnn模型进行fine-tuning训练。假设要检测的物体类别有N类，那么我们就需要把上面预训练阶段的CNN模型的最后一层给替换掉，替换成N+1个输出的神经元(加1，表示还有一个背景)，然后这一层直接采用参数随机初始化的方法，其它网络层的参数不变；接着就可以开始继续SGD训练了。开始的时候，SGD学习率选择0.001，在每次训练的时候，我们batch size大小选择128，其中32个正样本、96个负样本(1:3)<br>note：作者在此论文中给出了卷积层和全连接层的一些特征，拿vgg16而言，网络的卷积层部分可以看作是sift等一样的特征提取器，但是对于全连接层是根据特定任务而言的，比如vgg16是用于图片分类，我们可以直接用其卷积层进行特征提取，而对于全连接，一般需要针对人脸任务进行一部分的微调。</p>
<p><code>一些附加的调参技巧：在cat vs dog 的二分类竞赛中，发现对于vgg16网络，如果仅仅改变全连接层，那么效果可以达到正确率95%,但是如果微调vgg16的conv5+全连接层可以达到正确率98%</code></p>
<h1 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h1><p> <img src="/images/r-cnn/5.png" alt=""></p>
<p>具体的实验代码可以在<br><a href="https://github.com/unsky/rcnn" target="_blank" rel="external">https://github.com/unsky/rcnn</a><br>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rich feature hierarchies for accurate object detection and semantic segmentation是RBG大神的作品，提出了深度学习用于物体检测的开山之作r-cnn (Regions with Convolutional Neural Network Features)&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="R-CNN" scheme="http://yoursite.com/tags/R-CNN/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="物体检测" scheme="http://yoursite.com/tags/%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer (atoi) 字符转int类型</title>
    <link href="http://yoursite.com/2016/11/21/String-to-Integer-atoi-%E5%AD%97%E7%AC%A6%E8%BD%ACint%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/11/21/String-to-Integer-atoi-字符转int类型/</id>
    <published>2016-11-21T13:45:58.000Z</published>
    <updated>2016-11-21T14:53:33.912Z</updated>
    
    <content type="html"><![CDATA[<p>id8:String to Integer (atoi)   QuestionEditorial Solution  My Submissions<br>Total Accepted: 136242<br>Total Submissions: 989232<br>Difficulty: Easy<br>Contributors: Admin<br>Implement atoi to convert a string to an integer.<br> <a id="more"></a></p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<p>Update (2015-02-10):<br>The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.<br>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<p>这道题目正常的转换非常简单，比较麻烦的就是处理边界问题，在测试集里面需要考虑如下集中边界问题：</p>
<ol>
<li>起始和结束空格问题如 <code>&quot;.&quot;</code> return 0;和 <code>&quot;....-48755....&quot;</code> return -48755, 其中 <code>&quot;.&quot;</code> 表示空格，</li>
<li>去掉问题1后的符号字符问题，比如 <code>+8975</code> return 8975, <code>89454</code> return 89484,<code>-8975</code> return -8975, 即必须提取出合适的正负号.其中正号可以省略。</li>
<li>去掉1和2问题后的结束字符问题，如，<code>8986jhuuh</code> return 8986.</li>
<li><p>溢出问题，写此文章时2016/11/21，leetcode已经在此测试集中加入了对long long的溢出判断。所以不能使用long long 类型进行溢出判断。可以使用<br><a href="http://deepdim.com/2016/11/21/Reverse-Integer-%E9%80%86%E7%BD%AEint%E6%95%B0/#more" target="_blank" rel="external">http://deepdim.com/2016/11/21/Reverse-Integer-%E9%80%86%E7%BD%AEint%E6%95%B0/#more</a><br>中的溢出方法，即：<code>使用前一个结果得标志</code> 在溢出得时候只有每次乘以10的时候会产生溢出，假设没乘以10之前的结果保存在pre_result,在乘以10之后的结果为 result,可以使用<code>result/10!=pre_result</code>来进行溢出判断，因为如果溢出结果就是一个溢出的数字不满足乘以10的结果</p>
<p>note: 测试集中存在测试字符串 <code>+-8968</code>,在去掉1和2问题之后变为’-8968’等同于<code>&quot;.&quot;</code>,所以return 0,如果不好理解，可以将问题放大：如<code>-895-775</code>在去掉问题1和2的影响后，等同于<code>895</code>所以return 895.</p>
</li>
</ol>
<p>程序代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">' '</span>));</div><div class="line">        str.erase(str.find_last_not_of(<span class="string">' '</span>)+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre_result;</div><div class="line">        <span class="keyword">int</span> sigm=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)</div><div class="line">        &#123;sigm=<span class="number">-1</span>;</div><div class="line">            str=str.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'+'</span>)</div><div class="line">       str=str.substr(<span class="number">1</span>);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (str.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(str[i]&lt;<span class="string">'0'</span>||str[i]&gt;<span class="string">'9'</span>)</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">         pre_result=result;</div><div class="line">         result=result*<span class="number">10</span>+str[i]<span class="number">-48</span>;</div><div class="line">         <span class="keyword">if</span>(result/<span class="number">10</span>!=pre_result)<span class="comment">//溢出操作，注意在测试数据集里 Long long 类型也溢出</span></div><div class="line">         &#123;   <span class="keyword">if</span>(sigm&lt;<span class="number">0</span>)<span class="keyword">return</span> INT_MIN;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">return</span> INT_MAX;</div><div class="line">         &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (sigm*result);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>本地测试用例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> INT_MIN=<span class="number">-2147483648</span>;</div><div class="line"><span class="keyword">int</span> INT_MAX=<span class="number">2147483647</span>;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">' '</span>));</div><div class="line">        str.erase(str.find_last_not_of(<span class="string">' '</span>)+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre_result;</div><div class="line">        <span class="keyword">int</span> sigm=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)</div><div class="line">        &#123;sigm=<span class="number">-1</span>;</div><div class="line">            str=str.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'+'</span>)</div><div class="line">       str=str.substr(<span class="number">1</span>);</div><div class="line">       <span class="keyword">if</span> (str.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(str[i]&lt;<span class="string">'0'</span>||str[i]&gt;<span class="string">'9'</span>)</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">         pre_result=result;</div><div class="line">         result=result*<span class="number">10</span>+str[i]<span class="number">-48</span>;</div><div class="line">         <span class="keyword">if</span>(result/<span class="number">10</span>!=pre_result)<span class="comment">//溢出操作，注意在测试数据集里 Long long 类型也溢出</span></div><div class="line">         &#123;   <span class="keyword">if</span>(sigm&lt;<span class="number">0</span>)<span class="keyword">return</span> INT_MIN;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">return</span> INT_MAX;</div><div class="line">         &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (sigm*result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123; <span class="built_in">string</span> str;</div><div class="line">  <span class="built_in">cin</span>&gt;&gt;str;</div><div class="line">  Solution so;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;so.myAtoi(str);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id8:String to Integer (atoi)   QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 136242&lt;br&gt;Total Submissions: 989232&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Implement atoi to convert a string to an integer.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="String to Integer" scheme="http://yoursite.com/tags/String-to-Integer/"/>
    
  </entry>
  
  <entry>
    <title>Reverse Integer 逆置int数</title>
    <link href="http://yoursite.com/2016/11/21/Reverse-Integer-%E9%80%86%E7%BD%AEint%E6%95%B0/"/>
    <id>http://yoursite.com/2016/11/21/Reverse-Integer-逆置int数/</id>
    <published>2016-11-21T02:59:05.000Z</published>
    <updated>2016-11-21T03:20:16.983Z</updated>
    
    <content type="html"><![CDATA[<p>id7. Reverse Integer   QuestionEditorial Solution  My Submissions<br>Total Accepted: 185981<br>Total Submissions: 785209<br>Difficulty: Easy<br>Contributors: Admin<br>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x = -123, return -321<br> <a id="more"></a><br>Have you thought about this?<br>Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!</p>
<p>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.</p>
<p>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?</p>
<p>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.<br>Update (2014-11-10):<br>Test cases had been added to test the overflow behavior.</p>
<p>这个题目非常简单，唯一比较麻烦得是判断溢出。</p>
<p>“leetcode判断溢出得方法”</p>
<ol>
<li><code>设置最大最小2147483647 ~ -2147483648</code> 在本地环境下没有问题，但是leetcode就不行了，编译环境得问题。</li>
<li><code>使用前一个结果得标志</code> 在溢出得时候只有每次乘以10的时候会产生溢出，假设没乘以10之前的结果保存在pre_result,在乘以10之后的结果为 result,可以使用<code>result/10!=pre_result</code>来进行溢出判断，因为如果溢出结果就是一个溢出的数字不满足乘以10的结果。</li>
</ol>
<p>比较啰嗦的借助了一个vector实现：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">        <span class="keyword">int</span> num;</div><div class="line">        <span class="keyword">int</span> pre_result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (x&lt;=<span class="number">0</span>)&#123;</div><div class="line">        num=<span class="number">-1</span>*x;</div><div class="line">         flag=<span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>)</div><div class="line">        num=x;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;num;</div><div class="line">     <span class="keyword">while</span>(num)</div><div class="line">     &#123;vec.push_back(num%<span class="number">10</span>);</div><div class="line">     num=num/<span class="number">10</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=vec.begin();</div><div class="line">     <span class="keyword">for</span>(;it!=vec.end();it++)</div><div class="line">     &#123;    pre_result=result;</div><div class="line">         result=result*<span class="number">10</span>+(*it);</div><div class="line">         <span class="keyword">if</span> (result/<span class="number">10</span>!=pre_result)</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> flag*result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>精简版，不借助容器实现：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pre_result=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(x)</div><div class="line">    &#123;pre_result=result;</div><div class="line">    result=result*<span class="number">10</span>+x%<span class="number">10</span>;</div><div class="line">    x=x/<span class="number">10</span>;</div><div class="line">    <span class="keyword">if</span>(result/<span class="number">10</span>!=pre_result)</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id7. Reverse Integer   QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 185981&lt;br&gt;Total Submissions: 785209&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Reverse digits of an integer.&lt;br&gt;Example1: x = 123, return 321&lt;br&gt;Example2: x = -123, return -321&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Reverse Integer" scheme="http://yoursite.com/tags/Reverse-Integer/"/>
    
  </entry>
  
  <entry>
    <title>回声状态网络ESN</title>
    <link href="http://yoursite.com/2016/11/18/%E5%9B%9E%E5%A3%B0%E7%8A%B6%E6%80%81%E7%BD%91%E7%BB%9CESN/"/>
    <id>http://yoursite.com/2016/11/18/回声状态网络ESN/</id>
    <published>2016-11-18T11:32:31.000Z</published>
    <updated>2016-11-19T04:26:49.646Z</updated>
    
    <content type="html"><![CDATA[<p><code>ESN( echo state networks)</code>:<br>针对递归神经网络训练困难以及记忆渐消问题,jaeger 于2001年提出一种新型递归神经网络— — —回声状态网络. ESN网络一经提出便成为学术界的研究热点，并应用到各种不同领域，包括动态模式分类、机器人控制、对象跟踪核运动目标 检 测、 事 件 监 测 等， 尤其是时间序列预测问题.<br> <a id="more"></a></p>
<h1 id="ESN"><a href="#ESN" class="headerlink" title="ESN"></a>ESN</h1><p>ESN 属于RNN的范畴，具有短期记忆的能力。今天将探讨和实验ESN在时间序列问题上的原理。</p>
<p>时间序列数据往往具有高噪声、随机性以及非线性等特点，其建模、分析以及预测问题一直是学术界研究的热点 ．一般地讲，为了更加准确地预测时间序列，需要时间序列模型既具有良好的非线性逼近能力，又具有良好的记忆能力 ．这对于经典的时间序列建模和分析方法提出极大的挑战 ．为了解决非线性时间序列预测问题，支持向量机、神经网络等人工智能方法被引入到时间序列分析领域.</p>
<h1 id="ESN结构"><a href="#ESN结构" class="headerlink" title="ESN结构"></a>ESN结构</h1><p> 相对于传统神经网络结构ESN所学习的并不是神经元的权重，二是神经元之间的链接。<br> 回声状态状态网络作为一种新型的递归神经网络，无论是建模还是学习算法，都已经与传统的递归神经网络差别很大。<br> 比较直观的结构如下：<br><img src="/images/esn/1.png" alt=""></p>
<h2 id="ESN网络特点："><a href="#ESN网络特点：" class="headerlink" title="ESN网络特点："></a>ESN网络特点：</h2><ol>
<li>它的核心结构是一个随机生成、且保持不 变的储备池（Reservoir）</li>
<li>其输出权值是唯一需要调整的部分</li>
<li>简单的线性回归就可完成网络的训练<h1 id="ESN的数学模型"><a href="#ESN的数学模型" class="headerlink" title="ESN的数学模型"></a>ESN的数学模型</h1></li>
</ol>
<p>假设系统具有M个输入单元,N个内部处理单元（Processing elements PEs），即N个内部神经元,同时具有L个输出单元,输入单元、内部状态、以及输出单元n时刻的值分别为<br><img src="/images/esn/2.png" alt=""></p>
<p>$$u\left( n \right) =\left[ u_1\left( n \right) ,…,u_M\left( n \right) \right] ^T$$<br>$$x\left( n \right) =\left[ x_1\left( n \right) ,…,x_N\left( n \right) \right] ^T$$<br>$$y\left( n \right) =\left[ y_1\left( n \right) ,…,y_L\left( n \right) \right] ^T$$<br>其中，$u\left( n \right) \in R^{K\times 1}$ , $x\left( n \right) \in R^{N\times 1}$ , $y\left( n \right) \in R^{L\times 1}$</p>
<p>从结构上讲，ESNs是一种特殊类型的神经网络，其基本思想是使用大规模随机连接的递归网络，取代经典神经网络中的中间层，从而简化网络的训练过程,回声状态网络的状态方程为：<br>$$x\left( n+1 \right) =f\left( Wx\left( n \right) +W^{in}u\left( n \right) +W^{back}y\left( n \right) \right) $$<br>$$<br>y\left( n+1 \right) =f_{out}\left( W^{out}\left[ x\left( n+1 \right) ,u\left( n+1 \right) ,y\left( n \right) \right] +b^{out} \right)$$</p>
<p>其中，$W\in R^{N\times N}$ , $W^{in}\in R^{N\times K}$ , $W^{back}\in R^{N\times L}$ , $W^{out}\in R^{\left( L+K+N \right) \times L}$</p>
<p>f为激活函数，一般为双曲正切函数。<br>其中W, $W^{in}$ , $W^{back}$ 分别表示状态变量、输入和输出对状态变量的连接权矩阵；$W^{out}$ 表示储备池、输入和输出对于输出的连接权矩阵，$b^{out}$ 表示输出的偏置项或者可以代表噪声,表示内部神经元激活函数,在网络训练过程中，连接到储备池的连接权矩阵 W, $W^{in}$ , $W^{back}$ 随机产生,一经产生就固定不变.而连接到输出的连接权矩阵 $W^{out}$ 需要通过训练得到，因为状态变量、输入和输出与输出之间是线性关系，所以通常这些连接权只需通过求解线性回归问题得到。</p>
<h1 id="ESN的训练"><a href="#ESN的训练" class="headerlink" title="ESN的训练"></a>ESN的训练</h1><p>ESNs的训练过程就是根据给定的训练样本 $u\left( n \right) =\left[ u_1\left( n \right) ,…,u_M\left( n \right) \right] ^T$ ，确定系统输出连接权矩阵<br> $W^{out}$的过程 ．<br>ESNs的训练分为两个过程： <code>采样过程</code>和<code>权值计算过程</code></p>
<h2 id="采样过程"><a href="#采样过程" class="headerlink" title="采样过程"></a>采样过程</h2><p>采样阶段首先任意选定网络的初始状态，但是通常情况下选取网络的初始状态为0，即 $x(0)=0$ ,训练样本$u\left( n \right) =\left[ u_1\left( n \right) ,…,u_M\left( n \right) \right] ^T$ 经过输入连接权矩阵 $W^{in}$ 被加入到储备池中， 按照方程，依次完成系统状态和输出珋 $y(n)$ 的计算与收集 ． 为了计算输出连接权矩阵，需要从某一时刻 m 开始收集（采样）内部状态变量，并以向量 $x\left( n \right) =\left[ x_1\left( n \right) ,…,x_N\left( n \right) \right] ^T$ 为行构成矩阵，同时相应的样本数据 y(n)也被收集，并构成一个列向量  $B\in R^{\left( p-m+1 \right) \times N}$ ,同时相应的样本数据y(n)也被收集，并构成 $T\in R^{\left( p-m+1 \right) \times L}$</p>
<h2 id="权值计算"><a href="#权值计算" class="headerlink" title="权值计算"></a>权值计算</h2><p>权值计算就是根据在采样阶段收集到系统状态矩阵和样本数据，计算输出连接权  $W^{out}$ ． 因为状态变量 $x(n)$ 和系统输出 $y(n)$ 之间是线性关系，而需要实现的目标是利用网络实际输出逼近期望输出 :<br>$$y\left( n \right) \approx \hat{y}\left( n \right) =\sum_{i=1}^L{w_{i}^{out}x_i\left( n \right)}$$</p>
<p>所以损失函数为：<br>$$\underset{w_{i}^{out}}{\min}\frac{1}{p-m+1}\sum_{n=m}^P{\left( y\left( n \right) -\sum_{i=1}^L{w_{i}^{out}x_i\left( n \right)} \right) ^2}$$</p>
<p>所以其训练过程可以用于计算：<br>$$W^{out}=B^{-1}T $$</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>实验代码：<a href="https://github.com/unsky/esn-rmlp" target="_blank" rel="external">https://github.com/unsky/esn-rmlp</a></p>
<h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p><code>esn_main.m</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">clear;</div><div class="line">clc;</div><div class="line">% Generate ESN for training</div><div class="line">net = esn_net(25, 600, 1);</div><div class="line">% Generate training data</div><div class="line">[I_data, T_data] = seq_gen_esn(26);</div><div class="line">% Train ESN</div><div class="line">net_trained = esn_train(net,I_data,T_data);</div><div class="line"></div><div class="line">% Test ESN</div><div class="line">[original_out,net_out,error] = esn_test(net_trained);</div></pre></td></tr></table></figure></p>
<h2 id="训练数据准备"><a href="#训练数据准备" class="headerlink" title="训练数据准备"></a>训练数据准备</h2><p>　<code>seq_gen_esn</code> 用于产生3000个训练数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">t = 0 : 3000;                      % training sequence time interval</div><div class="line">y = signal(t);                     % generate training sequence</div><div class="line">len = length(y);</div><div class="line">incom_data = (rand(1,len)&gt;0.00);   % incomplete data ratio</div><div class="line">y = y.*incom_data;</div><div class="line">num_subset = len - len_subset + 1; % number of subset</div><div class="line">fprintf(&apos;Training sequence generation is in process, please wait...\n&apos;)</div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Main Loop &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">for i = (1:num_subset),</div><div class="line">    I_data(i,:) = y(i:len_subset-2+i);</div><div class="line">    T_data(i,:) = y(len_subset-1+i);</div><div class="line">end;</div></pre></td></tr></table></figure></p>
<h2 id="网络训练"><a href="#网络训练" class="headerlink" title="网络训练"></a>网络训练</h2><p><code>esn_train</code>用于网络训练求得 $W^{out}$</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">AUC  = net.numAllUnits;           % number of all units</div><div class="line">IUC  = net.numInputUnits;         % number of input units</div><div class="line">OUC  = net.numOutputUnits;        % number of output units</div><div class="line">HUC  = net.numHiddenLayer;        % number of hidden units</div><div class="line">drWeights = net.reservoirWeights; % dynamic reservoir weights matrix</div><div class="line">inWeights = net.inputWeights;     % input matrix</div><div class="line">bkWeights = net.backWeights;      % backward weights from output layer</div><div class="line">ouWeights = net.outputWeights;    % output weights matrix</div><div class="line">bl_out    = net.bl_out;           % type of output neuron</div><div class="line">int_bk    = net.int_bk;           % intensity of feedback</div><div class="line">attenu    = net.attenu;           % attenuation ratio for the signal</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Parameter Check &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">[inpSize, inpNum] = size(I_data&apos;);</div><div class="line">[tarSize, tarNum] = size(T_data&apos;);</div><div class="line">if inpSize ~= IUC,</div><div class="line">    error (&apos;Number of input units and input pattern size do not match.&apos;);</div><div class="line">end;</div><div class="line">if tarSize ~= OUC,</div><div class="line">    error (&apos;Number of output units and target pattern size do not match.&apos;);</div><div class="line">end;</div><div class="line">if inpNum ~= tarNum,</div><div class="line">    error (&apos;Number of input and output patterns are different.&apos;);</div><div class="line">end;</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Initialization of Training &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">I_data  = attenu*I_data;</div><div class="line">T_data  = attenu*T_data;</div><div class="line">X(1,:)  = zeros(1,HUC);               % initial reservoir state</div><div class="line">I1_data = [zeros(1,inpSize); I_data]; % add zero to initial input</div><div class="line">T1_data = [zeros(1,tarSize); T_data]; % add zero to initial output</div><div class="line">timeflag= cputime;                    % a timer to save the training time</div><div class="line">wb = waitbar(0, &apos;Echo State Network Training in Progress...&apos;);</div><div class="line">T0 = 1000;                            % washout time</div><div class="line">fprintf(&apos;\nThe echo state network training is in process...\n&apos;);</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Main Loop of ESN Training &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">for i = (1:inpNum),</div><div class="line">    waitbar(i/inpNum,wb)</div><div class="line">    set(wb,&apos;name&apos;,[&apos;Progress = &apos; sprintf(&apos;%2.1f&apos;,i/inpNum*100) &apos;%&apos;]);</div><div class="line">    X(i+1,:) = hyperb((inWeights*I1_data(i+1,:)&apos; + drWeights*X(i,:)&apos; + ...</div><div class="line">                int_bk*bkWeights*T1_data(i,:)&apos; + 0.001*(rand(1,HUC)-0.5)&apos;)&apos;);</div><div class="line">end;</div><div class="line">close(wb);</div><div class="line">fprintf(&apos;Please wait for another while...\n&apos;);</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt; Calculate output weights and update ESN &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">if (bl_out == 1),</div><div class="line">    ouWeights = (pinv(X(T0+2:end,:))*(T_data(T0+1:end,:)))&apos;; % linear output</div><div class="line">else</div><div class="line">    ouWeights = (pinv(X(T0+2:end,:))*(inv_hyperb(T_data(T0+1:end,:))))&apos;;</div><div class="line">end;</div><div class="line">net.outputWeights = ouWeights;</div><div class="line">net_trained       = net;</div><div class="line">timeflag          = cputime - timeflag;</div><div class="line">fprintf(&apos;Training accomplished! Total time is %2.2f hours.\n&apos;,timeflag/3600);</div></pre></td></tr></table></figure>
<h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p><code>esn_test</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Obtain parameters from RMLP net &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">AUC  = net.numAllUnits;           % number of all units</div><div class="line">IUC  = net.numInputUnits;         % number of input units</div><div class="line">OUC  = net.numOutputUnits;        % number of output units</div><div class="line">HUC  = net.numHiddenLayer;        % number of hidden units</div><div class="line">drWeights = net.reservoirWeights; % dynamic reservoir weights matrix</div><div class="line">inWeights = net.inputWeights;     % input matrix</div><div class="line">bkWeights = net.backWeights;      % backward weights from output layer</div><div class="line">ouWeights = net.outputWeights;    % output weights matrix</div><div class="line">len_subset= IUC + OUC;            % subset length</div><div class="line">bl_out    = net.bl_out;           % type of output neuron</div><div class="line">int_bk    = net.int_bk;           % intensity of feedback</div><div class="line">attenu    = net.attenu;           % attenuation ratio for the signal</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Testing Parameters Setting &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">S_point = 4000;            % starting point of testing data</div><div class="line">testNum = 3000;            % number of testing data</div><div class="line">X(1,:)  = zeros(1,HUC);    % initial reservoir state</div><div class="line">t       = [S_point : S_point+len_subset-1];</div><div class="line">y0      = rand(1,OUC)-0.5; % initial output</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Check parameter &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">if length(t) ~= len_subset,</div><div class="line">    error(&apos;Length of testing data subset and the network structure do not match&apos;);</div><div class="line">end;</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Testing Main Routine &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">wb = waitbar(0, &apos;Echo State Network Testing in Progress...&apos;);</div><div class="line">for i = (1:testNum),</div><div class="line">    waitbar(i/testNum,wb)</div><div class="line">    set(wb,&apos;name&apos;,[&apos;Progress = &apos; sprintf(&apos;%2.1f&apos;,i/testNum*100) &apos;%&apos;]);</div><div class="line">    y = attenu*signal(t);                                   % generate testing data</div><div class="line">    X(i+1,:) = hyperb((inWeights*y(1:end-OUC)&apos; + ...</div><div class="line">               drWeights*X(i,:)&apos; + int_bk*bkWeights*y0&apos;)&apos;); % update reservoir state</div><div class="line">    if (bl_out == 1),</div><div class="line">        Y(i+1,:) = ouWeights*X(i+1,:)&apos;;        % update output state - Linear output</div><div class="line">    else</div><div class="line">        Y(i+1,:) = hyperb(ouWeights*X(i+1,:)&apos;);  % update output state - nonlinear output</div><div class="line">    end;</div><div class="line"></div><div class="line">    % update state for next iteration and output</div><div class="line">    original_out(i) = (1/attenu)*y(end-OUC+1:end);   % original output</div><div class="line">    net_out(i)      = (1/attenu)*Y(i+1,:);           % network output</div><div class="line">    error(i)        = net_out(i) - original_out(i);  % errors</div><div class="line">    y0 = Y(i+1,:);                                   % store the output for next calculation</div><div class="line">    t  = t + 1;                                      % Move one-step forward</div><div class="line">end;</div><div class="line">close(wb);</div><div class="line"></div><div class="line">%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Plotting &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</div><div class="line">subplot(211);</div><div class="line">plot([S_point+1:S_point+testNum],original_out,&apos;b&apos;,[S_point+1:S_point+testNum],net_out,&apos;r&apos;);</div><div class="line">hold on; grid on;</div><div class="line">legend(&apos;Original sequence&apos;,&apos;Network output&apos;);</div><div class="line">xlabel(&apos;time&apos;); ylabel(&apos;Amplitude&apos;);</div><div class="line">subplot(212);</div><div class="line">plot([S_point+1:S_point+testNum],error,&apos;b&apos;);</div><div class="line">hold on; grid on;</div><div class="line">xlabel(&apos;Time&apos;); ylabel(&apos;Output error&apos;);</div><div class="line">RMSE = sqrt(mean((net_out(1:end) - original_out(1:end)).^2))</div></pre></td></tr></table></figure></p>
<h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p><img src="/images/esn/3.png" alt=""><br>从错误率可以看出，ESNs的误差率可以接受。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ESN( echo state networks)&lt;/code&gt;:&lt;br&gt;针对递归神经网络训练困难以及记忆渐消问题,jaeger 于2001年提出一种新型递归神经网络— — —回声状态网络. ESN网络一经提出便成为学术界的研究热点，并应用到各种不同领域，包括动态模式分类、机器人控制、对象跟踪核运动目标 检 测、 事 件 监 测 等， 尤其是时间序列预测问题.&lt;br&gt;
    
    </summary>
    
      <category term="时间序列" scheme="http://yoursite.com/categories/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
    
      <category term="回声状态网络" scheme="http://yoursite.com/tags/%E5%9B%9E%E5%A3%B0%E7%8A%B6%E6%80%81%E7%BD%91%E7%BB%9C/"/>
    
      <category term="时间序列" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
      <category term="RNN" scheme="http://yoursite.com/tags/RNN/"/>
    
  </entry>
  
  <entry>
    <title>fast-r-cnn-物体检测</title>
    <link href="http://yoursite.com/2016/11/14/fast-r-cnn-%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2016/11/14/fast-r-cnn-物体检测/</id>
    <published>2016-11-14T14:01:38.000Z</published>
    <updated>2016-11-22T15:10:55.331Z</updated>
    
    <content type="html"><![CDATA[<p>这是RBG大神对于R-CNN的改进，从上一篇RCNN <a href="http://deepdim.com/2016/11/22/R-CNN/" target="_blank" rel="external">http://deepdim.com/2016/11/22/R-CNN/</a><br>中我们知道R-CNN，同时知道SPP-NET可以惊醒任意尺寸的输入同时不需要对没个候选窗口进行输入，而是输入整张图片，在卷积层之后进行窗口推荐。<br>结合两者的优点，所以RBG大神就此提出了fast-r-cnn.<br> <a id="more"></a></p>
<h1 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h1><p>具体的结构不同在于卷积层之后：<br>  <img src="/images/fast-r-cnn/1.png" alt=""></p>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ol>
<li>经过多层的卷积和pooling得到一组feature map</li>
<li>通过SPP net中的ROI projection在这层feature map上找到原图的proposal对应的区域（ROI）</li>
<li>利用spatial pooling的思路，对每个ROI做pooling。具体来说就是把h×w的ROI划分为H×W个grid/sub-window，每个grid大小是h/H × w/W，在每个grid内取max。</li>
<li>把ROI pooling layer对每个ROI（对应回原图就是每个proposal）输出的H×W长的max pooling feature vector接全连接层</li>
<li>全连接层之后有两个输出层，一个softmax分类器，输出该ROI对应的proposal的object类别，一个是bounding box回归层，输出category specific bounding box<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2>可以看出该网络最大的创新是在</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是RBG大神对于R-CNN的改进，从上一篇RCNN &lt;a href=&quot;http://deepdim.com/2016/11/22/R-CNN/&quot;&gt;http://deepdim.com/2016/11/22/R-CNN/&lt;/a&gt;&lt;br&gt;中我们知道R-CNN，同时知道SPP-NET可以惊醒任意尺寸的输入同时不需要对没个候选窗口进行输入，而是输入整张图片，在卷积层之后进行窗口推荐。&lt;br&gt;结合两者的优点，所以RBG大神就此提出了fast-r-cnn.&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="卷积" scheme="http://yoursite.com/tags/%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>ZigZag Conversion 回旋字符串</title>
    <link href="http://yoursite.com/2016/11/14/ZigZag-Conversion-%E5%9B%9E%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2016/11/14/ZigZag-Conversion-回旋字符串/</id>
    <published>2016-11-14T13:27:29.000Z</published>
    <updated>2016-11-18T11:52:17.947Z</updated>
    
    <content type="html"><![CDATA[<p>id：6. ZigZag Conversion   QuestionEditorial Solution  My Submissions<br>Total Accepted: 120341<br>Total Submissions: 469716<br>Difficulty: Easy<br>Contributors: Admin<br>The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><img src="/images/zigzagconversion/1.png" alt=""><br> <a id="more"></a><br>And then read line by line: “PAHNAPLSIIGYIR”<br>Write the code that will take a string and make this conversion given a number of rows:</p>
<p>string convert(string text, int nRows);<br>convert(“PAYPALISHIRING”, 3) should return “PAHNAPLSIIGYIR”.<br>Subscribe to see which companies asked this question</p>
<p>这道题是一个变换，只要找到其中的规律就很好做题。<br><img src="/images/zigzagconversion/2.png" alt=""></p>
<p><code>假设结果存在一个string result中</code></p>
<p><code>原字符串存于s</code></p>
<p>经过观察我们可以发现<br>红色部分的变换为：</p>
<p><code>result.append(1,s[j*(numRows+numRows-2)+i])</code></p>
<p>绿色部分的变换为</p>
<p><code>result.append(1,s[(j+1)*(numRows+numRows-2)-i])</code></p>
<p>其中i是第i行，j是（红色或者绿）的第j个数</p>
<p>所以我们可以这么写代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">if</span> (numRows==<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">        <span class="keyword">if</span>(s.size()==<span class="number">0</span>)<span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numRows;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;(j*(numRows+numRows<span class="number">-2</span>)+i)&lt;s.size();j++)</div><div class="line">            &#123;result.append(<span class="number">1</span>,s[j*(numRows+numRows<span class="number">-2</span>)+i]);</div><div class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>||i==numRows<span class="number">-1</span>)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">            <span class="keyword">if</span>(((j+<span class="number">1</span>)*(numRows+numRows<span class="number">-2</span>)-i)&lt;s.size())</div><div class="line">            &#123;</div><div class="line">            result.append(<span class="number">1</span>,s[(j+<span class="number">1</span>)*(numRows+numRows<span class="number">-2</span>)-i]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id：6. ZigZag Conversion   QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 120341&lt;br&gt;Total Submissions: 469716&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)&lt;br&gt;&lt;img src=&quot;/images/zigzagconversion/1.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="回旋字符串" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="ZigZag Conversion" scheme="http://yoursite.com/tags/ZigZag-Conversion/"/>
    
  </entry>
  
  <entry>
    <title>PCA主成分分析</title>
    <link href="http://yoursite.com/2016/11/12/PCA%E9%99%8D%E7%BB%B4/"/>
    <id>http://yoursite.com/2016/11/12/PCA降维/</id>
    <published>2016-11-12T01:37:32.000Z</published>
    <updated>2016-11-25T08:32:58.268Z</updated>
    
    <content type="html"><![CDATA[<p>pca降维</p>
<h1 id="pca降维"><a href="#pca降维" class="headerlink" title="pca降维"></a>pca降维</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pca降维&lt;/p&gt;
&lt;h1 id=&quot;pca降维&quot;&gt;&lt;a href=&quot;#pca降维&quot; class=&quot;headerlink&quot; title=&quot;pca降维&quot;&gt;&lt;/a&gt;pca降维&lt;/h1&gt;
    
    </summary>
    
      <category term="主成分分析" scheme="http://yoursite.com/categories/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Principal Component Analysis" scheme="http://yoursite.com/tags/Principal-Component-Analysis/"/>
    
      <category term="主成分分析" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>最大回文串 Longest Palindromic Substring</title>
    <link href="http://yoursite.com/2016/11/11/%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E4%B8%B2-Longest-Palindromic-Substring/"/>
    <id>http://yoursite.com/2016/11/11/最大回文串-Longest-Palindromic-Substring/</id>
    <published>2016-11-11T12:20:16.000Z</published>
    <updated>2016-11-18T11:53:13.533Z</updated>
    
    <content type="html"><![CDATA[<p>id5. Longest Palindromic Substring   QuestionEditorial Solution  My Submissions<br>Total Accepted: 147621<br>Total Submissions: 614546<br>Difficulty: Medium<br>Contributors: Admin<br>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.<br> <a id="more"></a></p>
<p>Example:<br>Input: “babad”</p>
<p>Output: “bab”</p>
<p>Note: “aba” is also a valid answer.<br>Example:</p>
<p>Input: “cbbd”</p>
<p>Output: “bb”<br>最长回文串,首先最容易想到的是穷举所有的字串，然后判断是不是回文。<br>最开始的方法使用递归判断是不是回文：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是一种超时但是正确的做法。但是超时了。。</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindromic</span><span class="params">(<span class="built_in">string</span> s,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (i==j)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(s[i]!=s[j])</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>==j)</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> isPalindromic(s,i+<span class="number">1</span>,j<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> longestPalindromeString =s.substr(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">        <span class="built_in">string</span> str;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=s.size();i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j!=s.size();j++)</div><div class="line">            &#123;</div><div class="line">                str=s.substr(i,j-i+<span class="number">1</span>);</div><div class="line">             <span class="keyword">if</span>(isPalindromic(str,<span class="number">0</span>,str.size()<span class="number">-1</span>)&amp;&amp;(str.size()&gt;longestPalindromeString.size()))</div><div class="line">             longestPalindromeString=str;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> longestPalindromeString;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123; <span class="built_in">string</span> s=<span class="string">"sdgdfhfgjhgghkjhljkldyhrtiiiiytrewqtyitutyiyopuip"</span>;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;longestPalindrome(s);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>总结上面的做法，时间复杂度为  $o\left( n^2\log ^n \right) $<br>会发现做了很多重复的事情所以时间复杂度非常高，所以将思路变成穷举中心点，从中心按照奇数和偶数进行扩散，进而在扩散的过程就完成了回文的判断。节省了判断回文的时间。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> longestPalindromeString =s.substr(<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=s.size();i++)</div><div class="line">        &#123;   <span class="comment">//奇数</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;((i-j)&gt;=<span class="number">0</span>)&amp;&amp;((i+j)&lt;=s.size()<span class="number">-1</span>);j++)</div><div class="line">            &#123;<span class="keyword">if</span>(s[i-j]!=s[i+j])</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">             <span class="keyword">if</span> ((<span class="number">2</span>*j+<span class="number">1</span>)&gt;longestPalindromeString.size())</div><div class="line">             longestPalindromeString=s.substr(i-j,<span class="number">2</span>*j+<span class="number">1</span>);</div><div class="line">             &#125;</div><div class="line">             <span class="comment">//偶数</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;((i-j)&gt;=<span class="number">0</span>)&amp;&amp;((i+j+<span class="number">1</span>)&lt;=s.size()<span class="number">-1</span>);j++)</div><div class="line">            &#123; <span class="keyword">if</span>(s[i-j]!=s[i+j+<span class="number">1</span>])</div><div class="line">             <span class="keyword">break</span>;</div><div class="line">             <span class="keyword">if</span> ((<span class="number">2</span>*j+<span class="number">2</span>)&gt;longestPalindromeString.size())</div><div class="line">             longestPalindromeString=s.substr(i-j,<span class="number">2</span>*j+<span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> longestPalindromeString;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这样的时间复杂度就为 $o\left( n^2 \right) $<br>顺别说一点，在写类的时候不要忘了在类后面加 <code>;</code>号，不然会提示</p>
<p><code>error: expected unqualified-id before string constant</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id5. Longest Palindromic Substring   QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 147621&lt;br&gt;Total Submissions: 614546&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="最大回文串" scheme="http://yoursite.com/tags/%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    
      <category term="Longest Palindromic Substring" scheme="http://yoursite.com/tags/Longest-Palindromic-Substring/"/>
    
  </entry>
  
  <entry>
    <title>激活函数</title>
    <link href="http://yoursite.com/2016/11/10/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/11/10/激活函数/</id>
    <published>2016-11-10T12:27:17.000Z</published>
    <updated>2016-11-22T12:45:52.938Z</updated>
    
    <content type="html"><![CDATA[<p>在神经元的数学模型中，轴突所携带的信号(例如: $x_0$ )通过突触进行传递，由于突触的强弱不一，假设我们以 $w_0$ 表示，那么我们传到下一个神经元的树突处的信号就变成了 $w_0x_0$ 。其中突触强弱(参数w)是可学的，它控制了一个神经元对另一个神经元影响的大小和方向（正负）。然后树突接收到信号后传递到神经元内部<code>cell body</code>，与其他树突传递过来的信号一起进行加和，如果这个和的值大于某一个固定的阈值的话，神经元就会被激活，然后传递冲激信号给树突。在数学模型中我们假设传递冲激信号的时间长短并不重要，只有神经元被激活的频率用于传递信息. 我们将是否激活神经元的函数称为激活函数(activation function $f$ ), 它代表了轴突接收到冲激信号的频率。以前我们比较常用的一个激活信号是<code>sigmoid function</code> $σ$ ，因为它接收一个实值的信号（即上面所说的加和的值）然后将它压缩到 <code>0-1</code> 的范围内。我们在后面会介绍更多的激活函数。<br> <a id="more"></a></p>
<h1 id="传统Sigmoid系激活函数"><a href="#传统Sigmoid系激活函数" class="headerlink" title="传统Sigmoid系激活函数"></a>传统Sigmoid系激活函数</h1><p><img src="/images/activate/3.png" alt=""><br>传统神经网络中最常用的两个激活函数，<code>Sigmoid</code>系（Logistic-Sigmoid、Tanh-Sigmoid）被视为神经网络的核心所在。从数学上来看，非线性的Sigmoid函数对中央区的信号增益较大，对两侧区的信号增益小，在信号的特征空间映射上，有很好的效果。从神经科学上来看，中央区酷似神经元的兴奋态，两侧区酷似神经元的抑制态，因而在神经网络学习方面，可以将重点特征推向中央区，将非重点特征推向两侧区。</p>
<h2 id="sigmoid激活函数"><a href="#sigmoid激活函数" class="headerlink" title="sigmoid激活函数"></a>sigmoid激活函数</h2><p>sigmoid将一个实数输入映射到[0,1]范围内，如下图（左）所示。使用sigmoid作为激活函数存在以下几个问题：</p>
<ol>
<li>梯度饱和。当函数激活值接近于0或者1时，函数的梯度接近于0。在反向传播计算梯度过程中:<br>$$\delta^{\left(l\right)}=\left( W^{\left(l\right)} \right) ^T\delta ^{\left(l+1\right)}\cdot f’\left( z^{\left(L\right)}\right) $$<br>，每层残差接近于0，计算出的梯度也不可避免地接近于0。这样在参数微调过程中，会引起参数弥散问题，传到前几层的梯度已经非常靠近0了，参数几乎不会再更新。</li>
<li>函数输出不是以0为中心的。我们更偏向于当激活函数的输入是0时，输出也是0的函数.</li>
</ol>
<h2 id="tanh激活函数"><a href="#tanh激活函数" class="headerlink" title="tanh激活函数"></a>tanh激活函数</h2><p>tanh函数将一个实数输入映射到[-1,1]范围内，如上图（右）所示。当输入为0时，tanh函数输出为0，符合我们对激活函数的要求。然而，tanh函数也存在梯度饱和问题，导致训练效率低下。</p>
<h1 id="Softplus-amp-ReLu"><a href="#Softplus-amp-ReLu" class="headerlink" title="Softplus&amp;ReLu"></a>Softplus&amp;ReLu</h1><p><img src="/images/activate/4.png" alt=""></p>
<p>2001年，神经科学家Dayan、Abott从生物学角度，模拟出了脑神经元接受信号更精确的激活模型，该模型如左图所示：这个模型对比Sigmoid系主要变化有三点：<br><code>单侧抑制</code> <code>相对宽阔的兴奋边界</code> <code>稀疏激活性</code>（重点，可以看到红框里前端状态完全没有激活）<br>同年，Charles Dugas等人在做正数回归预测论文中偶然使用了Softplus函数，Softplus函数是Logistic-Sigmoid函数原函数。</p>
<h2 id="Softplus"><a href="#Softplus" class="headerlink" title="Softplus"></a>Softplus</h2><p>激活函数公式：<br>$$softplus\left( x \right) =\log \left( 1+e^x \right)<br>$$</p>
<p>按照论文的说法，一开始想要使用一个指数函数（天然正数）作为激活函数来回归，但是到后期梯度实在太大，难以训练，于是加了一个log来减缓上升趋势。<br>加了1是为了保证非负性。同年，Charles Dugas等人在NIPS会议论文中又调侃了一句，Softplus可以看作是强制非负校正函数 $max(0,x)$ 平滑版本。<br>偶然的是，同是2001年，ML领域的Softplus/Rectifier激活函数与神经科学领域的提出脑神经元激活频率函数有神似的地方，这促成了新的激活函数的研究。</p>
<h2 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h2><p>Relu激活函数（The Rectified Linear Unit）表达式为：<br>$$f(x)=max(0,x)$$</p>
<p><img src="/images/activate/5.png" alt=""></p>
<p>相比sigmoid和tanh函数，Relu激活函数的优点在于：</p>
<ol>
<li><code>梯度不饱和</code>。梯度计算公式为：1{x&gt;0}。因此在反向传播过程中，减轻了梯度弥散的问题，神经网络前几层的参数也可以很快的更新。</li>
<li><code>计算速度快</code>。正向传播过程中，sigmoid和tanh函数计算激活值时需要计算指数，而Relu函数仅需要设置阈值。如果x<0,f(x)=0，如果x>0,f(x)=x。加快了正向传播的计算速度。</0,f(x)=0，如果x></li>
</ol>
<p>因此，Relu激活函数可以极大地加快收敛速度，相比tanh函数，收敛速度可以加快6倍（如上图（右）所示）。</p>
<h1 id="激活函数的发展"><a href="#激活函数的发展" class="headerlink" title="激活函数的发展"></a>激活函数的发展</h1><h2 id="PReLU"><a href="#PReLU" class="headerlink" title="PReLU"></a>PReLU</h2><p>dsd<br>PReLU 是ReLU 和 LReLU的改进版本，具有非饱和性：</p>
<p><img src="/images/activate/11.png" alt=""><br><img src="/images/activate/6.png" alt=""><br>与LReLU相比，PReLU中的负半轴斜率a可学习而非固定。原文献建议初始化a为0.25，不采用正则。个人认为，是否采用正则应当视具体的数据库和网络，通常情况下使用正则能够带来性能提升。</p>
<p>虽然PReLU 引入了额外的参数，但基本不需要担心过拟合。例如，在上述cifar10+NIN实验中， PReLU比ReLU和ELU多引入了参数，但也展现了更优秀的性能。所以实验中若发现网络性能不好，建议从其他角度寻找原因。</p>
<p>与ReLU相比，PReLU收敛速度更快。因为PReLU的输出更接近0均值，使得SGD更接近natural gradient。证明过程参见原文[10]。</p>
<p>此外，作者在ResNet 中采用ReLU，而没有采用新的PReLU。这里给出个人浅见，不一定正确，仅供参考。首先，在上述LReLU实验中，负半轴斜率对性能的影响表现出一致性。对PReLU采用正则将激活值推向0也能够带来性能提升。这或许表明，小尺度或稀疏激活值对深度网络的影响更大。其次，ResNet中包含单位变换和残差两个分支。残差分支用于学习对单位变换的扰动。如果单位变换是最优解，那么残差分支的扰动应该越小越好。这种假设下，小尺度或稀疏激活值对深度网络的影响更大。此时，ReLU或许是比PReLU更好的选择.</p>
<h2 id="RReLU"><a href="#RReLU" class="headerlink" title="RReLU"></a>RReLU</h2><p>数学形式与PReLU类似，但RReLU[9]是一种非确定性激活函数，其参数是随机的。这种随机性类似于一种噪声，能够在一定程度上起到正则效果。作者在cifar10/100上观察到了性能提升。</p>
<h2 id="Maxout"><a href="#Maxout" class="headerlink" title="Maxout"></a>Maxout</h2><p>Maxout[13]是ReLU的推广，其发生饱和是一个零测集事件（measure zero event）。正式定义为：<br>$$\max \left( w_{1}^{T}x+b_1,…,w_{n}^{T}x+b_n \right) $$<br>Maxout网络能够近似任意连续函数，且当w2,b2,…,wn,bn为0时，退化为ReLU。 其实，Maxout的思想在视觉领域存在已久。例如，在HOG特征里有这么一个过程：计算三个通道的梯度强度，然后在每一个像素位置上，仅取三个通道中梯度强度最大的数值，最终形成一个通道。这其实就是Maxout的一种特例。</p>
<p>Maxout能够缓解梯度消失，同时又规避了ReLU神经元死亡的缺点，但增加了参数和计算量。</p>
<h2 id="ELU"><a href="#ELU" class="headerlink" title="ELU"></a>ELU</h2><p>ELU 融合了sigmoid和ReLU，具有左侧软饱性。其正式定义为：</p>
<p><img src="/images/activate/9.png" alt=""><br><img src="/images/activate/7.png" alt=""><br>右侧线性部分使得ELU能够缓解梯度消失，而左侧软饱能够让ELU对输入变化或噪声更鲁棒。ELU的输出均值接近于零，所以收敛速度更快。经本文作者实验，ELU的收敛性质的确优于ReLU和PReLU。在cifar10上，ELU 网络的loss 降低速度更快；在 ImageNet上，不加 Batch Normalization 30 层以上的 ReLU 网络会无法收敛，PReLU网络在MSRA的Fan-in （caffe ）初始化下会发散，而 ELU 网络在Fan-in/Fan-out下都能收敛 。</p>
<p>论文的另一个重要贡献是分析了Bias shift 现象与激活值的关系，证明了降低Bias shift 等价于把激活值的均值推向0。</p>
<h2 id="MPELU"><a href="#MPELU" class="headerlink" title="MPELU"></a>MPELU</h2><p>将分段线性与ELU统一到了一种形式下。在NIN+CIFAR10，本文作者发现ELU与LReLU性能一致，而与PReLU差距较大。经过分析，ELU泰勒展开的一次项就是LReLU。当在ELU前加入BN让输入集中在0均值附近， 则ELU与LReLU之差——泰勒展开高次项会变小，粗略估计，约55.57%的激活值误差小于0.01。因此，受PReLU启发，令α可学习能够提高性能。此外，引入参数β能够进一步控制ELU的函数形状。正式定义为<br><img src="/images/activate/10.png" alt=""><br><img src="/images/activate/8.png" alt=""><br>α 和 β可以使用正则。α, β 固定为1时，MPELU 退化为 ELU； β 固定为很小的值时，MPELU 近似为 PReLU；当α=0，MPELU 等价于 ReLU。</p>
<p>MPELU 的优势在于同时具备 ReLU、PReLU和 ELU的优点。首先，MPELU具备ELU的收敛性质，能够在无 Batch Normalization 的情况下让几十层网络收敛。其次，作为一般化形式， MPELU较三者的推广能力更强。简言之，MPELU = max(ReLU, PReLU, ELU)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在神经元的数学模型中，轴突所携带的信号(例如: $x_0$ )通过突触进行传递，由于突触的强弱不一，假设我们以 $w_0$ 表示，那么我们传到下一个神经元的树突处的信号就变成了 $w_0x_0$ 。其中突触强弱(参数w)是可学的，它控制了一个神经元对另一个神经元影响的大小和方向（正负）。然后树突接收到信号后传递到神经元内部&lt;code&gt;cell body&lt;/code&gt;，与其他树突传递过来的信号一起进行加和，如果这个和的值大于某一个固定的阈值的话，神经元就会被激活，然后传递冲激信号给树突。在数学模型中我们假设传递冲激信号的时间长短并不重要，只有神经元被激活的频率用于传递信息. 我们将是否激活神经元的函数称为激活函数(activation function $f$ ), 它代表了轴突接收到冲激信号的频率。以前我们比较常用的一个激活信号是&lt;code&gt;sigmoid function&lt;/code&gt; $σ$ ，因为它接收一个实值的信号（即上面所说的加和的值）然后将它压缩到 &lt;code&gt;0-1&lt;/code&gt; 的范围内。我们在后面会介绍更多的激活函数。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="激活函数" scheme="http://yoursite.com/tags/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>损失函数</title>
    <link href="http://yoursite.com/2016/11/10/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/11/10/损失函数/</id>
    <published>2016-11-10T09:44:34.000Z</published>
    <updated>2016-11-22T12:47:34.420Z</updated>
    
    <content type="html"><![CDATA[<p>损失函数（loss function）是用来估量模型的预测值 $f(x)$ 与真实值Y的不一致程度，它是一个非负实值函数,通常使用 $L(Y, f(x))$ 来表示，损失函数越小，模型的鲁棒性就越好。损失函数是经验风险函数的核心部分，也是结构风险函数重要组成部分。模型的结构风险函数包括了经验风险项和正则项，通常可以表示成如下式子：<br><a id="more"></a><br>$$\theta^{*}=arg\underset{\theta}{\min}\frac{1}{N}\sum_{i=1}^N{L\left( y_i,f\left( x_i;\theta \right) \right) +\lambda \varPhi \left( \theta \right)}$$</p>
<p>其中，前面的均值函数表示的是经验风险函数，L代表的是损失函数，后面的 $\varPhi$ 是正则化项（regularizer）或者叫惩罚项（penalty term），它可以是L1，也可以是L2，或者其他的正则函数。整个式子表示的意思是找到使目标函数最小时的θ 值。下面主要列出几种常见的损失函数。</p>
<h1 id="log对数损失函数（逻辑回归）"><a href="#log对数损失函数（逻辑回归）" class="headerlink" title="log对数损失函数（逻辑回归）"></a>log对数损失函数（逻辑回归）</h1><p>有些人可能觉得逻辑回归的损失函数就是平方损失，其实并不是。平方损失函数可以通过线性回归在假设样本是高斯分布的条件下推导得到，而逻辑回归得到的并不是平方损失。在逻辑回归的推导中，它假设样本服从伯努利分布（0-1分布），然后求得满足该分布的似然函数，接着取对数求极值等等。而逻辑回归并没有求似然函数的极值，而是把极大化当做是一种思想，进而推导出它的经验风险函数为：最小化负的似然函数（即max F(y, f(x)) —-&gt; min -F(y, f(x)))。从损失函数的视角来看，它就成了log损失函数了。</p>
<p>log损失函数的标准形式：<br>$$ L\left( Y,P\left( Y|X \right) \right) =-\log P\left( Y|X \right)<br>$$<br>刚刚说到，取对数是为了方便计算极大似然估计，因为在MLE中，直接求导比较困难，所以通常都是先取对数再求导找极值点。损失函数 $L(Y, P(Y|X))$ 表达的是样本X在分类Y的情况下，使概率 $P(Y|X)$ 达到最大值（换言之，就是利用已知的样本分布，找到最有可能（即最大概率）导致这种分布的参数值；或者说什么样的参数才能使我们观测到目前这组数据的概率最大）。因为log函数是单调递增的，所以 $logP(Y|X)$ 也会达到最大值，因此在前面加上负号之后，最大化 $P(Y|X)$ 就等价于最小化 $L$ 了。<br>逻辑回归的 $P(Y=y|x)$ 表达式如下（为了将类别标签y统一为1和0，下面将表达式分开表示)：<br><img src="/images/lossfunction/1.png" alt=""><br>将它带入到上式，通过推导可以得到logistic的损失函数表达式，如下：<br><img src="/images/lossfunction/2.png" alt=""><br>逻辑回归最后得到的目标式子如下：<br>$$J\left( \theta \right) =-\frac{1}{m}\sum_{i=1}^m{\left[ y^i\log h_{\theta}\left( x^i \right) +\left( 1-y^i \right) \log \left( 1-h_{\theta}\left( x^i \right) \right) \right]}$$<br>上面是针对二分类而言的。</p>
<h1 id="平方损失函数（最小二乘法-Ordinary-Least-Squares-）"><a href="#平方损失函数（最小二乘法-Ordinary-Least-Squares-）" class="headerlink" title="平方损失函数（最小二乘法, Ordinary Least Squares ）"></a>平方损失函数（最小二乘法, Ordinary Least Squares ）</h1><p>最小二乘法是线性回归的一种，OLS将问题转化成了一个凸优化问题。在线性回归中，它假设样本和噪声都服从高斯分布（为什么假设成高斯分布呢？其实这里隐藏了一个小知识点，就是中心极限定理，可以参考<code>central limit theorem</code>），最后通过极大似然估计（MLE）可以推导出最小二乘式子。最小二乘的基本原则是：最优拟合直线应该是使各点到回归直线的距离和最小的直线，即平方和最小。换言之，OLS是基于距离的，而这个距离就是我们用的最多的欧几里得距离。为什么它会选择使用欧式距离作为误差度量呢（即Mean squared error， MSE），主要有以下几个原因：</p>
<ol>
<li>简单，计算方便；</li>
<li>欧氏距离是一种很好的相似性度量标准；</li>
<li>在不同的表示域变换后特征性质不变。<br>平方损失（Square loss）的标准形式如下：<br>$$L\left( Y,f\left( X \right) \right) =\left( Y-f\left( X \right) \right) ^2$$<br>当样本个数为n时，此时的损失函数变为：<br>$$L\left( Y,f\left( X \right) \right) =\sum_{i=1}^n{\left( Y-f\left( X \right) \right) ^2}$$<br>$Y-f(X)$ 表示的是残差，整个式子表示的是残差的平方和，而我们的目的就是最小化这个目标函数值（注：该式子未加入正则项），也就是最小化残差的平方和（residual sum of squares，RSS）。<br>而在实际应用中，通常会使用<code>均方差（MSE）</code>作为一项衡量指标，公式如下：<br>$$MSE=\frac{1}{n}\sum_{i=1}^n{\left( \widetilde{Y_i}-Y_i \right) ^2}$$<br><code>note：</code></li>
</ol>
<p>其求解过程转化为LSR(最小二乘回归)在求解时候。</p>
<ol>
<li>加入L1惩罚项，将变为 <code>lasso</code>问题，具体对lasso的求解将另起一文</li>
<li>加入L2惩罚项，将变为岭回归问题</li>
</ol>
<h1 id="指数损失函数（Adaboost）"><a href="#指数损失函数（Adaboost）" class="headerlink" title="指数损失函数（Adaboost）"></a>指数损失函数（Adaboost）</h1><p>学过Adaboost算法的人都知道，它是前向分步加法算法的特例，是一个加和模型，损失函数就是指数函数。在Adaboost中，经过m此迭代之后，可以得到<br>$$f_m\left( x \right) =f_{m-1}\left( x \right) +\alpha _mG_m\left( x \right) $$<br>Adaboost每次迭代时的目的是为了找到最小化下列式子时的参数α 和G：<br>$$arg\underset{\alpha ,G}{\min}=\sum_{i=1}^N{\exp \left[ -y_i\left( f_{m-1}\left( x_i \right) +\alpha G\left( x_i \right) \right) \right]}$$<br>而指数损失函数(exp-loss）的标准形式如下<br>  $$L\left( Y,f\left( X \right) \right) =\exp \left[ -yf\left( x \right) \right] $$<br>  可以看出，Adaboost的目标式子就是指数损失，在给定n个样本的情况下，Adaboost的损失函数为：<br>  $$L\left( Y,f\left( X \right) \right) =\frac{1}{n}\sum_{i=1}^n{\exp \left[ -yf\left( x \right) \right]}$$</p>
<h1 id="Hinge损失函数（SVM）"><a href="#Hinge损失函数（SVM）" class="headerlink" title="Hinge损失函数（SVM）"></a>Hinge损失函数（SVM）</h1><p>在机器学习算法中，hinge损失函数和SVM是息息相关的。在线性支持向量机中，最优化问题可以等价于下列式子：<br>$$\underset{w,b}{\min}\sum_i^N{\left[ 1-y_i\left( w\cdot x_i+b \right) \right] _++\lambda ||w||^2}$$<br>下面来对式子做个变形，令：<br>$$\left[ 1-y_i\left( w\cdot x_i+b \right) \right] _+=\xi _i$$<br>于是，原式就变成了：<br>$$\underset{w,b}{\min}\sum_i^N{\xi _i+\lambda ||w||^2}$$<br>另 $\lambda =\frac{1}{2C}$</p>
<p>$$\underset{w,b}{\min}\frac{1}{C}\left( C\sum_i^N{\xi _i+\frac{1}{2}||w||^2} \right)$$<br>可以看出，该式子与下式非常相似：</p>
<h2 id="Hinge-损失函数的标准形式"><a href="#Hinge-损失函数的标准形式" class="headerlink" title="Hinge 损失函数的标准形式:"></a>Hinge 损失函数的标准形式:</h2><p>$$L\left( y \right) =\max \left( 0,1-y\tilde{y} \right) ,y=\pm 1$$<br>可以看出，当 $|y|&gt;=1$ 时，$L(y)=0$ 。</p>
<h1 id="其它损失函数"><a href="#其它损失函数" class="headerlink" title="其它损失函数"></a>其它损失函数</h1><h2 id="0-1损失函数"><a href="#0-1损失函数" class="headerlink" title="0-1损失函数"></a>0-1损失函数</h2><p><img src="/images/lossfunction/3.png" alt=""></p>
<h2 id="绝对值损失函数"><a href="#绝对值损失函数" class="headerlink" title="绝对值损失函数"></a>绝对值损失函数</h2><p><img src="/images/lossfunction/4.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="/images/lossfunction/5.png" alt=""><br>参数越多，模型越复杂，而越复杂的模型越容易过拟合。过拟合就是说模型在训练数据上的效果远远好于在测试集上的性能。此时可以考虑正则化，通过设置正则项前面的hyper parameter，来权衡损失函数和正则项，减小参数规模，达到模型简化的目的，从而使模型具有更好的泛化能力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;损失函数（loss function）是用来估量模型的预测值 $f(x)$ 与真实值Y的不一致程度，它是一个非负实值函数,通常使用 $L(Y, f(x))$ 来表示，损失函数越小，模型的鲁棒性就越好。损失函数是经验风险函数的核心部分，也是结构风险函数重要组成部分。模型的结构风险函数包括了经验风险项和正则项，通常可以表示成如下式子：&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="损失函数" scheme="http://yoursite.com/tags/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
</feed>
