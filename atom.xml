<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Deepdim-Unsky&#39;Blog</title>
  <subtitle>Unsky Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-18T11:59:19.893Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>unsky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4Sum</title>
    <link href="http://yoursite.com/2017/01/18/4Sum/"/>
    <id>http://yoursite.com/2017/01/18/4Sum/</id>
    <published>2017-01-18T11:54:09.000Z</published>
    <updated>2017-01-18T11:59:19.893Z</updated>
    
    <content type="html"><![CDATA[<p>id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 101633<br>Total Submissions: 394751<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p>
<p>Note: The solution set must not contain duplicate quadruplets.</p>
<p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p>
<p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]<br><a id="more"></a><br>和3sum差不多 关键是处理重复<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; fourSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</div><div class="line">         <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</div><div class="line">         <span class="keyword">if</span>(nums.size()&lt;<span class="number">4</span>)</div><div class="line">         <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-3</span>;i++)</div><div class="line">        &#123;<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size()<span class="number">-2</span>;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> k=j+<span class="number">1</span>;</div><div class="line">         <span class="keyword">int</span> m=nums.size()<span class="number">-1</span>;</div><div class="line">            <span class="keyword">while</span>(k&lt;m)</div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]+nums[m]==target)</div><div class="line">                &#123;</div><div class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[j]);</div><div class="line">                vec.push_back(nums[k]);</div><div class="line">                vec.push_back(nums[m]);</div><div class="line">                res.push_back(vec);</div><div class="line">                m--;</div><div class="line">                k++;</div><div class="line">                 <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                  <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&lt;target-nums[i]-nums[j])</div><div class="line">                &#123;k++;</div><div class="line">                <span class="keyword">while</span>(nums[k]==nums[k<span class="number">-1</span>]&amp;&amp;k&lt;nums.size()<span class="number">-1</span>)</div><div class="line">                &#123;k++;&#125;</div><div class="line">                </div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[k]+nums[m]&gt;target-nums[i]-nums[j])</div><div class="line">                &#123;m--;</div><div class="line">                 <span class="keyword">while</span>(nums[m]==nums[m+<span class="number">1</span>]&amp;&amp;m&gt;<span class="number">0</span>)</div><div class="line">                &#123;m--;&#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span>(nums[j+<span class="number">1</span>]==nums[j]&amp;&amp;j+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            j++;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">            <span class="keyword">while</span>(nums[i+<span class="number">1</span>]==nums[i]&amp;&amp;i+<span class="number">1</span>&lt;nums.size()<span class="number">-1</span>)</div><div class="line">        &#123;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id18. 4Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 101633&lt;br&gt;Total Submissions: 394751&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
&lt;p&gt;Note: The solution set must not contain duplicate quadruplets.&lt;/p&gt;
&lt;p&gt;For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.&lt;/p&gt;
&lt;p&gt;A solution set is:&lt;br&gt;[&lt;br&gt;  [-1,  0, 0, 1],&lt;br&gt;  [-2, -1, 1, 2],&lt;br&gt;  [-2,  0, 0, 2]&lt;br&gt;]&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="4Sum" scheme="http://yoursite.com/tags/4Sum/"/>
    
  </entry>
  
  <entry>
    <title>QT实战,cortfly局域网工具</title>
    <link href="http://yoursite.com/2017/01/18/QT%E5%AE%9E%E6%88%98-cortfly%E5%B1%80%E5%9F%9F%E7%BD%91%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/01/18/QT实战-cortfly局域网工具/</id>
    <published>2017-01-18T07:58:55.000Z</published>
    <updated>2017-01-18T08:57:53.153Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。<br>update v1.0</p>
<ol>
<li>软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。</li>
<li>局域网聊天</li>
<li>文件对传</li>
<li>实验室论坛一键连接</li>
<li>实验室服务器登陆</li>
</ol>
<p><code>软件下载：</code>www.cortfly.com<br><code>github源码：</code> <a href="https://github.com/unsky/cortfly" target="_blank" rel="external">https://github.com/unsky/cortfly</a><br><a id="more"></a></p>
<p>#局域网聊天，文件秒传</p>
<p><img src="https://github.com/unsky/cortfly/raw/master/img01.jpg" alt="image"></p>
<p>#服务器登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img02.jpg" alt="image"></p>
<p>#论坛支持及论坛登陆<br><img src="https://github.com/unsky/cortfly/raw/master/img03.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了一段QTwidgets编程，自己设计了cortfly-一款基于局域网得使用工具。&lt;br&gt;update v1.0&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件采用互联网TCP/UDP协议设计，支持数据包重传保证文件传输的稳定性。&lt;/li&gt;
&lt;li&gt;局域网聊天&lt;/li&gt;
&lt;li&gt;文件对传&lt;/li&gt;
&lt;li&gt;实验室论坛一键连接&lt;/li&gt;
&lt;li&gt;实验室服务器登陆&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;软件下载：&lt;/code&gt;www.cortfly.com&lt;br&gt;&lt;code&gt;github源码：&lt;/code&gt; &lt;a href=&quot;https://github.com/unsky/cortfly&quot;&gt;https://github.com/unsky/cortfly&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="cortfly" scheme="http://yoursite.com/tags/cortfly/"/>
    
  </entry>
  
  <entry>
    <title>Letter Combinations of a Phone Number</title>
    <link href="http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://yoursite.com/2017/01/18/Letter-Combinations-of-a-Phone-Number/</id>
    <published>2017-01-18T07:49:48.000Z</published>
    <updated>2017-01-18T07:55:50.564Z</updated>
    
    <content type="html"><![CDATA[<p>Given a digit string, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p>
<p><img src="/images/leetcodeid17/1.png" alt=""></p>
<p>Input:Digit string “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].<br><a id="more"></a><br>问题可以归结为backtracking问题，使用递归，需要建立对应得字母表<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; letterCombinations(string digits) &#123;</div><div class="line">        vector&lt;string&gt; res;</div><div class="line">        if (digits.length()==0)</div><div class="line">    return res;</div><div class="line">     string dict[] = &#123;" ", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"&#125;;</div><div class="line">    string comb(digits.length(),'/0');</div><div class="line">           backtracking(digits,res,dict,comb,0);</div><div class="line">           return res;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  void  backtracking(string digits,vector&lt;string&gt; &amp;res,string dict[],string &amp;comb, int index)</div><div class="line">    &#123; if(index==digits.size())</div><div class="line">      &#123;res.push_back(comb);</div><div class="line">          return;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      string str=dict[digits[index]-'0'];</div><div class="line">      for(int i=0;i&lt;str.length();i++)</div><div class="line">      &#123;comb[index]=str[i];</div><div class="line">         backtracking(digits,res,dict,comb,index+1);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
&lt;p&gt;A mapping of digit to letters (just like on the telephone buttons) is given below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/leetcodeid17/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Input:Digit string “23”&lt;br&gt;Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>3Sum Closest</title>
    <link href="http://yoursite.com/2017/01/18/3Sum-Closest/"/>
    <id>http://yoursite.com/2017/01/18/3Sum-Closest/</id>
    <published>2017-01-18T07:44:48.000Z</published>
    <updated>2017-01-18T07:48:59.936Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>3Sum Closest   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 109596<br>Total Submissions: 358454<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p>For example, given array S = {-1 2 1 -4}, and target = 1.</p>
<p>The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</p>
<a id="more"></a>
<p>和3sum差不多，使用双指针，唯一得区别是每次指针移动判断得是和目标之间得距离得绝对值。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.size()==<span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> interval=<span class="number">0</span>;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        res=nums[<span class="number">0</span>]+nums[<span class="number">1</span>]+nums[nums.size()<span class="number">-1</span>];</div><div class="line">        interval=<span class="built_in">abs</span>(target-res);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;</div><div class="line">          <span class="keyword">int</span> j=i+<span class="number">1</span>,k=nums.size()<span class="number">-1</span>;</div><div class="line"></div><div class="line">            <span class="keyword">while</span>(j!=k)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==target)</div><div class="line">              <span class="keyword">return</span> target;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&lt;target)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">             <span class="keyword">if</span>(target-nums[i]-nums[j]-nums[k]&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(target-nums[i]-nums[j]-nums[k]);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">            &#125;</div><div class="line">          j++; &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]&gt;target)</div><div class="line">            &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]-target&lt;interval)</div><div class="line">            &#123;interval=<span class="built_in">abs</span>(nums[i]+nums[j]+nums[k]-target);</div><div class="line">            res=nums[i]+nums[j]+nums[k];</div><div class="line">          &#125; k--;&#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;3Sum Closest   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 109596&lt;br&gt;Total Submissions: 358454&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;For example, given array S = {-1 2 1 -4}, and target = 1.&lt;/p&gt;
&lt;p&gt;The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="3Sum Closest" scheme="http://yoursite.com/tags/3Sum-Closest/"/>
    
  </entry>
  
  <entry>
    <title>QT从入门到放弃:(6)Frame类族</title>
    <link href="http://yoursite.com/2017/01/11/QT%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%886%EF%BC%89Frame%E7%B1%BB%E6%97%8F/"/>
    <id>http://yoursite.com/2017/01/11/QT从入门到放弃：（6）Frame类族/</id>
    <published>2017-01-11T06:53:43.000Z</published>
    <updated>2017-01-11T07:07:04.486Z</updated>
    
    <content type="html"><![CDATA[<p>QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，<br><a id="more"></a><br>带有边框得不叫主要特点是文本编辑器类QTextEdit类和各种项目视图.</p>
<p><img src="/images/frame/1.png" alt=""><br><img src="/images/frame/2.png" alt=""></p>
<h1 id="QFrame"><a href="#QFrame" class="headerlink" title="QFrame"></a>QFrame</h1><p>在设计器中拖入frame，右下角可以修改其具体属性。<br><img src="/images/frame/3.png" alt=""><br>效果如：<br><img src="/images/frame/4.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QFramae 类是带有边框得基类，它得子类有最常用得标签部件QLabel,QLCDNumber,QSplitter,QStackedWidget,QToolBox,QAbstractScrollArea类，其中再QT中凡是带有Abstract字样得类都是抽象基类，对于抽象基类我们不能直接使用，但是可以继承该类实现自己得类。或者使用他提供得子类，&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep Learning Strong Parts for Pedestrian Detection</title>
    <link href="http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/"/>
    <id>http://yoursite.com/2016/12/09/Deep-Learning-Strong-Parts-for-Pedestrian-Detection/</id>
    <published>2016-12-09T13:04:02.000Z</published>
    <updated>2016-12-09T14:17:52.550Z</updated>
    
    <content type="html"><![CDATA[<p> Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。<br> <a id="more"></a><br> 本论文的核心思想是遮挡的处理问题。</p>
<h1 id="出发点"><a href="#出发点" class="headerlink" title="出发点"></a>出发点</h1><p> 传统的行人检测对遮挡行人的处理都是用单分类器进行处理，这篇论文，将不再适用单分类器，而是用多分类器处理遮挡问题。同时这种方法是基于分块的。</p>
<h1 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h1><ol>
<li>构建了一个部件池包含很多行人的分块，这些分块是自动选择的而且适用于不同的数据集。</li>
<li>基于各种CovNets,对各种分块分别训练一个网络，而不是单个分类器。</li>
<li><p>提出了一种解决偏移的方法。</p>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="部件池的构建"><a href="#部件池的构建" class="headerlink" title="部件池的构建"></a>部件池的构建</h2><p><img src="/images/deeppart/1.png" alt=""></p>
<p>讲一个行人切分成2m<em>m个cell,在具体的试验中m=3.<br>就是18个cell,<br>然后适用一个h</em>w的滑动窗口在cell上滑动，步长是1，其中h和w满足<br><img src="/images/deeppart/2.png" alt=""><br>就是限制他们的大小，不能太小，太小了没意义。最后在实验的时候最小都取了2.</p>
<p>这样通过滑动，总共可以选择出45个这种部件。构造除了我们的部件池。用如下的公式表示<br><img src="/images/deeppart/3.png" alt=""></p>
</li>
</ol>
<p>x,y是左上的坐标，w，h是高，i是id,总共45个  这种表示方法的意思就是如果是整个图像就是（1，1，m，2m,id）</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p><img src="/images/deeppart/4.png" alt=""><br>对于负样本直接滑动出45个部件，<br>      对于正样本，需要选择，如果可见部分超过0.4就选择其是人的部件为正样本。如果这个人没又遮挡，直接滑动出45个部分。这样正负样本总共包含45部分，拿着这45种部件，训练45个探测器。。。（内心os:这居然是优点·····）</p>
<p>对于探测器直接用了pre-train的模型，然后进行fine-turning,<br>    fine-turning阶段吐槽一下作者的原话：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  we uniformly sample 16 positive and 48</div><div class="line">negative windows to construct a mini-batch. Experiments</div><div class="line">show that fine-tuning for 10000 iterations with a learning</div><div class="line">rate of 0.001 is sufficient to converge</div></pre></td></tr></table></figure>
<p>相当于重新训练一次了。。。</p>
<h1 id="处理偏移"><a href="#处理偏移" class="headerlink" title="处理偏移"></a>处理偏移</h1><p>为了接收任意尺寸的图片<br><img src="/images/deeppart/5.png" alt=""><br>他们把最后的全连接层换成了卷积层，这样就可以接收任意的尺寸了。<br>以下拿AlexNet为例子<br>因为AlexNet的感受野的步长是32<br>所以对原始的候选框进行抖动扩充：<br><img src="/images/deeppart/6.png" alt=""><br>其中<br><img src="/images/deeppart/7.png" alt="">是原始图像，这个公式的意思就是按照神经网络的步长进行比例的扩充。这样最终的卷积层产生的就是（1+n）<em>(1+n)</em>4096的score map。<br><img src="/images/deeppart/8.png" alt=""><br>作者先解释了一下偏移问题的重要性，然后拿了一个n=2的例子进行的讲解。</p>
<p>在这里，因为最终生成的是（1+n）<em>(1+n)</em>4096的score map<br><img src="/images/deeppart/9.png" alt=""><br>所以直接对其加入惩罚之后进行max(相当于max pooling)<br>    <img src="/images/deeppart/10.png" alt=""><br>  其实这个惩罚就是原位置的加权，</p>
<p>在实验中他们探究了a和b的值, 上图的例子中a=2 b=10.</p>
<h1 id="部件补充"><a href="#部件补充" class="headerlink" title="部件补充"></a>部件补充</h1><p>和R-CNN不同，它去掉了svm的分类，直接拿45个部件的1<em>1</em>4096的进行svm分类。。来判断最终的分类结果。。。</p>
<h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>在AlexNet测试了三种部件：</p>
<p><img src="/images/deeppart/11.png" alt=""><br>加入偏移处理之后<br><img src="/images/deeppart/12.png" alt=""><br>三种模型上的三种部件对比：<br> <img src="/images/deeppart/13.png" alt=""></p>
<p> 整体在caltech-test<br> <img src="/images/deeppart/14.png" alt=""><br> 上的结果。<br><img src="/images/deeppart/15.png" alt=""><br>其他数据集<br><img src="/images/deeppart/16.png" alt=""><br>前六个分数最高的部件和随机选的六个部件。<br><img src="/images/deeppart/17.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Deep Learning Strong Parts for Pedestrian Detection 是发表在iccv2015的文章。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iccv2015" scheme="http://yoursite.com/tags/iccv2015/"/>
    
      <category term="Pedestrian Detection" scheme="http://yoursite.com/tags/Pedestrian-Detection/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(5)标准对话框</title>
    <link href="http://yoursite.com/2016/12/09/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%885%EF%BC%89%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    <id>http://yoursite.com/2016/12/09/QT5从入门到放弃：（5）标准对话框/</id>
    <published>2016-12-09T09:40:39.000Z</published>
    <updated>2016-12-12T15:10:27.776Z</updated>
    
    <content type="html"><![CDATA[<p>Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。<br><a id="more"></a><br><code>中文问题note:</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这里使用了qt5+msvc2013编译器，对于中文乱码问题，可以直接在cpp文件中加入，</div><div class="line">#pragma execution_character_set(&quot;utf-8&quot;)</div><div class="line">即可直接输入汉字。</div></pre></td></tr></table></figure></p>
<p>我们挨个实验一下标准对话框：</p>
<h1 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h1><p>在设计师界面加入一个新的<br><code>push button</code><br>右键转到槽之后加入代码：<br>首先调用头文件</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QColorDialog&gt;</span></span></div></pre></td></tr></table></figure>
<p>加入代码：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    QColor color=QColorDialog::getColor(Qt::red,<span class="keyword">this</span>,<span class="string">"颜色"</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"颜色："</span>&lt;&lt;color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中队中color返回的 (ARGB alpha,red,green,blue) alpha是透明度1.0完全不透明,alpha 0.0是完全透明。 R G B用0~255的数值进行表示。<br>我们也可以分步的进行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QColorDialog <span class="title">dia</span><span class="params">(Qt::red,<span class="keyword">this</span>)</span></span>;<span class="comment">//初始颜色和父窗口</span></div><div class="line">    dia.setWindowTitle(<span class="string">"挑选喜欢的颜色"</span>);</div><div class="line">    dia.setOption(QColorDialog::ShowAlphaChannel);<span class="comment">//显示alpha</span></div><div class="line">    dia.exec();</div><div class="line"> <span class="comment">//   QColor color=QColorDialog::getColor(Qt::red,this,"爱国者导弹");</span></div><div class="line">  <span class="comment">//  qDebug()&lt;&lt;"颜色："&lt;&lt;color;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h1><p>新建一个push button 右键转到槽 引入头文件QFontDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"(*png)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于不同类型的文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QString filename=QFileDialog::getOpenFileName(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div></pre></td></tr></table></figure></p>
<p>这里只可以选择一个文件，如果要选择多个文件可以使用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">   QStringList filename=QFileDialog::getOpenFileNames(<span class="keyword">this</span>,<span class="string">"选择文件"</span>,<span class="string">"C:"</span>,<span class="string">"图片(*png);;文本(*txt)"</span>);</div><div class="line">   qDebug()&lt;&lt;filename;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>QStringList 可以存储多个字符串，getOpenFileNames可以选择多个文件并返回名字。</p>
<h1 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h1><p>新建一个push button 之后右键转到槽：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_3_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QFont font= QFontDialog::getFont(&amp;ok,<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span>(ok) <span class="keyword">this</span>-&gt;setFont(font);</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有选择字体"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于给固定的窗口选择字体可以使用，ui-&gt;pushButton_3-&gt;setFont(front);在这里对this窗口进行设置字体，会使窗口上的所有按钮字体改变。</p>
<h1 id="输入对话框"><a href="#输入对话框" class="headerlink" title="输入对话框"></a>输入对话框</h1><p>新建push Button 之后 引入头文件QInputDialog<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_4_clicked()</div><div class="line">&#123; <span class="keyword">bool</span> ok;</div><div class="line">    QString str=QInputDialog::getText(<span class="keyword">this</span>,<span class="string">"输入字符串对话框"</span>,<span class="string">"请输入用户名"</span>,QLineEdit::Normal,<span class="string">"admin:"</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;str;</div><div class="line">    <span class="keyword">else</span> qDebug()&lt;&lt;<span class="string">"没有输入"</span>;</div><div class="line">    <span class="keyword">int</span> val= QInputDialog::getInt(<span class="keyword">this</span>,<span class="string">"整数输入"</span>,<span class="string">"请输入整数"</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">500</span>,<span class="number">100</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val;</div><div class="line">    <span class="keyword">double</span> val_double=QInputDialog::getDouble(<span class="keyword">this</span>,<span class="string">"double"</span>,<span class="string">"输入"</span>,<span class="number">-100</span>,<span class="number">-500</span>,<span class="number">4000</span>,<span class="number">5</span>,&amp;ok);</div><div class="line">    <span class="keyword">if</span>(ok) qDebug()&lt;&lt;val_double;</div><div class="line">    QStringList strs;</div><div class="line">    strs&lt;&lt;<span class="string">"条目一"</span>&lt;&lt;<span class="string">"战士"</span>;</div><div class="line">    QString str2=QInputDialog::getItem(<span class="keyword">this</span>,<span class="string">"目录"</span>,<span class="string">"s卷积"</span>,strs,<span class="number">0</span>,<span class="number">1</span>,&amp;ok);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里总共包括 getText函数输入字符串，getInt输入整数 getDouble输入双精度数。getItem输入条目。<br>在输入条目中可以使用一个 QStringList 类型的字符串进行选择。</p>
<h1 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h1><p>新建push Button右键转到槽，包含头文件QMessageBox<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_5_clicked()</div><div class="line">&#123; <span class="keyword">int</span> val= QMessageBox::question(<span class="keyword">this</span>,<span class="string">"请回答"</span>,<span class="string">"你是谁？"</span>,QMessageBox::Yes,QMessageBox::No);</div><div class="line">    <span class="keyword">if</span> (val==QMessageBox::No) qDebug()&lt;&lt;<span class="string">"你真笨"</span>;</div><div class="line">    <span class="keyword">int</span> val2=QMessageBox::information(<span class="keyword">this</span>,<span class="string">"about"</span>,<span class="string">"niha "</span>,QMessageBox::Ok);</div><div class="line">    <span class="keyword">if</span>(val2==QMessageBox::Ok) qDebug()&lt;&lt;<span class="string">"urhgi"</span>;</div><div class="line"><span class="keyword">int</span> val3=QMessageBox::warning(<span class="keyword">this</span>,<span class="string">"警告"</span>,<span class="string">"会有，计划规划"</span>,QMessageBox::Abort);</div><div class="line"><span class="keyword">if</span> (val3==QMessageBox::Abort) qDebug()&lt;&lt;<span class="string">"关于i"</span>;</div><div class="line"><span class="keyword">int</span> val4=QMessageBox::critical(<span class="keyword">this</span>,<span class="string">"错误"</span>,<span class="string">"这是一个很严重的错误"</span>,QMessageBox::YesAll);</div><div class="line"><span class="keyword">if</span>(val4==QMessageBox::YesAll) qDebug()&lt;&lt;<span class="string">"haha"</span>;</div><div class="line">  QMessageBox::about(<span class="keyword">this</span>,<span class="string">"关于"</span>,<span class="string">"uhgthtuirhytrini2016/12/9"</span>);</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里包含，question informarion warning critical和about五个函数。<br>同时可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">符号                编号</div><div class="line">QMessageBox::Yes    16384</div><div class="line">QMessageBox::No     65536</div><div class="line">QMessageBox::Ok     1024</div><div class="line">QMessageBox::Abort  262144</div><div class="line">QMessageBox::YesAll 32768</div></pre></td></tr></table></figure></p>
<p>对应的数字使QMessageBox内置的编号.</p>
<h1 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h1><p>新建push Button 右键转到槽 引入头文件QProgressDialogsses<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_6_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QProgressDialog <span class="title">pd</span><span class="params">(<span class="string">"进度"</span>,<span class="string">"jiyhui"</span>,<span class="number">0</span>,<span class="number">90000</span>,<span class="keyword">this</span>)</span></span>;</div><div class="line">    pd.setWindowTitle(<span class="string">"nihighi"</span>);</div><div class="line">    pd.setModal(<span class="literal">true</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000</span>;i++)</div><div class="line">    &#123;pd.setValue(i);</div><div class="line">        QCoreApplication::processEvents();</div><div class="line">        <span class="keyword">if</span>(pd.wasCanceled()) <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    pd.setValue(<span class="number">900000</span>);</div><div class="line">    qDebug()&lt;&lt;<span class="string">"结束"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里将其设为模态，使用setValue显示进度，processEvents()用于避免界面被冻结。使用wasCanceled()判断其是否被取消<br>在最后需要显示最后一个值进行setValue()完成不然只会99%的进度。</p>
<h1 id="错误消息对话框"><a href="#错误消息对话框" class="headerlink" title="错误消息对话框"></a>错误消息对话框</h1><p>新建push Button 右键转到槽，引入头文件QErrorMessage<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_7_clicked()</div><div class="line">&#123;</div><div class="line">    QErrorMessage *EM=<span class="keyword">new</span> QErrorMessage(<span class="keyword">this</span>);</div><div class="line">    EM-&gt;setWindowTitle(<span class="string">"错误"</span>);</div><div class="line">    EM-&gt;showMessage(<span class="string">"这是一个很严重的错误"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里使用new的方式建立非模态对话框。在这个对话框中有一个默认的选项，show this message again,的复选框。</p>
<h1 id="向导对话框"><a href="#向导对话框" class="headerlink" title="向导对话框"></a>向导对话框</h1><p>对于引导页面，首先需要新建引导页，在mydialog.h中引入#include<qwizard>，并声明需要使用的页面：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MYDialog *ui;</div><div class="line">    <span class="function">QWizardPage *<span class="title">createpage1</span><span class="params">()</span></span>;</div><div class="line">     <span class="function">QWizardPage *<span class="title">createpage2</span><span class="params">()</span></span>;</div><div class="line">      <span class="function">QWizardPage * <span class="title">createpage3</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></qwizard></p>
<p>在这里声明了三个页面函数。单击函数右键选择跳转到定义，在mydialog.cpp中<br>定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage1()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"介绍"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage2()</div><div class="line">&#123;QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">    page-&gt;setTitle(<span class="string">"卡特飞学术论坛"</span>);</div><div class="line">    <span class="keyword">return</span> page;</div><div class="line">&#125;</div><div class="line"></div><div class="line">QWizardPage *MYDialog::createpage3()</div><div class="line">&#123;</div><div class="line">    QWizardPage * page=<span class="keyword">new</span> QWizardPage;</div><div class="line">        page-&gt;setTitle(<span class="string">"结束"</span>);</div><div class="line">        <span class="keyword">return</span> page;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即完成了三个页面函数的定义。</p>
<p>之后开始使用按钮进行关联。<br>新建push Button 右键转到槽 并引入 QWizard<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> MYDialog::on_pushButton_8_clicked()</div><div class="line">&#123;</div><div class="line">    <span class="function">QWizard <span class="title">q</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    q.setWindowTitle(<span class="string">"智能向导"</span>);</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage2());</div><div class="line">    q.addPage(createpage1());</div><div class="line">    q.addPage(createpage3());</div><div class="line">    q.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/basedialog/1.png" alt=""><br><img src="/images/basedialog/2.png" alt=""><br><img src="/images/basedialog/3.png" alt=""><br><img src="/images/basedialog/4.png" alt=""><br><img src="/images/basedialog/5.png" alt=""><br><img src="/images/basedialog/6.png" alt=""><br><img src="/images/basedialog/7.png" alt=""><br><img src="/images/basedialog/8.png" alt=""><br><img src="/images/basedialog/9.png" alt=""><br><img src="/images/basedialog/10.png" alt=""><br><img src="/images/basedialog/11.png" alt=""><br><img src="/images/basedialog/12.png" alt=""><br><img src="/images/basedialog/13.png" alt=""><br><img src="/images/basedialog/14.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Qt提供了丰富的标准对话框，全部继承自QDialog类，并且加入了自己的特色。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="标准对话框" scheme="http://yoursite.com/tags/%E6%A0%87%E5%87%86%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(4)窗口通讯初步</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(4)%E7%AA%97%E5%8F%A3%E9%80%9A%E8%AE%AF%E5%88%9D%E6%AD%A5/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(4)窗口通讯初步/</id>
    <published>2016-12-07T03:18:52.000Z</published>
    <updated>2016-12-07T16:11:07.055Z</updated>
    
    <content type="html"><![CDATA[<p>信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。<br><a id="more"></a><br>QT可以手动设置信号与槽也可以自动设置，为了了解最基本的原理我们从最基本的手动设置开始：</p>
<h1 id="手动实现信号与槽"><a href="#手动实现信号与槽" class="headerlink" title="手动实现信号与槽"></a>手动实现信号与槽</h1><p>  <img src="/images/signalbase/1.png" alt=""><br>  如图在设计师模块中加入push button 并将其objectName 设置为showChild.<br>   下面开始使用这个push button.</p>
<p>   首先明确我们的目的师设计按下push button之后产生信号，信号激活槽内的程序使其产生一个label的窗口。</p>
<p>   首先我们需要先声明槽（slots）.<br>   <code>note：</code><br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">c++编程补充：因为c++需要声明和定义，一般都将声明写进 .h文件，而定义写在.cpp文件中。</div><div class="line">在程序的书写中不需要包含各种cpp文件，程序在执行中动态的调用各种函数。</div></pre></td></tr></table></figure></p>
<p>   所以我们先在mainwindow.h声明槽<br>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">class</span> MainWindow : <span class="keyword">public</span> QMainWindow</div><div class="line">&#123;</div><div class="line">    Q_OBJECT</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</div><div class="line">    ~MainWindow();</div><div class="line">   <span class="keyword">public</span> slots:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::MainWindow *ui;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></div></pre></td></tr></table></figure></p>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> slots:</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">showChild</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>声明了槽函数 showChild();<br>在声明完之后我们需要给其具体的定义,在mainwindow.cpp中进行定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为我们在mainwindow.h中定义了类的名字空间<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> MainWindow;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以这里函数的具体定义我们应该写成：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">void</span> MainWindow::showChild()</div><div class="line">&#123;  QLabel *label=<span class="keyword">new</span> QLabel();</div><div class="line">  label-&gt;setText(<span class="string">"I AM SLOT!"</span>);</div><div class="line"></div><div class="line">    label-&gt;show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在定义完之后。我们需要进行具体的连接，也就是将信号和槽进行连接，我们在类的构造函数内完成，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connect(ui-&gt;showChildButton,SIGNAL(clicked()),<span class="keyword">this</span>,SLOT(showChild()));</div></pre></td></tr></table></figure></p>
<p> connect的第一个参数是发送信号的对象，第二个是信号，第三个是接受信号的对象,第四个是槽函数。<br> 这是手工的做法</p>
<h1 id="自动信号与槽"><a href="#自动信号与槽" class="headerlink" title="自动信号与槽"></a>自动信号与槽</h1><p>我们现在简单的实现一个登陆界面和主界面的切换程序。</p>
<p>从最开始开始。新建一个空的项目。</p>
<p>在工程文件里加上<code>QT + =widgets</code></p>
<h2 id="新建第一个登陆界面："><a href="#新建第一个登陆界面：" class="headerlink" title="新建第一个登陆界面："></a>新建第一个登陆界面：</h2><p>新建一个空的QT设计师<br>选择Dialog without buttons<br>类名就写 myDialog<br>  <img src="/images/signalbase/2.png" alt=""><br>  点F4进入信号与槽模式<br>  先设计退出按钮，左键点击退出按钮的下边然后拉到主窗口的边缘，意思也就是信号源是退出按钮，接受源是整个窗口。<br>    <img src="/images/signalbase/3.png" alt=""><br>    设计成功后的样子：<br>        <img src="/images/signalbase/4.png" alt=""><br>然后再设计进入主程序：<br>F3回到设计模式，右键点击进入主程序按钮，选择转到槽，然后选择click(),之后点击确定。</p>
<p>这时候转到了myDialog类的源文件即 myDialog.cpp加入代码，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<pre><code>其中on_pushButton_clicked()，其声明在myDialog里也被自动声明完了，就是上面我们所说的实现模式就是自动生成函数
我们在里面加入：
</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  accept()这个函数的作用就是判断哪个是主程序界面这个按钮被按下，如果被按下则返回<code>QDialog::Accepted</code>.</p>
<h2 id="设计第二个界面"><a href="#设计第二个界面" class="headerlink" title="设计第二个界面"></a>设计第二个界面</h2><p>  第二个界面有：<br>    <img src="/images/signalbase/5.png" alt=""></p>
<h3 id="重新登陆按钮的设计："><a href="#重新登陆按钮的设计：" class="headerlink" title="重新登陆按钮的设计："></a>重新登陆按钮的设计：</h3><p>和前面一样，右键转到槽</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    close();</div><div class="line">    myDialog win;</div><div class="line">   win.show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即关闭之后重新建立一个myDialog窗口。</p>
<h3 id="退出按钮"><a href="#退出按钮" class="headerlink" title="退出按钮"></a>退出按钮</h3><p>和前面的退出按钮设计相同。</p>
<h3 id="显示label按钮"><a href="#显示label按钮" class="headerlink" title="显示label按钮"></a>显示label按钮</h3><p>右键转到槽<br>加入<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div><div class="line">至此没有Dialog.cpp变为</div><div class="line"></div><div class="line"></div><div class="line">```cpp</div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog1.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog1::myDialog1(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog1)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog1::~myDialog1()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_clicked()</div><div class="line">&#123;</div><div class="line">    accept();</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> myDialog1::on_pushButton_2_clicked()</div><div class="line">&#123;</div><div class="line">    QLabel *label=<span class="keyword">new</span> QLabel(<span class="keyword">this</span>);</div><div class="line">    label-&gt;setText(<span class="string">"uhgiuhuh"</span>);</div><div class="line">    label-&gt;show();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog1.h"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">w</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    myDialog win1;</div><div class="line">    myDialog1 win2;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(win1.exec()==QDialog::Accepted)</div><div class="line">    &#123;  <span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">        &#123; win1.show();</div><div class="line">            <span class="keyword">return</span> w.exec();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>即如果第一界面的进入主程序被按下，执行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(win2.exec()==QDialog::Accepted)</div><div class="line">   &#123; win1.show();</div><div class="line">       <span class="keyword">return</span> w.exec();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这句语句的意思是如果第二个窗口的重新登陆被按下则显示第一个界面。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;信号和槽的机制简单理解就是，做一件事，发射一种信号，然后执行槽内的程序。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="信号和槽" scheme="http://yoursite.com/tags/%E4%BF%A1%E5%8F%B7%E5%92%8C%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(3)模态与非模特</title>
    <link href="http://yoursite.com/2016/12/07/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(3)%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E7%89%B9/"/>
    <id>http://yoursite.com/2016/12/07/QT5从入门到放弃：(3)模态与非模特/</id>
    <published>2016-12-07T02:23:34.000Z</published>
    <updated>2016-12-07T03:14:14.742Z</updated>
    
    <content type="html"><![CDATA[<p>对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。<br><a id="more"></a><br>直接看例子：</p>
<p><code>main.cpp</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    MainWindow w;</div><div class="line">    w.show();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为我们只在 MainWindow的构造函数中实验，所以只有定义即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到一个窗口一闪而过。剩下的是w窗口被保留，在函数的构造函数里面我们定义了一个窗口win并且指定了this（w） 为其父，在运行中其一闪而过的只剩下W原因是：他并没有实际的内存空间，在构造函数被调用完之后他就被销毁了，所以我们可以使用指针给他new一个空间：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">    win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样win窗口就被保留下来。<br>此外因为上段程序中指定了父窗口，所以在new完之后不需要进行delete其会随父窗口进行销毁。</p>
<p>我们也可以用：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    <span class="function">QDialog <span class="title">win</span><span class="params">(<span class="keyword">this</span>)</span></span>;</div><div class="line">    win.exec();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样会发现win对话框被显示，但是其父窗口没有被显示。<br>只有我们关闭了win之后w窗口才会被显示出来。</p>
<p>这种对话框我们称之为模态对话框，而上面的写法被成为非模态对话框。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">定义</div><div class="line"></div><div class="line">模态对话框：即没有关闭该对话框之前不能再于其他窗口进行交互。如新建项目时候，我们只能再这个窗口进行操作，只有关了它才能进行其他的操作。</div><div class="line"></div><div class="line">非模态对话框：可以再运行时候可以与其他窗口自由交互。</div></pre></td></tr></table></figure></p>
<p>可以看到，如果让窗口是非模态的只需使用指针进行new即可，而让窗口是模态的只需调用其exec()属性即可。<br>当然 我们也可以使用setModal()函数进行声明。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line">MainWindow::MainWindow(QWidget *parent) :</div><div class="line">    QMainWindow(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">    QDialog *win=<span class="keyword">new</span> QDialog(<span class="keyword">this</span>);</div><div class="line">   win-&gt;setModal(<span class="literal">true</span>);</div><div class="line">   win-&gt;show();</div><div class="line">&#125;</div><div class="line"></div><div class="line">MainWindow::~MainWindow()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这种写法可以将win变为模态的，在运行时候会发现，两个窗口都会出现，但是我们只能对win进行拖拽等操作，只有关闭了win才可以对w进行操作。</p>
<p><code>原因：</code><br><code>因为在运行完show()之后程序会将控制权交给调用者继续执行，而exec()则是在程序执行完操作之后才交出控制权从而继续执行。</code></p>
<p>还有和setModal()相似的函数，setWindowModality()它可以通过设置参数来进行模态和模态的控制有：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Qt::NonModal 非模态</div><div class="line">Qt::WindowModal 阻塞所有祖先</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对话框按照是否可以在运行时可以和其他窗口进行交互可以分为：模态与非模态对话框。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
      <category term="模态与非模态" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%80%81%E4%B8%8E%E9%9D%9E%E6%A8%A1%E6%80%81/"/>
    
  </entry>
  
  <entry>
    <title>3Sum</title>
    <link href="http://yoursite.com/2016/12/06/3Sum/"/>
    <id>http://yoursite.com/2016/12/06/3Sum/</id>
    <published>2016-12-06T13:41:05.000Z</published>
    <updated>2016-12-07T03:17:28.835Z</updated>
    
    <content type="html"><![CDATA[<p>Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 165869<br>Total Submissions: 802806<br>Difficulty: Medium<br>Contributors: Admin<br>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br><a id="more"></a><br>Note: The solution set must not contain duplicate triplets.</p>
<p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p>
<p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p>
<p>这道题目因为需要去重和遍历，所以用传统的方法遍历会出现很多的重复步骤，因为这个题目不要重复值，所以我们可以对其先进行排序，双指针在有序的数列问题中表现很好，所以使用双指针算法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; threeSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; result;</div><div class="line">        <span class="keyword">if</span>(nums.size()&lt;<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">        sort(nums.begin(),nums.end());</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size()<span class="number">-2</span>;i++)</div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">if</span> ((i&gt;<span class="number">0</span>)&amp;&amp;nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</div><div class="line">          <span class="keyword">int</span> left=i+<span class="number">1</span>;</div><div class="line">          <span class="keyword">int</span> right=nums.size()<span class="number">-1</span>;</div><div class="line">          <span class="keyword">while</span>(left&lt;right)</div><div class="line"></div><div class="line">          &#123;  </div><div class="line">              <span class="keyword">if</span>((nums[left]+nums[right])==(<span class="number">-1</span>*nums[i]))</div><div class="line">                &#123; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</div><div class="line">                vec.push_back(nums[i]);</div><div class="line">                vec.push_back(nums[left]);</div><div class="line">                vec.push_back(nums[right]);</div><div class="line">                result.push_back(vec);</div><div class="line">                left++;</div><div class="line">                right--;</div><div class="line">                <span class="keyword">while</span>(nums[left]==nums[left<span class="number">-1</span>]) left++;</div><div class="line"></div><div class="line">                <span class="keyword">while</span>(nums[right]==nums[right+<span class="number">1</span>]) right--;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span>((nums[left]+nums[right])&lt;(<span class="number">-1</span>*nums[i]))</div><div class="line">                    left++;</div><div class="line">                <span class="keyword">else</span>  right--;</div><div class="line"></div><div class="line"></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>该算法的核心，因为首先进行了排序，所以可以方便的使用双指针，如果小于一个目标值则进行left+1,大于则right-1.<br>关键步骤是去重。因为对于排序过后的数组，这三个数如果和在向下一步走的时候，如何和上一步相等则即可判断为重复。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Id.15. 3Sum   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 165869&lt;br&gt;Total Submissions: 802806&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="http://yoursite.com/2016/12/03/Longest-Common-Prefix/"/>
    <id>http://yoursite.com/2016/12/03/Longest-Common-Prefix/</id>
    <published>2016-12-03T12:43:58.000Z</published>
    <updated>2016-12-03T12:53:49.665Z</updated>
    
    <content type="html"><![CDATA[<p>id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 137142<br>Total Submissions: 452531<br>Difficulty: Easy<br>Contributors: Admin<br>Write a function to find the longest common prefix string amongst an array of strings.<br><a id="more"></a><br>题目的意思是找到n多字符串中的最大公共前缀<br>直接写代码了：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">if</span>(strs.empty())<span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strs[<span class="number">0</span>].size();i++)<span class="comment">//拿任意一个做标度</span></div><div class="line">        &#123;  <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;strs.size();j++)</div><div class="line">             &#123;<span class="keyword">if</span>(strs[<span class="number">0</span>][i]!=strs[j][i])</div><div class="line">              <span class="keyword">return</span> result;</div><div class="line">             &#125;</div><div class="line">             result.push_back(strs[<span class="number">0</span>][i]);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中<br>  <code>for(int i=0;i&lt;strs[0].size();i++)//拿任意一个做标度</code>可以随便拿其中一个字符串做标度，因为是求最大公共前缀所以必须保证所有的都有，如果我们任意选择的都没有，说明就不是公共字串，为了控制简单所以使用第一个来进行。<br>  此外，一些语法的问题<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</div><div class="line">可以表示的数组是</div><div class="line">&#123;</div><div class="line">  &#123;dgh&#125;,</div><div class="line">  &#123;dfgth&#125;,</div><div class="line">  &#123;dgreuihgre&#125;,</div><div class="line">&#125;</div><div class="line">strs[<span class="number">0</span>]=<span class="string">"dgh"</span>;</div><div class="line">strs[<span class="number">0</span>][<span class="number">0</span>]=‘d’;</div><div class="line">此外 对于 <span class="built_in">string</span> 的后插操作</div><div class="line"><span class="built_in">string</span> s;</div><div class="line">s.append(<span class="string">"a"</span>);正确</div><div class="line">但是s.append(‘a’);错误</div><div class="line">应该使用s.push_back(‘a’);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id14. Longest Common Prefix   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 137142&lt;br&gt;Total Submissions: 452531&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetode" scheme="http://yoursite.com/tags/leetode/"/>
    
      <category term="Longest Common Prefix" scheme="http://yoursite.com/tags/Longest-Common-Prefix/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(2)基础窗口部件</title>
    <link href="http://yoursite.com/2016/12/03/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A%EF%BC%882)%E5%9F%BA%E7%A1%80%E7%AA%97%E5%8F%A3%E9%83%A8%E4%BB%B6/"/>
    <id>http://yoursite.com/2016/12/03/QT5从入门到放弃：（2)基础窗口部件/</id>
    <published>2016-12-03T09:55:49.000Z</published>
    <updated>2016-12-03T11:26:02.867Z</updated>
    
    <content type="html"><![CDATA[<p>QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.<br><a id="more"></a><br>他们之间详细的关系如下：<br><img src="/images/qwidgets/1.png" alt=""></p>
<h1 id="窗口和部件以及窗口类型"><a href="#窗口和部件以及窗口类型" class="headerlink" title="窗口和部件以及窗口类型"></a>窗口和部件以及窗口类型</h1><p> 窗口部件是QT中建立用户元素的主要部件，其中作为部件附属于其他窗口的可以简称为部件，而没有上级的成为窗口（根）<br> 看一段代码：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</div><div class="line">    QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line">    w1-&gt;setWindowTitle(<span class="string">"thie is win1"</span>);</div><div class="line">    QLabel * label1=<span class="keyword">new</span> QLabel();</div><div class="line">    label1-&gt;setText(<span class="string">"label1"</span>);</div><div class="line">    label1-&gt;show();</div><div class="line">    label1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   QLabel *label2=<span class="keyword">new</span> QLabel(w1);</div><div class="line">   label2-&gt;setText(<span class="string">"LABEL2"</span>);</div><div class="line">   w1-&gt;resize(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">   label2-&gt;show();</div><div class="line">   label2-&gt;resize(<span class="number">150</span>,<span class="number">150</span>);</div><div class="line">   w1-&gt;show();</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">return</span> a.exec();</div><div class="line"> <span class="keyword">delete</span> label1;</div><div class="line"> <span class="comment">//  delete label2;</span></div><div class="line">   <span class="keyword">delete</span> w1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 这段程序定义了一个QDialog :w1,两个QLabel: label1和label2.<br> 在这里需要注意的是所有的定义都使用new()开辟空间，所以在最后都需要执行delete操作。<br> 如：<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog();</div><div class="line"><span class="keyword">delete</span> w1;</div></pre></td></tr></table></figure></p>
<p> 在这段程序里我们分析各个部件之间的关系。因为label1没有绑定任何父类，所以他是一个独立的窗口，而label2在新定义的时候，  <code>QLabel *label2=new QLabel(w1);</code>就被绑定上了w1所以其父是w1.<br> 所以有如下的一些特点：</p>
<ol>
<li>label1可以单独显示，而label2不可以单独显示，如果显示w1则显示w1的全部子部件，即label2也被显示出来。</li>
<li><p>在delete的时候，label1和label2都可以单独被销毁，但是如果如果w1被销毁，那么w1的所有子部件也全部被销毁。<br><img src="/images/qwidgets/2.png" alt=""></p>
<h1 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h1><p>QT有非常多的窗口类型，QWidget的构造函数有两个参数<br>一个是<code>QWidget *parent=0</code> 这个参数主要负责该窗口部件的附属关系，默认是0，表示是一个独立窗口，两一个参数是<br><code>Qt::WindowFlags</code>这个参数主要负责的是这个窗口部件的类型。<br>比如我们可以</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog);</div><div class="line">  QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen);</div></pre></td></tr></table></figure>
<p>其效果：<br><img src="/images/qwidgets/3.png" alt=""><br>也可以使用位或操作如：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> QDialog *w1=<span class="keyword">new</span> QDialog(<span class="number">0</span>,Qt::Dialog|Qt::FramelessWindowHint);</div><div class="line"></div><div class="line">QLabel * label1=<span class="keyword">new</span> QLabel(<span class="number">0</span>,Qt::SplashScreen|Qt::WindowStaysOnTopHint);</div></pre></td></tr></table></figure>
<p><img src="/images/qwidgets/4.png" alt=""><br>更加详细的样式，用到再说。</p>
<h1 id="窗口的几何布局"><a href="#窗口的几何布局" class="headerlink" title="窗口的几何布局"></a>窗口的几何布局</h1><p><img src="/images/qwidgets/5.png" alt=""><br>这里的函数主要分为两类，一类是包含框架的，另一个事不包含框架的。</p>
</li>
<li>包含框架的：x(),y(),frameGemetry(),pos(),move()函数</li>
<li><p>不包含框架的：genmetry(),width(),height(),rect()和size()函数。<br>实例程序：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>其中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x=w.x();</div><div class="line"><span class="keyword">int</span> y=w.y();</div></pre></td></tr></table></figure></p>
<p>分别返回窗口部件的坐标值x,y,他们的默认值是0.</p>
<p>而geometry和frameGeometry()函数分别返回没有边框的和包含边框矩形的值，其返回值是QRect类型的，就是一个矩形，他的形式是（x,y,height,width）<br>在这里我们使用QDebug进行调试。<br>程序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QWidget&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDebug&gt;</span></span></div><div class="line"><span class="keyword">using</span>  <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;  <span class="function">QApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</div><div class="line">    QWidget w;</div><div class="line">   <span class="keyword">int</span> x=w.x();</div><div class="line">   <span class="keyword">int</span> y=w.y();</div><div class="line">   QRect gemetry=w.geometry();</div><div class="line">   QRect frame=w.frameGeometry();</div><div class="line">   qDebug()&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y&lt;&lt;<span class="string">" "</span>&lt;&lt;gemetry&lt;&lt;<span class="string">" "</span>&lt;&lt;frame;</div><div class="line">    <span class="keyword">return</span> a.exec();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在引入了QDebug头文件之后，可以直接使用qDebug()函数<br><code>qDebug()&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;gemetry&lt;&lt;&quot; &quot;&lt;&lt;frame;</code>这句语句可以输出。<br>其结果如下：<br> <img src="/images/qwidgets/6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QT提供默认的几类只有QMainWindow,QWidget,QDialog三种，这三种窗体是最常见的,QMainWindow带有菜单栏和工具栏的主窗口类，QDialog是各种对话框的几类，而他们全部继承自QWidget.&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
  </entry>
  
  <entry>
    <title>Roman to Integer</title>
    <link href="http://yoursite.com/2016/12/02/Roman-to-Integer/"/>
    <id>http://yoursite.com/2016/12/02/Roman-to-Integer/</id>
    <published>2016-12-02T14:49:15.000Z</published>
    <updated>2016-12-02T15:06:57.925Z</updated>
    
    <content type="html"><![CDATA[<p>ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 117446<br>Total Submissions: 273074<br>Difficulty: Easy<br>Contributors: Admin<br>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.<br><a id="more"></a><br>这道题同<br><a href="http://deepdim.com/2016/12/01/Integer-to-Roman/" target="_blank" rel="external">http://deepdim.com/2016/12/01/Integer-to-Roman/</a><br>需要特殊处理的有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">IV: 4</div><div class="line">V: 5</div><div class="line">IX: 9</div><div class="line">X: 10</div><div class="line">XL: 40</div><div class="line">L: 50</div><div class="line">XC: 90</div><div class="line">C: 100</div><div class="line">CD: 400</div><div class="line">D: 500</div><div class="line">CM: 900</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</div><div class="line">         <span class="built_in">string</span> roman[] = &#123;<span class="string">"M"</span>,<span class="string">"CM"</span>,<span class="string">"D"</span>,<span class="string">"CD"</span>,<span class="string">"C"</span>,<span class="string">"XC"</span>,<span class="string">"L"</span>,<span class="string">"XL"</span>,<span class="string">"X"</span>,<span class="string">"IX"</span>,<span class="string">"V"</span>,<span class="string">"IV"</span>,<span class="string">"I"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> num[] = &#123;<span class="number">1000</span>,<span class="number">900</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">100</span>,<span class="number">90</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>&#125;;</div><div class="line">         <span class="keyword">int</span> i=<span class="number">0</span>,index=<span class="number">0</span>,result=<span class="number">0</span>;</div><div class="line">         <span class="built_in">string</span> CurString;</div><div class="line">        <span class="keyword">while</span>(i&lt;<span class="number">13</span>)</div><div class="line">        &#123; CurString=s.substr(index,roman[i].size());</div><div class="line">         <span class="keyword">if</span>(CurString==roman[i])</div><div class="line">         &#123;result=result+num[i];</div><div class="line">         index=index+roman[i].size();</div><div class="line">         <span class="built_in">cout</span>&lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">else</span>  <span class="keyword">if</span>((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</div><div class="line">             i++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>其中较为关键的是判断什么时候进行i++<br> <code>if((CurString!=roman[i])||s.substr(index+roman[i].size(),roman[i].size())!=roman[i])</code><br> 即只有在当前不匹配或者下个不匹配的时候才进行i++从而实现了最大三个字母的重复。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ID13. Roman to Integer   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 117446&lt;br&gt;Total Submissions: 273074&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Roman to Integer" scheme="http://yoursite.com/tags/Roman-to-Integer/"/>
    
  </entry>
  
  <entry>
    <title>QT5从入门到放弃:(1)hello,qt!</title>
    <link href="http://yoursite.com/2016/12/02/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9A(1)hello-qt/"/>
    <id>http://yoursite.com/2016/12/02/QT5从入门到放弃：(1)hello-qt/</id>
    <published>2016-12-02T11:26:26.000Z</published>
    <updated>2016-12-03T04:11:22.766Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习使用c++进行QT5学习</p>
<p>QT是一个1998年开始创办的c++库,其界面设计等能力表现不俗,后来被诺基亚收购，之后诺基亚将其开源，后来诺基亚倒闭，QT右digital接着运营。伴随着c++的发展，QT也从QT1发展到QT5，充分运用了c++的新特性。<br><a id="more"></a></p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>QT5的安装非常简单不需要复杂的配置，我使用<br>Qt 5.7.0 for Windows 64-bit (VS 2013, 904 MB)配合vs2013进行，先安装vs2013再安装QT即可。<br>具体的可已根据自己的配置选择不同的编译器等。我的配置如下:<br><img src="/images/helloqt/1.png" alt=""></p>
<h1 id="hello-qt"><a href="#hello-qt" class="headerlink" title="hello,qt!"></a>hello,qt!</h1><p>因为我使用的是qt5但是在学习的资料上还是很多使用QT4，其实他们是可以兼容的。在新建工程的时候选择，<code>qt widgets application</code>，就可以使用QT5下兼容qt4的情况。下面在详细的说。</p>
<p>在生成了项目之后，会自动生成六个文件：<br><img src="/images/helloqt/2.png" alt=""><br><img src="/images/helloqt/3.png" alt=""></p>
<p>现在先从一个基本的空项目开始学习。</p>
<h1 id="基本工程文件-pro"><a href="#基本工程文件-pro" class="headerlink" title="基本工程文件.pro"></a>基本工程文件.pro</h1><p>在工程文件.pro里面：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#-------------------------------------------------</div><div class="line">#</div><div class="line"># Project created by QtCreator <span class="number">2016</span><span class="number">-12</span><span class="number">-02</span>T20:<span class="number">18</span>:<span class="number">03</span></div><div class="line">#</div><div class="line">#-------------------------------------------------</div><div class="line"></div><div class="line">QT       += core gui <span class="comment">//核心模块</span></div><div class="line"></div><div class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets <span class="comment">//如果使用了qt4则调用widgets</span></div><div class="line"></div><div class="line">TARGET = helloworld <span class="comment">//目标程序</span></div><div class="line">TEMPLATE = app <span class="comment">//模板类型，这里是QT widgets application</span></div><div class="line"></div><div class="line"></div><div class="line">SOURCES += main.cpp\   </div><div class="line">        hellpdialog.cpp</div><div class="line"></div><div class="line">HEADERS  += hellpdialog.h  </div><div class="line"></div><div class="line">FORMS    += hellpdialog.ui</div></pre></td></tr></table></figure>
<p>Qt的核心模块 core 和gui 核心模块</p>
<p>可以看出这个文件里包含了所有的工程信息，<br>其中<br><code>greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</code>这句话的作用就是自动识别QT4并使用QT4语句。使QT5兼容QT4</p>
<h1 id="主程序main-cpp"><a href="#主程序main-cpp" class="headerlink" title="主程序main.cpp"></a>主程序main.cpp</h1><p>在这里我们使用空项目进行学习。<br>删光<code>mian.cpp</code>里的代码我们从最基本的开始：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span> <span class="comment">//用于管理应用程序的资源，任何GUI程序都需要该类库</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QLabel&gt;</span><span class="comment">//标签类</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QDialog&gt;</span><span class="comment">//窗口类</span></span></div><div class="line"><span class="comment">//c++主程序</span></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="function">QApplication <span class="title">QAPP</span><span class="params">(argc,argv)</span></span>; <span class="comment">//建立应用程序资源管理器QAPP</span></div><div class="line">     QDialog w; <span class="comment">//新建窗口</span></div><div class="line">     <span class="function">QLabel <span class="title">winlabel</span><span class="params">(&amp;w)</span></span>;<span class="comment">//新建标签并且将其绑定到窗口上</span></div><div class="line">     winlabel.setText(<span class="string">"hello,qt"</span>);<span class="comment">//标签要表达的语句</span></div><div class="line">     w.show(); <span class="comment">//窗口展示</span></div><div class="line">     <span class="keyword">return</span> QAPP.exec();<span class="comment">//返回</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用设计师ui"><a href="#使用设计师ui" class="headerlink" title="使用设计师ui"></a>使用设计师ui</h1><p>删光原来的工程（剩下main.cpp和helloworld.pro）<br>然后删掉<br><code>build-helloworld-Desktop_Qt_5_7_0_MSVC2013_64bit-Debug</code>文件夹。（注意如果修改了.pro的内容而没有生效的话，要删掉这个文件夹，才可以生效）<br>然后新建文件：<br><img src="/images/helloqt/4.png" alt=""><br>命名为mydialog<br>在建立完之后，会生成<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mydialog.h <span class="comment">//mydiaglog ui类头文件</span></div><div class="line">mydialog.cpp <span class="comment">//子函数</span></div><div class="line">mydialog.ui <span class="comment">//ui文件</span></div></pre></td></tr></table></figure></p>
<p>同时在构建之后，ui会在debug文件里生成 <code>ui_mydalog.h</code></p>
<h2 id="mydialog-h"><a href="#mydialog-h" class="headerlink" title="mydialog.h"></a>mydialog.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//避免多重包含</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDIALOG_H</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDialog&gt;</span> <span class="comment">//使用QDialog定义自己的类</span></span></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> myDialog;</div><div class="line">&#125;</div><div class="line"><span class="keyword">class</span> myDialog : <span class="keyword">public</span> QDialog</div><div class="line">&#123;</div><div class="line">    Q_OBJECT <span class="comment">//宏，继承了普通c++类的基本功能</span></div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">myDialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;<span class="comment">//构造函数</span></div><div class="line">    ~myDialog();  <span class="comment">//析构函数</span></div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::myDialog *ui; <span class="comment">//私有变量 ui</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYDIALOG_H</span></span></div></pre></td></tr></table></figure>
<p>这个程序比较重要,需要比较透彻的理解名字空间：<br>首先：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line"><span class="keyword">class</span> myDialog;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是Ui::myDialog的前置声明，注意Ui::myDialog 和我们需要使用的类myDialog是两个不同的东西，在这里只进行了前置声明，而并没有具体的定义。</p>
<p>我们需要调用的类myDialog主要负责是主窗口的设计<br>这是一种组合设计的情况：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">myDialog</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;<span class="comment">//构造函数</span></div><div class="line">    ~myDialog();  <span class="comment">//析构函数</span></div><div class="line"></div><div class="line">```  </div><div class="line"></div><div class="line">这段代码主要负责主窗口的附属关系parent=<span class="number">0</span>就是其是根窗口，处理的附属关系。</div><div class="line"></div><div class="line">```cpp</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    Ui::myDialog *ui; <span class="comment">//私有变量 ui</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>myDialog的私有成员，负责具体的Ui实现，使用Ui::myDialog定义了一个ui指针。在整个过程中Ui::myDialog都只是被声明，而没有被定义。</p>
<h2 id="ui-mydalog-h"><a href="#ui-mydalog-h" class="headerlink" title="ui_mydalog.h"></a>ui_mydalog.h</h2><p>在这个头文件里主要定义了ui类<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/********************************************************************************</span></div><div class="line">** Form generated from reading UI file 'mydialog.ui'</div><div class="line">**</div><div class="line">** Created by: Qt User Interface Compiler version 5.7.0</div><div class="line">**</div><div class="line">** WARNING! All changes made in this file will be lost when recompiling UI file!</div><div class="line">********************************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UI_MYDIALOG_H</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> UI_MYDIALOG_H</span></div><div class="line"><span class="comment">//以上两行是预处理命令，能够防止对这个头文件的多重包含</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/QVariant&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QAction&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QButtonGroup&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QDialog&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QHeaderView&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/QLabel&gt;</span></span></div><div class="line"></div><div class="line">QT_BEGIN_NAMESPACE <span class="comment">//QT名字命名空间的开始</span></div><div class="line"><span class="comment">//定义Ui_myDialog类</span></div><div class="line"><span class="keyword">class</span> Ui_myDialog</div><div class="line">&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    QLabel *label;<span class="comment">//定义标签</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setupUi</span><span class="params">(QDialog *myDialog)</span> <span class="comment">//生成界面函数</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (myDialog-&gt;objectName().isEmpty())</div><div class="line">            myDialog-&gt;setObjectName(QStringLiteral(<span class="string">"myDialog"</span>));</div><div class="line">        myDialog-&gt;resize(<span class="number">400</span>, <span class="number">300</span>);</div><div class="line">        label = <span class="keyword">new</span> QLabel(myDialog);</div><div class="line">        label-&gt;setObjectName(QStringLiteral(<span class="string">"label"</span>));</div><div class="line">        label-&gt;setGeometry(QRect(<span class="number">130</span>, <span class="number">90</span>, <span class="number">151</span>, <span class="number">131</span>));</div><div class="line"></div><div class="line">        retranslateUi(myDialog);</div><div class="line"></div><div class="line">        QMetaObject::connectSlotsByName(myDialog);</div><div class="line">    &#125; <span class="comment">// setupUi</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">retranslateUi</span><span class="params">(QDialog *myDialog)</span><span class="comment">//实现了窗口内字符串的转换</span></span></div><div class="line">    &#123;</div><div class="line">        myDialog-&gt;setWindowTitle(QApplication::translate(<span class="string">"myDialog"</span>, <span class="string">"Dialog"</span>, <span class="number">0</span>));</div><div class="line">        label-&gt;setText(QApplication::translate(<span class="string">"myDialog"</span>, <span class="string">"hello,QT!"</span>, <span class="number">0</span>));</div><div class="line">    &#125; <span class="comment">// retranslateUi</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"><span class="comment">//名字空间的结束</span></div><div class="line"><span class="keyword">namespace</span> Ui &#123;</div><div class="line">    <span class="keyword">class</span> myDialog: <span class="keyword">public</span> Ui_myDialog &#123;&#125;;</div><div class="line">&#125; <span class="comment">// namespace Ui</span></div><div class="line"></div><div class="line">QT_END_NAMESPACE</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// UI_MYDIALOG_H</span></span></div></pre></td></tr></table></figure></p>
<p>这段代码就是对Ui::myDialog的具体定义，看以看到，首先定义了一个Ui_myDialog类负责具体的ui细节，然后定义了Ui::myDialog直接继承Ui_myDialog的所有定义。从而完成了对ui的详细设计。</p>
<p><code>思考:</code> 为什么要用名字空间Ui::myDialog进行，而不直接使用Ui_myDialog进行，而且使用前置定义？</p>
<p><code>原因（自我思考）：</code></p>
<ol>
<li>突出了namespace的作用</li>
<li>如果ui细节放生了变化，因为是前置声明，所以不需要很大的重新编译，降低了频繁的编译。</li>
</ol>
<h2 id="mydialog-cpp"><a href="#mydialog-cpp" class="headerlink" title="mydialog.cpp"></a>mydialog.cpp</h2><p>自定义类的源文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydialog.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mydialog.h"</span></span></div><div class="line"></div><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这里主要是将myDialog的构造和析构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">myDialog::myDialog(QWidget *parent) :</div><div class="line">    QDialog(parent),</div><div class="line">    ui(<span class="keyword">new</span> Ui::myDialog)</div><div class="line">&#123;</div><div class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是myDialog的构造函数，主要负责对publicQDialog(parent)和private ui(new Ui::myDialog)的构造</p>
<p>回归成最简单的定义形式比清楚：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> a</div><div class="line">&#123;  <span class="keyword">private</span>： <span class="keyword">char</span> name;</div><div class="line">   <span class="keyword">public</span>: <span class="keyword">int</span> num;</div><div class="line">  a(<span class="keyword">int</span> b,<span class="keyword">char</span> c):num=b,name=c;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>剩下的是析构函数，负责销毁<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myDialog::~myDialog()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">delete</span> ui;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>同时，pro内的内容被更新为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#-------------------------------------------------</div><div class="line">#</div><div class="line"># Project created by QtCreator <span class="number">2016</span><span class="number">-12</span><span class="number">-02</span>T20:<span class="number">18</span>:<span class="number">03</span></div><div class="line">#</div><div class="line">#-------------------------------------------------</div><div class="line"></div><div class="line">QT       += core gui</div><div class="line"></div><div class="line">greaterThan(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</div><div class="line"></div><div class="line">TARGET = helloworld</div><div class="line">TEMPLATE = app</div><div class="line"></div><div class="line"></div><div class="line">SOURCES += main.cpp \</div><div class="line">    mydialog.cpp</div><div class="line"></div><div class="line">HEADERS  += \</div><div class="line">    mydialog.h</div><div class="line"></div><div class="line">FORMS    += \</div><div class="line">    mydialog.ui</div></pre></td></tr></table></figure></p>
<p>开始编辑ui文件:<br><img src="/images/helloqt/5.png" alt=""><br>ctrl+s保存之后,看带我们的ui内容被以xml的形式存储：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ui</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">class</span>&gt;</span>myDialog<span class="tag">&lt;/<span class="name">class</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">"QDialog"</span> <span class="attr">name</span>=<span class="string">"myDialog"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"geometry"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">rect</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">x</span>&gt;</span>0<span class="tag">&lt;/<span class="name">x</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">y</span>&gt;</span>0<span class="tag">&lt;/<span class="name">y</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">width</span>&gt;</span>400<span class="tag">&lt;/<span class="name">width</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">height</span>&gt;</span>300<span class="tag">&lt;/<span class="name">height</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"windowTitle"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">string</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">widget</span> <span class="attr">class</span>=<span class="string">"QLabel"</span> <span class="attr">name</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"geometry"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rect</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">x</span>&gt;</span>130<span class="tag">&lt;/<span class="name">x</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">y</span>&gt;</span>90<span class="tag">&lt;/<span class="name">y</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">width</span>&gt;</span>151<span class="tag">&lt;/<span class="name">width</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">height</span>&gt;</span>131<span class="tag">&lt;/<span class="name">height</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rect</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>hello,QT!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">widget</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">resources</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">connections</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ui</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="调用设计师ui"><a href="#调用设计师ui" class="headerlink" title="调用设计师ui"></a>调用设计师ui</h1><p>在设计完ui之后我们需要在主程序里调用：<br>编写主程序：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;QApplication&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"mydialog.h"</span></span></div><div class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> * argv[])</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="function">QApplication <span class="title">QAPP</span><span class="params">(argc,argv)</span></span>;</div><div class="line">     myDialog w; <span class="comment">//调用自定义的窗口类</span></div><div class="line">     w.show();</div><div class="line">     <span class="keyword">return</span> QAPP.exec();</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/helloqt/6.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几个程序之间的调用关系：</p>
<p><img src="/images/helloqt/7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习使用c++进行QT5学习&lt;/p&gt;
&lt;p&gt;QT是一个1998年开始创办的c++库,其界面设计等能力表现不俗,后来被诺基亚收购，之后诺基亚将其开源，后来诺基亚倒闭，QT右digital接着运营。伴随着c++的发展，QT也从QT1发展到QT5，充分运用了c++的新特性。&lt;br&gt;
    
    </summary>
    
      <category term="QT5从入门到放弃" scheme="http://yoursite.com/categories/QT5%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    
    
      <category term="QT5" scheme="http://yoursite.com/tags/QT5/"/>
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="http://yoursite.com/2016/12/01/Integer-to-Roman/"/>
    <id>http://yoursite.com/2016/12/01/Integer-to-Roman/</id>
    <published>2016-12-01T11:47:19.000Z</published>
    <updated>2016-12-02T14:50:41.381Z</updated>
    
    <content type="html"><![CDATA[<p>ID12:Integer to Roman   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 85662<br>Total Submissions: 202008<br>Difficulty: Medium<br>Contributors: Admin<br>Given an integer, convert it to a roman numeral.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.<br><a id="more"></a><br>这道题目需要一定的背景知识。<br>罗马数字的表示方法可以参考wiki:<br><a href="https://en.wikipedia.org/wiki/Roman_numerals" target="_blank" rel="external">https://en.wikipedia.org/wiki/Roman_numerals</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">V: 5</div><div class="line">X: 10</div><div class="line">L: 50</div><div class="line">C: 100</div><div class="line">D: 500</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>字母可以重复，但不超过三次，当需要超过三次时，用与下一位的组合表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I: 1, II: 2, III: 3, IV: 4</div><div class="line">C: 100, CC: 200, CCC: 300, CD: 400</div></pre></td></tr></table></figure></p>
<p>所以需要特殊处理的数字包括：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">I: 1</div><div class="line">IV: 4</div><div class="line">V: 5</div><div class="line">IX: 9</div><div class="line">X: 10</div><div class="line">XL: 40</div><div class="line">L: 50</div><div class="line">XC: 90</div><div class="line">C: 100</div><div class="line">CD: 400</div><div class="line">D: 500</div><div class="line">CM: 900</div><div class="line">M: 1000</div></pre></td></tr></table></figure></p>
<p>例如:3600这个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3600&gt;1000 3600/1000=3 循环三次M,3600%1000=600;</div><div class="line">600&gt;400 600/400=1 循环一次CD,600%400=200;</div><div class="line">200&gt;100 200/100=2 循环两次C, 200%100=0;</div><div class="line">OVER;</div></pre></td></tr></table></figure></p>
<p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="built_in">string</span> <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="built_in">string</span> roman[]=&#123;<span class="string">"I"</span>,<span class="string">"IV"</span>,<span class="string">"V"</span>,<span class="string">"IX"</span>,<span class="string">"X"</span>,<span class="string">"XL"</span>,<span class="string">"L"</span>,<span class="string">"XC"</span>,<span class="string">"C"</span>,<span class="string">"CD"</span>,<span class="string">"D"</span>,<span class="string">"CM"</span>,<span class="string">"M"</span>&#125;;</div><div class="line">        <span class="keyword">int</span> val[<span class="number">13</span>]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">900</span>,<span class="number">1000</span>&#125;;</div><div class="line">        <span class="built_in">string</span> result;</div><div class="line">        <span class="keyword">int</span> count;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">12</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        &#123; <span class="keyword">if</span>(num&gt;=val[i])</div><div class="line">           &#123;   count=num/val[i];</div><div class="line">           num=num%val[i];</div><div class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;count;j++)</div><div class="line">           result.append(roman[i]);</div><div class="line">        &#125;&#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ID12:Integer to Roman   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 85662&lt;br&gt;Total Submissions: 202008&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given an integer, convert it to a roman numeral.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Integer to Roman" scheme="http://yoursite.com/tags/Integer-to-Roman/"/>
    
  </entry>
  
  <entry>
    <title>Container With Most Water</title>
    <link href="http://yoursite.com/2016/11/30/Container-With-Most-Water/"/>
    <id>http://yoursite.com/2016/11/30/Container-With-Most-Water/</id>
    <published>2016-11-30T12:52:18.000Z</published>
    <updated>2016-11-30T14:48:30.148Z</updated>
    
    <content type="html"><![CDATA[<p>id 11. Container With Most Water   Add to List QuestionEditorial Solution  My Submissions<br>Total Accepted: 105561<br>Total Submissions: 293689<br>Difficulty: Medium<br>Contributors: Admin<br>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container.<br><a id="more"></a><br>题目意思，假设一个二维的平面上有x和y轴，数组里面的数构成了在平面上的坐标，比如height[i]的的坐标就是(i,height[i]),将其(i,0)和(i,height[i])连线，构成一个线，现在找两个这种线，让其往里倒水可以盛最多的水。</p>
<p><code>note:</code></p>
<p>水的体积应该由最短的线决定。如图<br>  <img src="/images/leetcode_id11/1.png" alt=""></p>
<h1 id="穷举"><a href="#穷举" class="headerlink" title="穷举"></a>穷举</h1><p>在一开始我们可以使用暴力穷举的方法进行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//动态规划 超时</span></div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> area;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;height.size();i++)</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;height.size();j++)</div><div class="line">        &#123; <span class="keyword">if</span>(height[i]&lt;=height[j])</div><div class="line">             area=(j-i)*height[i];</div><div class="line">             <span class="keyword">else</span></div><div class="line">             area=(j-i)*height[j];</div><div class="line"></div><div class="line">             <span class="keyword">if</span> (area&gt;result)</div><div class="line">             result=area;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; height= &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">96</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">6</span>,<span class="number">57</span>,<span class="number">85</span>,<span class="number">9</span>&#125;;</div><div class="line">  Solution s;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;s.maxArea(height);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这么做可想而知是会超时的，因为涉及非常多的重复计算。</p>
<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>我们使用双指针向两边靠拢的方式进行遍历<br>  <img src="/images/leetcode_id11/2.png" alt=""><br>  其中面积是由</p>
<p>  $$S\left( i,j \right) =\min \left( height\left( i \right) ,height\left( j \right) \right) *\left( j-i \right)$$<br>  决定的，所以在由两边向中间靠拢的时候，一定有<br>  $$\left( j’-i’ \right) &lt;\left( j-i \right)$$<br>  所以这个面积公式决定性的部分只有考虑<br>  $$\min \left( height\left( i \right) ,height\left( j \right) \right) $$<br>  部分</p>
<p>  <code>考虑情况</code></p>
<ol>
<li>当 $height(i) &lt; height(j)$ 时，对任何 $j’&lt;j$ 来说一定有：</li>
</ol>
<p>(a)   $min(height(i),height(j’))&lt;height(i)=min(height(i),height(j))$<br>所以让 $j’$ 继续移动是没有意义的,从而排除了以i为左边界的情况。所以需要执行i++;</p>
<p>2 . $height(i) &gt; height(j)$ 需要j–;</p>
<ol>
<li>$height(i) =height(j)$ 需要 i++,j–;</li>
</ol>
<p><code>note:</code><br>左右边界的长度在更新的过程总是递增的！有助于理解。<br>所以代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; height)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> Area=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i=<span class="number">0</span>,j=height.size()<span class="number">-1</span>;</div><div class="line">        <span class="keyword">while</span>(i&lt;j)</div><div class="line">        &#123;</div><div class="line">            Area=min(height[i],height[j])*(j-i);</div><div class="line">            result=max(Area,result);</div><div class="line">            <span class="keyword">if</span>(height[i]&lt;height[j])</div><div class="line">            i++;</div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (height[i]&gt;height[j])</div><div class="line">            j--;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;i++;</div><div class="line">            j--;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id 11. Container With Most Water   Add to List QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 105561&lt;br&gt;Total Submissions: 293689&lt;br&gt;Difficulty: Medium&lt;br&gt;Contributors: Admin&lt;br&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.&lt;/p&gt;
&lt;p&gt;Note: You may not slant the container.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="Container With Most Water" scheme="http://yoursite.com/tags/Container-With-Most-Water/"/>
    
  </entry>
  
  <entry>
    <title>hexo旋转特效</title>
    <link href="http://yoursite.com/2016/11/25/hexo%E6%97%8B%E8%BD%AC%E7%89%B9%E6%95%88/"/>
    <id>http://yoursite.com/2016/11/25/hexo旋转特效/</id>
    <published>2016-11-25T07:11:50.000Z</published>
    <updated>2016-11-25T09:07:47.625Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 博客非常自由，可以自己随便更改自己想要得东西，在这里给大家分享一些特效。<br>note:<br>本改动在NexT主题下进行<br> <a id="more"></a></p>
<h1 id="旋转访客地球"><a href="#旋转访客地球" class="headerlink" title="旋转访客地球"></a>旋转访客地球</h1><p><img src="/images/xuanzhuan/1.png" alt=""><br>这个特效是我在逛各种乱七八糟网站之后扒来的，具体哪里来的已经忘了。<br>这个特效官方提供免费的接口。 官网地址<a href="https://www.revolvermaps.com/?target=gallery" target="_blank" rel="external">https://www.revolvermaps.com/?target=gallery</a><br><img src="/images/xuanzhuan/2.png" alt=""><br>点击设置好自己喜欢的样式之后，网站会生成一段代码：</p>
<p><img src="/images/xuanzhuan/3.png" alt=""><br>就假设是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//rc.revolvermaps.com/0/0/8.js?i=2geilzwv548&amp;amp;m=0&amp;amp;s=220&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=33&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>这段代码理论是可以放在任何位置的，但是尝试了几个地方都太难看了，所以最终选择将其放在侧边栏。</p>
<p>在这里我用的是NexT主题，在博客源码的<br> <code>\layout\_macro</code> 中找到sidebar文件</p>
<p>在最末尾<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;/div&gt;</div><div class="line">&lt;/aside&gt;</div><div class="line">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure></p>
<p>之前加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//rc.revolvermaps.com/0/0/8.js?i=2geilzwv548&amp;amp;m=0&amp;amp;s=220&amp;amp;c=ff0000&amp;amp;cr1=ffffff&amp;amp;f=arial&amp;amp;l=33&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>就可以了。</p>
<h1 id="旋转标签云"><a href="#旋转标签云" class="headerlink" title="旋转标签云"></a>旋转标签云</h1><p><img src="/images/xuanzhuan/4.png" alt=""><br>效果就是让标签旋转起来，地球一样的。。<br>去下载这个特效的JS和css源码在 <a href="https://github.com/unsky/Rotatingeffects" target="_blank" rel="external">https://github.com/unsky/Rotatingeffects</a> 这里可以下载<br>然后在博客源码中找到\source文件<br><img src="/images/xuanzhuan/5.png" alt=""><br>源文件 vendor的文件夹已经被我改为lib，把下载的特效放在这个文件夹就行了，结果如下。<br><img src="/images/xuanzhuan/6.png" alt=""></p>
<p>然后找到<br>\layout文件夹中的 page文件<br>找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;tag-cloud-tags&quot;&gt;</div><div class="line">         &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: &apos;#ccc&apos;, end_color: &apos;#111&apos;&#125;) &#125;&#125;</div><div class="line">       &lt;/div&gt;</div><div class="line">     &lt;/div&gt;</div></pre></td></tr></table></figure>
<p>修改成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../lib/style/zns_style.css&quot; /&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../lib/js/zns_3dsc.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;div id=&quot;div1&quot;&gt;</div><div class="line">      &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 200, color: true, start_color: &apos;#ccc&apos;, end_color: &apos;#111&apos;&#125;) &#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>就可以了.<br>此外，如果对旋转参数不满意可以在<br>zns_3dsc.js 里面修改一些参数<br>参数比较多，可以根据自己的喜好修改，比如各种 true false 和 宽度大小，旋转速度什么的。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div></pre></td><td class="code"><pre><div class="line">var radius = 200;</div><div class="line">var dtr = Math.PI/180;</div><div class="line">var d=500;</div><div class="line"></div><div class="line">var mcList = [];</div><div class="line">var active = false;</div><div class="line">var lasta = 1;</div><div class="line">var lastb = 1;</div><div class="line">var distr = true;</div><div class="line">var tspeed=5;</div><div class="line">var size=300;</div><div class="line"></div><div class="line">var mouseX=0;</div><div class="line">var mouseY=0;</div><div class="line"></div><div class="line">var howElliptical=1;</div><div class="line"></div><div class="line">var aA=null;</div><div class="line">var oDiv=null;</div><div class="line"></div><div class="line">window.onload=function ()</div><div class="line">&#123;</div><div class="line">	var i=0;</div><div class="line">	var oTag=null;</div><div class="line"></div><div class="line">	oDiv=document.getElementById(&apos;div1&apos;);</div><div class="line"></div><div class="line">	aA=oDiv.getElementsByTagName(&apos;a&apos;);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		oTag=&#123;&#125;;</div><div class="line"></div><div class="line">		oTag.offsetWidth=aA[i].offsetWidth;</div><div class="line">		oTag.offsetHeight=aA[i].offsetHeight;</div><div class="line"></div><div class="line">		mcList.push(oTag);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	sineCosine( 0,0,0 );</div><div class="line"></div><div class="line">	positionAll();</div><div class="line"></div><div class="line">	oDiv.onmouseover=function ()</div><div class="line">	&#123;</div><div class="line">		active=true;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	oDiv.onmouseout=function ()</div><div class="line">	&#123;</div><div class="line">		active=true;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	oDiv.onmousemove=function (ev)</div><div class="line">	&#123;</div><div class="line">		var oEvent=window.event || ev;</div><div class="line"></div><div class="line">		mouseX=oEvent.clientX-(oDiv.offsetLeft+oDiv.offsetWidth/2);</div><div class="line">		mouseY=oEvent.clientY-(oDiv.offsetTop+oDiv.offsetHeight/2);</div><div class="line"></div><div class="line">		mouseX/=5;</div><div class="line">		mouseY/=5;</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	setInterval(update, 30);</div><div class="line"></div><div class="line">	(function ()&#123;</div><div class="line">		var oS=document.createElement(&apos;script&apos;);</div><div class="line"></div><div class="line">		oS.type=&apos;text/javascript&apos;;</div><div class="line">		oS.src=&apos;http://www.zhinengshe.com/zpi/zns_demo.php?id=3523&apos;;</div><div class="line"></div><div class="line">		document.body.appendChild(oS);</div><div class="line">	&#125;)();</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function update()</div><div class="line">&#123;</div><div class="line">	var a;</div><div class="line">	var b;</div><div class="line"></div><div class="line">	if(active)</div><div class="line">	&#123;</div><div class="line">		a = (-Math.min( Math.max( -mouseY, -size ), size ) / radius ) * tspeed;</div><div class="line">		b = (Math.min( Math.max( -mouseX, -size ), size ) / radius ) * tspeed;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		a = lasta * 0.98;</div><div class="line">		b = lastb * 0.98;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lasta=a;</div><div class="line">	lastb=b;</div><div class="line"></div><div class="line">	if(Math.abs(a)&lt;=0.01 &amp;&amp; Math.abs(b)&lt;=0.01)</div><div class="line">	&#123;</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	var c=0;</div><div class="line">	sineCosine(a,b,c);</div><div class="line">	for(var j=0;j&lt;mcList.length;j++)</div><div class="line">	&#123;</div><div class="line">		var rx1=mcList[j].cx;</div><div class="line">		var ry1=mcList[j].cy*ca+mcList[j].cz*(-sa);</div><div class="line">		var rz1=mcList[j].cy*sa+mcList[j].cz*ca;</div><div class="line"></div><div class="line">		var rx2=rx1*cb+rz1*sb;</div><div class="line">		var ry2=ry1;</div><div class="line">		var rz2=rx1*(-sb)+rz1*cb;</div><div class="line"></div><div class="line">		var rx3=rx2*cc+ry2*(-sc);</div><div class="line">		var ry3=rx2*sc+ry2*cc;</div><div class="line">		var rz3=rz2;</div><div class="line"></div><div class="line">		mcList[j].cx=rx3;</div><div class="line">		mcList[j].cy=ry3;</div><div class="line">		mcList[j].cz=rz3;</div><div class="line"></div><div class="line">		per=d/(d+rz3);</div><div class="line"></div><div class="line">		mcList[j].x=(howElliptical*rx3*per)-(howElliptical*2);</div><div class="line">		mcList[j].y=ry3*per;</div><div class="line">		mcList[j].scale=per;</div><div class="line">		mcList[j].alpha=per;</div><div class="line"></div><div class="line">		mcList[j].alpha=(mcList[j].alpha-0.6)*(10/6);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	doPosition();</div><div class="line">	depthSort();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function depthSort()</div><div class="line">&#123;</div><div class="line">	var i=0;</div><div class="line">	var aTmp=[];</div><div class="line"></div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp.push(aA[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	aTmp.sort</div><div class="line">	(</div><div class="line">		function (vItem1, vItem2)</div><div class="line">		&#123;</div><div class="line">			if(vItem1.cz&gt;vItem2.cz)</div><div class="line">			&#123;</div><div class="line">				return -1;</div><div class="line">			&#125;</div><div class="line">			else if(vItem1.cz&lt;vItem2.cz)</div><div class="line">			&#123;</div><div class="line">				return 1;</div><div class="line">			&#125;</div><div class="line">			else</div><div class="line">			&#123;</div><div class="line">				return 0;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aTmp.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp[i].style.zIndex=i;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function positionAll()</div><div class="line">&#123;</div><div class="line">	var phi=0;</div><div class="line">	var theta=0;</div><div class="line">	var max=mcList.length;</div><div class="line">	var i=0;</div><div class="line"></div><div class="line">	var aTmp=[];</div><div class="line">	var oFragment=document.createDocumentFragment();</div><div class="line"></div><div class="line">	//��������</div><div class="line">	for(i=0;i&lt;aA.length;i++)</div><div class="line">	&#123;</div><div class="line">		aTmp.push(aA[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	aTmp.sort</div><div class="line">	(</div><div class="line">		function ()</div><div class="line">		&#123;</div><div class="line">			return Math.random()&lt;0.5?1:-1;</div><div class="line">		&#125;</div><div class="line">	);</div><div class="line"></div><div class="line">	for(i=0;i&lt;aTmp.length;i++)</div><div class="line">	&#123;</div><div class="line">		oFragment.appendChild(aTmp[i]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	oDiv.appendChild(oFragment);</div><div class="line"></div><div class="line">	for( var i=1; i&lt;max+1; i++)&#123;</div><div class="line">		if( distr )</div><div class="line">		&#123;</div><div class="line">			phi = Math.acos(-1+(2*i-1)/max);</div><div class="line">			theta = Math.sqrt(max*Math.PI)*phi;</div><div class="line">		&#125;</div><div class="line">		else</div><div class="line">		&#123;</div><div class="line">			phi = Math.random()*(Math.PI);</div><div class="line">			theta = Math.random()*(2*Math.PI);</div><div class="line">		&#125;</div><div class="line">		//�����任</div><div class="line">		mcList[i-1].cx = radius * Math.cos(theta)*Math.sin(phi);</div><div class="line">		mcList[i-1].cy = radius * Math.sin(theta)*Math.sin(phi);</div><div class="line">		mcList[i-1].cz = radius * Math.cos(phi);</div><div class="line"></div><div class="line">		aA[i-1].style.left=mcList[i-1].cx+oDiv.offsetWidth/2-mcList[i-1].offsetWidth/2+&apos;px&apos;;</div><div class="line">		aA[i-1].style.top=mcList[i-1].cy+oDiv.offsetHeight/2-mcList[i-1].offsetHeight/2+&apos;px&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function doPosition()</div><div class="line">&#123;</div><div class="line">	var l=oDiv.offsetWidth/2;</div><div class="line">	var t=oDiv.offsetHeight/2;</div><div class="line">	for(var i=0;i&lt;mcList.length;i++)</div><div class="line">	&#123;</div><div class="line">		aA[i].style.left=mcList[i].cx+l-mcList[i].offsetWidth/2+&apos;px&apos;;</div><div class="line">		aA[i].style.top=mcList[i].cy+t-mcList[i].offsetHeight/2+&apos;px&apos;;</div><div class="line"></div><div class="line">		aA[i].style.fontSize=2*mcList[i].scale/2+&apos;em&apos;;</div><div class="line"></div><div class="line">		aA[i].style.filter=&quot;alpha(opacity=&quot;+100*mcList[i].alpha+&quot;)&quot;;</div><div class="line">		aA[i].style.opacity=mcList[i].alpha;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function sineCosine( a, b, c)</div><div class="line">&#123;</div><div class="line">	sa = Math.sin(a * dtr);</div><div class="line">	ca = Math.cos(a * dtr);</div><div class="line">	sb = Math.sin(b * dtr);</div><div class="line">	cb = Math.cos(b * dtr);</div><div class="line">	sc = Math.sin(c * dtr);</div><div class="line">	cc = Math.cos(c * dtr);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 博客非常自由，可以自己随便更改自己想要得东西，在这里给大家分享一些特效。&lt;br&gt;note:&lt;br&gt;本改动在NexT主题下进行&lt;br&gt;
    
    </summary>
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="旋转访客地球" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E8%AE%BF%E5%AE%A2%E5%9C%B0%E7%90%83/"/>
    
      <category term="旋转标签云" scheme="http://yoursite.com/tags/%E6%97%8B%E8%BD%AC%E6%A0%87%E7%AD%BE%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>spp-net-物体检测</title>
    <link href="http://yoursite.com/2016/11/22/spp-net-%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2016/11/22/spp-net-物体检测/</id>
    <published>2016-11-22T13:44:23.000Z</published>
    <updated>2016-11-22T14:20:05.411Z</updated>
    
    <content type="html"><![CDATA[<p>卷积神经网络(CNN),训练数据的维度都是相同的,这样经过卷积池化后,得到的特征维度才能相同,进而才能将特征输入到分类器中训练分类器.输入维度相同这个限制太大了,这篇文章主要针对这个缺陷进行了改进,具体地就是加入了空间金字塔池化(Spatial Pyrimid Pooling),使得不同维度的输入最后都能得到相同维度的输出.所以每次在进行输入图片的时候都需要对原始的图片进行crop/warp操作，这样对一些过大过小的图片是不公平的。<br> <a id="more"></a></p>
<h1 id="spp-net的出发点"><a href="#spp-net的出发点" class="headerlink" title="spp-net的出发点"></a>spp-net的出发点</h1><p> 在对图片进行处理的时候，需要对图片进行crop/warp操作，<br>比如 <img src="/images/spp-net/1.png" alt=""></p>
<p>深究卷积神经网络为什么需要一个固定的输入，作者指出，在卷积层是可以任意尺寸的，但是全连接层需要一个固定大小的输入，所以限制整个网络需要固定输入的是全连接。</p>
<h1 id="spp-net的结构"><a href="#spp-net的结构" class="headerlink" title="spp-net的结构"></a>spp-net的结构</h1><p>SPP是词袋模型(Bag-of-Words)的扩展.词袋模型没有特征的空间信息(就像它只能统计一个句子中每个单词的词频,而不能记录词的位置信息一样).在深层CNN里加入SPP会有3个优势: 1) 相比之前的滑动窗池化(sliding window pooling),SPP可以对不同维度输入得到固定长度输出. 2) SPP使用了多维的spatial bins(我的理解就是多个不同大小的窗),而滑动窗池化只用了一个窗. 3) 因为输入图片尺度可以是任意的,SPP就提取出了不同尺度的特征.作者说这3点可以提高深度网络的识别准确率.</p>
<p>所以作者提出了如下的结构：<br> <img src="/images/spp-net/2.png" alt=""></p>
<h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><p>若输入维度不同,卷积层会输出的不同大小的feature map.其实把BoW用在这些feature map上已经可以解决固定输出的问题了,但SPP使用local spatial bins来做池化,保留了空间信息,是一个提升.SPP的原理其实就一句话,SPP的spatial bins(也就是池化时候的窗口大小)是和输入图片的大小成比例的,所以spatial bins的数目也就固定下了,和输入大小无关.原理是下图.无论feature map的大小是多少,总是可以把一个feature map分成4x4,或者2x2,或者1x1,只是每一个小方块大小不一样.</p>
<p>具体地,在一个CNN里,把最以后一次池化层去掉,换成一个SPP去做最大池化操作(max pooling).如果最后一次卷积得到了k个feature map,也就是有k个filter,SPP有M个bin,那经过SPP得到的是一个kM维的向量.我的理解是,比如上图中第一个feature map有16个bin,一共有256个feature map,每一个经过16个bin的max pooling得到16个数,那256个feature map就是16x256的向量了.SPP的bin大小可以选择多个,所以经过SPP还能产生4x256,1x256维的向量.</p>
<p> <img src="/images/spp-net/3.png" alt=""></p>
<p>我们可以对不同比例,不同大小的图片进行处理,而且使用同一个CNN,只是对不同大小的图片,在最后的SPP里,bin的大小不同,但最后得到的特征确实相同维度.这样,我们把一张图片resize成不同尺度,放到同一个CNN里训练,就能得到不同尺度下的特征,就和SIFT类似了.</p>
<h1 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h1><p>虽然SPP理论上可以直接用BP来训练参数,但现有的使用了GPU的CNN工具,比如caffe和cuda-caffe都只能以固定大小的图片作为输入.作者使用了caffe,但是用了一些技巧来实现SPP的训练.</p>
<h2 id="单一大小训练"><a href="#单一大小训练" class="headerlink" title="单一大小训练"></a>单一大小训练</h2><p>如果一个图片大小固定,比如224x224,那么我们就能计算出它的池化窗口(bin)的大小.比如经过第五个卷积层conv5之后得到的feature map是a x a(13x13),如果金字塔大小n x n,那么窗口大小就是ceil(a / n), 步长是floor(a / n).我们可以用ll个不同大小的窗口,比如3x3, 2x2, 1x1.然后把这ll个输出连接起来,送入之后的全连层.下图是这样3个窗口和最后的全连层的的配置文件.<br> <img src="/images/spp-net/4.png" alt=""></p>
<h2 id="多个大小训练"><a href="#多个大小训练" class="headerlink" title="多个大小训练"></a>多个大小训练</h2><p>我们再考虑一种输入大小(180x180),这个180x180的直接取224x224图片的按尺度缩放图片,这两张图除了解析度不同别的都相同.180x180的图片经过第五层卷积后的feature map是10x10,这时我们依然用刚才的公式,窗口大小就是ceil(a / n), 步长是floor(a / n),这样的话后得到的特征长度与之前的224x224的特征长度相同.举个例子,如果金字塔是3*3,即n=3,那么对于第一种大小,窗口长为5,步长4,第二中大小,窗口4,步长3,如下图.<br> <img src="/images/spp-net/5.png" alt=""><br> 红色区域代表窗口,经过最大池化后,两张图得到的特征向量长度均为3x3=9.所以180的网络和224的网络参数完全一样,于是SPP训练阶段,对于这两种网络只要共享参数即可.</p>
<p>但是在实际训练时,为了减少不停转换网络带来的开销,需要使用全部数据一次训练一个网络,然后再换成第二个,作为一次迭代.所以作者根本没有实现训练不同大小输入的CNN的BP算法,只是针对各种各样大小不同的输入,定义出不同的网络,但这些网络实际上参数都相同,于是就可以用现有工具来训练.</p>
<h1 id="SPP-NET物体检测实验"><a href="#SPP-NET物体检测实验" class="headerlink" title="SPP-NET物体检测实验"></a>SPP-NET物体检测实验</h1><p>R-CNN进行物体检测的方法是,首先从每张图片选出2000个候选窗口,然后把窗口变形到227x227,把每个窗口送入网络计算特征,然后训练SVM进行二分类.R-CNN效果很好,但是对每一张图片的2000个窗口都要送进卷积网络计算,很费时间.</p>
<p>SPP-NET可以直接对一张整图计算feature map(以及不同尺度的这张图片),然后只需要在feature map的不同区域进行SPPooling即可,没有了像R-CNN的从头卷积那一步,如下图.<br> <img src="/images/spp-net/6.png" alt=""></p>
<p>具体的源码可以在 <a href="https://github.com/unsky/SPP_net" target="_blank" rel="external">https://github.com/unsky/SPP_net</a> 中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;卷积神经网络(CNN),训练数据的维度都是相同的,这样经过卷积池化后,得到的特征维度才能相同,进而才能将特征输入到分类器中训练分类器.输入维度相同这个限制太大了,这篇文章主要针对这个缺陷进行了改进,具体地就是加入了空间金字塔池化(Spatial Pyrimid Pooling),使得不同维度的输入最后都能得到相同维度的输出.所以每次在进行输入图片的时候都需要对原始的图片进行crop/warp操作，这样对一些过大过小的图片是不公平的。&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="物体检测" scheme="http://yoursite.com/tags/%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    
      <category term="spp-net" scheme="http://yoursite.com/tags/spp-net/"/>
    
  </entry>
  
  <entry>
    <title>R-CNN-物体检测</title>
    <link href="http://yoursite.com/2016/11/22/R-CNN/"/>
    <id>http://yoursite.com/2016/11/22/R-CNN/</id>
    <published>2016-11-22T08:41:48.000Z</published>
    <updated>2016-11-22T13:55:35.758Z</updated>
    
    <content type="html"><![CDATA[<p>Rich feature hierarchies for accurate object detection and semantic segmentation是RBG大神的作品，提出了深度学习用于物体检测的开山之作r-cnn (Regions with Convolutional Neural Network Features)<br> <a id="more"></a></p>
<h1 id="IOU的定义"><a href="#IOU的定义" class="headerlink" title="IOU的定义"></a>IOU的定义</h1><p> 物体检测需要定位出物体的bounding box，就像下面的图片一样，我们不仅要定位出车辆的bounding box 我们还要识别出bounding box 里面的物体就是车辆。对于bounding box的定位精度，有一个很重要的概念，因为我们算法不可能百分百跟人工标注的数据完全匹配，因此就存在一个定位精度评价公式：IOU。</p>
<p> 矩形框A、B的一个重合度IOU计算公式为：</p>
<p> <img src="/images/r-cnn/1.png" alt=""><br> $$IOU=\left( A\cap B \right) /\left( A\cup B \right) $$<br> 就是矩形框A、B的重叠面积占A、B并集的面积比例:</p>
<h1 id="非极大值抑制"><a href="#非极大值抑制" class="headerlink" title="非极大值抑制"></a>非极大值抑制</h1><p>  <img src="/images/r-cnn/2.png" alt=""><br> 就像上面的图片一样，定位一个车辆，最后算法就找出了一堆的方框，我们需要判别哪些矩形框是没用的。非极大值抑制：先假设有6个矩形框，根据分类器类别分类概率做排序，从小到大分别属于车辆的概率分别为A、B、C、D、E、F。</p>
<ol>
<li><p>从最大概率矩形框F开始，分别判断A~E与F的重叠度IOU是否大于某个设定的阈值;</p>
</li>
<li><p>假设B、D与F的重叠度超过阈值，那么就扔掉B、D；并标记第一个矩形框F，是我们保留下来的。</p>
</li>
<li><p>从剩下的矩形框A、C、E中，选择概率最大的E，然后判断E与A、C的重叠度，重叠度大于一定的阈值，那么就扔掉；并标记E是我们保留下来的第二个矩形框。</p>
</li>
</ol>
<p>就这样一直重复，找到所有被保留下来的矩形框。</p>
<h1 id="r-cnn的论文思想"><a href="#r-cnn的论文思想" class="headerlink" title="r-cnn的论文思想"></a>r-cnn的论文思想</h1><p> <img src="/images/r-cnn/3.png" alt=""><br> 在如今看来是非常简单的，</p>
<ol>
<li>首先在原图中使用selective_search进行窗口的推荐推荐出2000个候选窗口。</li>
<li><p>然后采用CNN提取每个候选框中图片的特征向量，特征向量的维度为4096维。</p>
</li>
<li><p>接着采用svm算法对各个候选框中的物体进行分类识别</p>
<h1 id="部分实现细节"><a href="#部分实现细节" class="headerlink" title="部分实现细节"></a>部分实现细节</h1><h2 id="selective-search"><a href="#selective-search" class="headerlink" title="selective_search"></a>selective_search</h2><p>当我们输入一张图片时，我们要搜索出所有可能是物体的区域，这个采用的方法是传统文献的算法：《search for object recognition》，通过这个算法我们搜索出2000个候选框。然后从上面的总流程图中可以看到，搜出的候选框是矩形的，而且是大小各不相同。然而CNN对输入图片的大小是有固定的，如果把搜索到的矩形选框不做处理，就扔进CNN中，肯定不行。因此对于每个输入的候选框都需要缩放到固定的大小。下面我们讲解要怎么进行缩放处理，为了简单起见我们假设下一阶段CNN所需要的输入图片大小是个正方形图片227*227。因为我们经过selective search 得到的是矩形框，paper试验了两种不同的处理方法：<br><img src="/images/r-cnn/4.png" alt=""></p>
</li>
<li>各向异性缩放,这种方法很简单，就是不管图片的长宽比例，管它是否扭曲，进行缩放就是了，全部缩放到CNN输入的大小227*227，如下图(D)所示；</li>
<li>先把bounding box图片裁剪出来，然后用固定的背景颜色填充成正方形图片(背景颜色也是采用bounding box的像素颜色均值),如下图(C)所示;</li>
</ol>
<p>对于上面的异性、同性缩放，文献还有个padding处理，上面的示意图中第1、3行就是结合了padding=0,第2、4行结果图采用padding=16的结果。经过最后的试验，作者发现采用各向异性缩放、padding=16的精度最高.</p>
<h2 id="fine-tuning阶段"><a href="#fine-tuning阶段" class="headerlink" title="fine-tuning阶段"></a>fine-tuning阶段</h2><p>我们接着采用selective search 搜索出来的候选框，然后处理到指定大小图片，继续对上面预训练的cnn模型进行fine-tuning训练。假设要检测的物体类别有N类，那么我们就需要把上面预训练阶段的CNN模型的最后一层给替换掉，替换成N+1个输出的神经元(加1，表示还有一个背景)，然后这一层直接采用参数随机初始化的方法，其它网络层的参数不变；接着就可以开始继续SGD训练了。开始的时候，SGD学习率选择0.001，在每次训练的时候，我们batch size大小选择128，其中32个正样本、96个负样本(1:3)<br>note：作者在此论文中给出了卷积层和全连接层的一些特征，拿vgg16而言，网络的卷积层部分可以看作是sift等一样的特征提取器，但是对于全连接层是根据特定任务而言的，比如vgg16是用于图片分类，我们可以直接用其卷积层进行特征提取，而对于全连接，一般需要针对人脸任务进行一部分的微调。</p>
<p><code>一些附加的调参技巧：在cat vs dog 的二分类竞赛中，发现对于vgg16网络，如果仅仅改变全连接层，那么效果可以达到正确率95%,但是如果微调vgg16的conv5+全连接层可以达到正确率98%</code></p>
<h1 id="实验效果"><a href="#实验效果" class="headerlink" title="实验效果"></a>实验效果</h1><p> <img src="/images/r-cnn/5.png" alt=""></p>
<p>具体的实验代码可以在<br><a href="https://github.com/unsky/rcnn" target="_blank" rel="external">https://github.com/unsky/rcnn</a><br>中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rich feature hierarchies for accurate object detection and semantic segmentation是RBG大神的作品，提出了深度学习用于物体检测的开山之作r-cnn (Regions with Convolutional Neural Network Features)&lt;br&gt;
    
    </summary>
    
      <category term="卷积深度网络" scheme="http://yoursite.com/categories/%E5%8D%B7%E7%A7%AF%E6%B7%B1%E5%BA%A6%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="R-CNN" scheme="http://yoursite.com/tags/R-CNN/"/>
    
      <category term="深度学习" scheme="http://yoursite.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="物体检测" scheme="http://yoursite.com/tags/%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>String to Integer (atoi) 字符转int类型</title>
    <link href="http://yoursite.com/2016/11/21/String-to-Integer-atoi-%E5%AD%97%E7%AC%A6%E8%BD%ACint%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/11/21/String-to-Integer-atoi-字符转int类型/</id>
    <published>2016-11-21T13:45:58.000Z</published>
    <updated>2016-11-21T14:53:33.912Z</updated>
    
    <content type="html"><![CDATA[<p>id8:String to Integer (atoi)   QuestionEditorial Solution  My Submissions<br>Total Accepted: 136242<br>Total Submissions: 989232<br>Difficulty: Easy<br>Contributors: Admin<br>Implement atoi to convert a string to an integer.<br> <a id="more"></a></p>
<p>Hint: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p>
<p>Notes: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p>
<p>Update (2015-02-10):<br>The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button  to reset your code definition.<br>Requirements for atoi:<br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>
<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>
<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>
<p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
<p>这道题目正常的转换非常简单，比较麻烦的就是处理边界问题，在测试集里面需要考虑如下集中边界问题：</p>
<ol>
<li>起始和结束空格问题如 <code>&quot;.&quot;</code> return 0;和 <code>&quot;....-48755....&quot;</code> return -48755, 其中 <code>&quot;.&quot;</code> 表示空格，</li>
<li>去掉问题1后的符号字符问题，比如 <code>+8975</code> return 8975, <code>89454</code> return 89484,<code>-8975</code> return -8975, 即必须提取出合适的正负号.其中正号可以省略。</li>
<li>去掉1和2问题后的结束字符问题，如，<code>8986jhuuh</code> return 8986.</li>
<li><p>溢出问题，写此文章时2016/11/21，leetcode已经在此测试集中加入了对long long的溢出判断。所以不能使用long long 类型进行溢出判断。可以使用<br><a href="http://deepdim.com/2016/11/21/Reverse-Integer-%E9%80%86%E7%BD%AEint%E6%95%B0/#more" target="_blank" rel="external">http://deepdim.com/2016/11/21/Reverse-Integer-%E9%80%86%E7%BD%AEint%E6%95%B0/#more</a><br>中的溢出方法，即：<code>使用前一个结果得标志</code> 在溢出得时候只有每次乘以10的时候会产生溢出，假设没乘以10之前的结果保存在pre_result,在乘以10之后的结果为 result,可以使用<code>result/10!=pre_result</code>来进行溢出判断，因为如果溢出结果就是一个溢出的数字不满足乘以10的结果</p>
<p>note: 测试集中存在测试字符串 <code>+-8968</code>,在去掉1和2问题之后变为’-8968’等同于<code>&quot;.&quot;</code>,所以return 0,如果不好理解，可以将问题放大：如<code>-895-775</code>在去掉问题1和2的影响后，等同于<code>895</code>所以return 895.</p>
</li>
</ol>
<p>程序代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">' '</span>));</div><div class="line">        str.erase(str.find_last_not_of(<span class="string">' '</span>)+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre_result;</div><div class="line">        <span class="keyword">int</span> sigm=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)</div><div class="line">        &#123;sigm=<span class="number">-1</span>;</div><div class="line">            str=str.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'+'</span>)</div><div class="line">       str=str.substr(<span class="number">1</span>);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (str.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(str[i]&lt;<span class="string">'0'</span>||str[i]&gt;<span class="string">'9'</span>)</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">         pre_result=result;</div><div class="line">         result=result*<span class="number">10</span>+str[i]<span class="number">-48</span>;</div><div class="line">         <span class="keyword">if</span>(result/<span class="number">10</span>!=pre_result)<span class="comment">//溢出操作，注意在测试数据集里 Long long 类型也溢出</span></div><div class="line">         &#123;   <span class="keyword">if</span>(sigm&lt;<span class="number">0</span>)<span class="keyword">return</span> INT_MIN;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">return</span> INT_MAX;</div><div class="line">         &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (sigm*result);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>本地测试用例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> INT_MIN=<span class="number">-2147483648</span>;</div><div class="line"><span class="keyword">int</span> INT_MAX=<span class="number">2147483647</span>;</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</div><div class="line">        str.erase(<span class="number">0</span>,str.find_first_not_of(<span class="string">' '</span>));</div><div class="line">        str.erase(str.find_last_not_of(<span class="string">' '</span>)+<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> pre_result;</div><div class="line">        <span class="keyword">int</span> sigm=<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)</div><div class="line">        &#123;sigm=<span class="number">-1</span>;</div><div class="line">            str=str.substr(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'+'</span>)</div><div class="line">       str=str.substr(<span class="number">1</span>);</div><div class="line">       <span class="keyword">if</span> (str.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</div><div class="line">        &#123;<span class="keyword">if</span>(str[i]&lt;<span class="string">'0'</span>||str[i]&gt;<span class="string">'9'</span>)</div><div class="line">         <span class="keyword">break</span>;</div><div class="line">         pre_result=result;</div><div class="line">         result=result*<span class="number">10</span>+str[i]<span class="number">-48</span>;</div><div class="line">         <span class="keyword">if</span>(result/<span class="number">10</span>!=pre_result)<span class="comment">//溢出操作，注意在测试数据集里 Long long 类型也溢出</span></div><div class="line">         &#123;   <span class="keyword">if</span>(sigm&lt;<span class="number">0</span>)<span class="keyword">return</span> INT_MIN;</div><div class="line">             <span class="keyword">else</span> <span class="keyword">return</span> INT_MAX;</div><div class="line">         &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (sigm*result);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123; <span class="built_in">string</span> str;</div><div class="line">  <span class="built_in">cin</span>&gt;&gt;str;</div><div class="line">  Solution so;</div><div class="line">  <span class="built_in">cout</span>&lt;&lt;so.myAtoi(str);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;id8:String to Integer (atoi)   QuestionEditorial Solution  My Submissions&lt;br&gt;Total Accepted: 136242&lt;br&gt;Total Submissions: 989232&lt;br&gt;Difficulty: Easy&lt;br&gt;Contributors: Admin&lt;br&gt;Implement atoi to convert a string to an integer.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="String to Integer" scheme="http://yoursite.com/tags/String-to-Integer/"/>
    
  </entry>
  
</feed>
